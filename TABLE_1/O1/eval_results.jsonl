{"task_id": 0, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}\n\n\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 0, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}\n\n\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 0, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}\n\n\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 0, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabsf(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabsf(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}\n\n\n\nint main(){\n    float a[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert(func0(a, 6, 0.3) == 1);\n    assert(func0(a, 6, 0.05) == 0);\n\n    float b[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    assert(func0(b, 5, 0.95) == 1);\n    assert(func0(b, 5, 0.8) == 0);\n    \n    float c[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(func0(c, 5, 2.0) == 1);\n\n    float d[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    assert(func0(d, 5, 1.0) == 1);\n    assert(func0(d, 5, 0.5) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 1, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    int count = 0;\n    int capacity = 10;\n    char** res = (char**)malloc(sizeof(char*) * capacity);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    int index = 0;\n    *returnSize = 0;\n    for (int i = 0; i < len; i++) {\n        if (s[i] == '(') {\n            count++;\n            tmp[index++] = '(';\n        } else if (s[i] == ')') {\n            count--;\n            tmp[index++] = ')';\n            if (count == 0) {\n                tmp[index] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                if (*returnSize >= capacity) {\n                    capacity *= 2;\n                    res = (char**)realloc(res, sizeof(char*) * capacity);\n                }\n                index = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    int count = 0;\n    int capacity = 10;\n    char** res = (char**)malloc(sizeof(char*) * capacity);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    int index = 0;\n    *returnSize = 0;\n    for (int i = 0; i < len; i++) {\n        if (s[i] == '(') {\n            count++;\n            tmp[index++] = '(';\n        } else if (s[i] == ')') {\n            count--;\n            tmp[index++] = ')';\n            if (count == 0) {\n                tmp[index] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                if (*returnSize >= capacity) {\n                    capacity *= 2;\n                    res = (char**)realloc(res, sizeof(char*) * capacity);\n                }\n                index = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}\n\n\n\n\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 1, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    char** res = malloc(sizeof(char*) * 10);\n    char* tmp = malloc(sizeof(char) * (len + 1));\n    int i, j, k, l, m, n;\n    *returnSize = 0;\n    for (i = 0, j = 0, k = 0; i < len; i++) {\n        if (s[i] == '(') {\n            k++;\n            tmp[j++] = s[i];\n        } else if (s[i] == ')') {\n            k--;\n            tmp[j++] = s[i];\n            if (k == 0) {\n                tmp[j] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                j = 0;\n                if (*returnSize + 1 >= 10) {\n                    res = realloc(res, sizeof(char*) * (*returnSize * 2));\n                }\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    char** res = malloc(sizeof(char*) * 10);\n    char* tmp = malloc(sizeof(char) * (len + 1));\n    int i, j, k, l, m, n;\n    *returnSize = 0;\n    for (i = 0, j = 0, k = 0; i < len; i++) {\n        if (s[i] == '(') {\n            k++;\n            tmp[j++] = s[i];\n        } else if (s[i] == ')') {\n            k--;\n            tmp[j++] = s[i];\n            if (k == 0) {\n                tmp[j] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                j = 0;\n                if (*returnSize + 1 >= 10) {\n                    res = realloc(res, sizeof(char*) * (*returnSize * 2));\n                }\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}\n\n\n\n\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 1, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    char** res = (char**)malloc(sizeof(char*) * 10);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    *returnSize = 0;\n    int i = 0, j = 0, count = 0;\n    int size = 10;\n    while (i < len) {\n        if (s[i] == '(') {\n            tmp[j++] = s[i++];\n            count++;\n        } else if (s[i] == ')') {\n            tmp[j++] = s[i++];\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                j = 0;\n                if (*returnSize >= size) {\n                    size *= 2;\n                    res = (char**)realloc(res, sizeof(char*) * size);\n                }\n            }\n        } else {\n            i++;\n        }\n    }\n    free(tmp);\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* s, int* returnSize) {\n    int len = strlen(s);\n    char** res = (char**)malloc(sizeof(char*) * 10);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    *returnSize = 0;\n    int i = 0, j = 0, count = 0;\n    int size = 10;\n    while (i < len) {\n        if (s[i] == '(') {\n            tmp[j++] = s[i++];\n            count++;\n        } else if (s[i] == ')') {\n            tmp[j++] = s[i++];\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[(*returnSize)++] = strdup(tmp);\n                j = 0;\n                if (*returnSize >= size) {\n                    size *= 2;\n                    res = (char**)realloc(res, sizeof(char*) * size);\n                }\n            }\n        } else {\n            i++;\n        }\n    }\n    free(tmp);\n    return res;\n}\n\n\n\n\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 1, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* str, int* returnSize) {\n    int len = strlen(str);\n    char** res = (char**)malloc(sizeof(char*) * 10);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    *returnSize = 0;\n    int i = 0, j = 0, k = 0, count = 0;\n    while (i < len) {\n        if (str[i] == '(') {\n            tmp[j++] = str[i++];\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = str[i++];\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[k++] = strdup(tmp);\n                (*returnSize)++;\n                if (*returnSize >= 10) {\n                    res = (char**)realloc(res, sizeof(char*) * (*returnSize) * 2);\n                    k = 0;\n                }\n                j = 0;\n            }\n        } else {\n            i++;\n        }\n    }\n    free(tmp);\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar** func0(char* str, int* returnSize) {\n    int len = strlen(str);\n    char** res = (char**)malloc(sizeof(char*) * 10);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    *returnSize = 0;\n    int i = 0, j = 0, k = 0, count = 0;\n    while (i < len) {\n        if (str[i] == '(') {\n            tmp[j++] = str[i++];\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = str[i++];\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[k++] = strdup(tmp);\n                (*returnSize)++;\n                if (*returnSize >= 10) {\n                    res = (char**)realloc(res, sizeof(char*) * (*returnSize) * 2);\n                    k = 0;\n                }\n                j = 0;\n            }\n        } else {\n            i++;\n        }\n    }\n    free(tmp);\n    return res;\n}\n\n\n\n\n\nint issame(char** a, int a_size, const char* b[], int b_size) {\n    if (a_size != b_size) {\n        return 0;\n    }\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nvoid free_groups(char** groups, int size) {\n    for (int i = 0; i < size; i++) {\n        free(groups[i]);\n    }\n    free(groups);\n}\n\nint main() {\n    int group_count;\n    char** result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &group_count);\n    const char* expected1[] = {\"(()())\", \"((()))\", \"()\", \"((())()())\"};\n    assert(issame(result, group_count, expected1, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"() (()) ((())) (((())))\", &group_count);\n    const char* expected2[] = {\"()\", \"(())\", \"((()))\", \"(((())))\"};\n    assert(issame(result, group_count, expected2, 4));\n    free_groups(result, group_count);\n\n    result = func0(\"(()(())((())))\", &group_count);\n    const char* expected3[] = {\"(()(())((())))\"};\n    assert(issame(result, group_count, expected3, 1));\n    free_groups(result, group_count);\n\n    result = func0(\"( ) (( )) (( )( ))\", &group_count);\n    const char* expected4[] = {\"()\", \"(())\", \"(()())\"};\n    assert(issame(result, group_count, expected4, 3));\n    free_groups(result, group_count);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 2, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}\n\n\n\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 2, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}\n\n\n\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 2, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}\n\n\n\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 2, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float x)\n{\n    return x - (int)x;\n}\n\n\n\n\nint main() {\n    assert(func0(3.5f) == 0.5f);\n    assert(fabs(func0(1.33f) - 0.33f) < 1e-4);\n    assert(fabs(func0(123.456f) - 0.456f) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 3, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}\n\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 3, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}\n\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 3, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}\n\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 3, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}\n\n\nint main() {\n    int case1[] = {};\n    assert(func0(case1, 0) == 0);\n\n    int case2[] = {1, 2, -3, 1, 2, -3};\n    assert(func0(case2, 6) == 0);\n\n    int case3[] = {1, 2, -4, 5, 6};\n    assert(func0(case3, 5) == 1);\n\n    int case4[] = {1, -1, 2, -2, 5, -5, 4, -4};\n    assert(func0(case4, 8) == 0);\n\n    int case5[] = {1, -1, 2, -2, 5, -5, 4, -5};\n    assert(func0(case5, 8) == 1);\n\n    int case6[] = {1, -2, 2, -2, 5, -5, 4, -4};\n    assert(func0(case6, 8) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 4, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    float mean = sum / n;\n    float sum2 = 0.0;\n    for (i = 0; i < n; i++)\n        sum2 += fabs(x[i] - mean);\n    return sum2 / n;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    float mean = sum / n;\n    float sum2 = 0.0;\n    for (i = 0; i < n; i++)\n        sum2 += fabs(x[i] - mean);\n    return sum2 / n;\n}\n\n\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 4, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}\n\n\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 4, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}\n\n\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 4, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *x, int n)\n{\n  int i;\n  float sum = 0.0;\n  float mean;\n  float var = 0.0;\n\n  if (n <= 0)\n    return 0.0;\n\n  for (i = 0; i < n; i++)\n    sum += x[i];\n\n  mean = sum / n;\n\n  for (i = 0; i < n; i++)\n    var += (x[i] - mean) * (x[i] - mean);\n\n  return var / n;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *x, int n)\n{\n  int i;\n  float sum = 0.0;\n  float mean;\n  float var = 0.0;\n\n  if (n <= 0)\n    return 0.0;\n\n  for (i = 0; i < n; i++)\n    sum += x[i];\n\n  mean = sum / n;\n\n  for (i = 0; i < n; i++)\n    var += (x[i] - mean) * (x[i] - mean);\n\n  return var / n;\n}\n\n\n\nint main() {\n    float case1[] = {1.0, 2.0, 3.0};\n    assert(fabs(func0(case1, 3) - 2.0/3.0) < 1e-4);\n\n    float case2[] = {1.0, 2.0, 3.0, 4.0};\n    assert(fabs(func0(case2, 4) - 1.0) < 1e-4);\n\n    float case3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    assert(fabs(func0(case3, 5) - 6.0/5.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 5, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int x, int *m)\n{\n    int i, j;\n    int *b;\n\n    *m = 2 * n - 1;\n    b = (int *)malloc(*m * sizeof(int));\n    for (i = 0; i < n; i++)\n        b[i] = a[i];\n    j = 1;\n    for (i = 1; i < n; i++)\n    {\n        b[j] = x;\n        j += 2;\n        b[j] = a[i];\n    }\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int x, int *m)\n{\n    int i, j;\n    int *b;\n\n    *m = 2 * n - 1;\n    b = (int *)malloc(*m * sizeof(int));\n    for (i = 0; i < n; i++)\n        b[i] = a[i];\n    j = 1;\n    for (i = 1; i < n; i++)\n    {\n        b[j] = x;\n        j += 2;\n        b[j] = a[i];\n    }\n    return b;\n}\n\n\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 5, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m)\n{\n    int i;\n    if (n <= 0) {\n        *m = 0;\n        return malloc(0);\n    }\n    *m = 2 * n - 1;\n    int *c = malloc(*m * sizeof(int));\n    c[0] = a[0];\n    for (i = 1; i < n; i++) {\n        c[2 * i - 1] = b;\n        c[2 * i] = a[i];\n    }\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m)\n{\n    int i;\n    if (n <= 0) {\n        *m = 0;\n        return malloc(0);\n    }\n    *m = 2 * n - 1;\n    int *c = malloc(*m * sizeof(int));\n    c[0] = a[0];\n    for (i = 1; i < n; i++) {\n        c[2 * i - 1] = b;\n        c[2 * i] = a[i];\n    }\n    return c;\n}\n\n\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 5, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m)\n{\n    int i;\n    int *c;\n\n    if (n <= 0) {\n        *m = 0;\n        return malloc(0);\n    }\n\n    *m = 2 * n - 1;\n    c = malloc(*m * sizeof(int));\n    c[0] = a[0];\n    for (i = 1; i < n; i++) {\n        c[2 * i - 1] = b;\n        c[2 * i] = a[i];\n    }\n\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m)\n{\n    int i;\n    int *c;\n\n    if (n <= 0) {\n        *m = 0;\n        return malloc(0);\n    }\n\n    *m = 2 * n - 1;\n    c = malloc(*m * sizeof(int));\n    c[0] = a[0];\n    for (i = 1; i < n; i++) {\n        c[2 * i - 1] = b;\n        c[2 * i] = a[i];\n    }\n\n    return c;\n}\n\n\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 5, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m) {\n  int i;\n  if (n <= 0) {\n    *m = 0;\n    return malloc(0);\n  }\n  *m = 2 * n - 1;\n  int *c = malloc(2 * n - 1 * sizeof(int));\n  c[0] = a[0];\n  for (i = 1; i < n; i++) {\n    c[2 * i - 1] = b;\n    c[2 * i] = a[i];\n  }\n  return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int b, int *m) {\n  int i;\n  if (n <= 0) {\n    *m = 0;\n    return malloc(0);\n  }\n  *m = 2 * n - 1;\n  int *c = malloc(2 * n - 1 * sizeof(int));\n  c[0] = a[0];\n  for (i = 1; i < n; i++) {\n    c[2 * i - 1] = b;\n    c[2 * i] = a[i];\n  }\n  return c;\n}\n\n\n\nint issame(const int a[], const int b[], int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n\n    // Test with an empty array\n    int *result_empty = func0((const int[]){}, 0, 7, &out_size);\n    assert(issame(result_empty, (const int[]){}, out_size, 0));\n    free(result_empty);\n\n    // Test with an array with elements\n    int result_expected1[] = {5, 8, 6, 8, 3, 8, 2};\n    int *result1 = func0((const int[]){5, 6, 3, 2}, 4, 8, &out_size);\n    assert(issame(result1, result_expected1, out_size, 7));\n    free(result1);\n\n    // Test with an array with delimiters equal to elements\n    int result_expected2[] = {2, 2, 2, 2, 2};\n    int *result2 = func0((const int[]){2, 2, 2}, 3, 2, &out_size);\n    assert(issame(result2, result_expected2, out_size, 5));\n    free(result2);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 6, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* s, int* returnSize) {\n    int* result = NULL;\n    int count = 0;\n    int max = 0;\n    int index = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == '(') {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else if (s[i] == ')') {\n            count--;\n            if (count == 0) {\n                result = realloc(result, sizeof(int) * (index + 1));\n                result[index++] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = index;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* s, int* returnSize) {\n    int* result = NULL;\n    int count = 0;\n    int max = 0;\n    int index = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == '(') {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else if (s[i] == ')') {\n            count--;\n            if (count == 0) {\n                result = realloc(result, sizeof(int) * (index + 1));\n                result[index++] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = index;\n    return result;\n}\n\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 6, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int maxDepth = 0;\n    int depth = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (str[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                resultSize++;\n                result = realloc(result, resultSize * sizeof(int));\n                result[resultSize - 1] = maxDepth;\n                maxDepth = 0;\n            }\n        }\n    }\n    *returnSize = resultSize;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int maxDepth = 0;\n    int depth = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (str[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                resultSize++;\n                result = realloc(result, resultSize * sizeof(int));\n                result[resultSize - 1] = maxDepth;\n                maxDepth = 0;\n            }\n        }\n    }\n    *returnSize = resultSize;\n    return result;\n}\n\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 6, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* size) {\n    int* result = NULL;\n    int result_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (str[i] != '\\0') {\n        if (str[i] == '(') {\n            depth++;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        } else if (str[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                result_size++;\n                result = realloc(result, result_size * sizeof(int));\n                result[result_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *size = result_size;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* size) {\n    int* result = NULL;\n    int result_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (str[i] != '\\0') {\n        if (str[i] == '(') {\n            depth++;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        } else if (str[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                result_size++;\n                result = realloc(result, result_size * sizeof(int));\n                result[result_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *size = result_size;\n    return result;\n}\n\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 6, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int maxDepth = 0;\n    int depth = 0;\n    while (*str != '\\0') {\n        if (*str == '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (*str == ')') {\n            depth--;\n            if (depth == 0) {\n                resultSize++;\n                result = realloc(result, resultSize * sizeof(int));\n                result[resultSize - 1] = maxDepth;\n                maxDepth = 0;\n            }\n        }\n        str++;\n    }\n    *returnSize = resultSize;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int maxDepth = 0;\n    int depth = 0;\n    while (*str != '\\0') {\n        if (*str == '(') {\n            depth++;\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n        } else if (*str == ')') {\n            depth--;\n            if (depth == 0) {\n                resultSize++;\n                result = realloc(result, resultSize * sizeof(int));\n                result[resultSize - 1] = maxDepth;\n                maxDepth = 0;\n            }\n        }\n        str++;\n    }\n    *returnSize = resultSize;\n    return result;\n}\n\n\nint issame(const int* a, const int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int returnSize;\n    int* result;\n\n    result = func0(\"(()()) ((())) () ((())()())\", &returnSize);\n    assert(issame(result, (const int[]){2, 3, 1, 3}, returnSize, 4));\n    free(result);\n\n    result = func0(\"() (()) ((())) (((())))\", &returnSize);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, returnSize, 4));\n    free(result);\n\n    result = func0(\"(()(())((())))\", &returnSize);\n    assert(issame(result, (const int[]){4}, returnSize, 1));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 7, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, (j + 1) * sizeof(char *));\n            ret[j] = argv[i];\n            j++;\n        }\n    }\n\n    *n = j;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, (j + 1) * sizeof(char *));\n            ret[j] = argv[i];\n            j++;\n        }\n    }\n\n    *n = j;\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 7, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *count)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *count = j;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *count)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *count = j;\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 7, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *n = j;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *n = j;\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 7, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *n = j;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, char *substr, int *n)\n{\n    char **ret = NULL;\n    int i, j = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], substr)) {\n            ret = realloc(ret, ++j * sizeof(char *));\n            ret[j - 1] = argv[i];\n        }\n    }\n\n    *n = j;\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int out_size;\n    char **result;\n\n    // First test case with empty array and substring \"john\"\n    result = func0(NULL, 0, \"john\", &out_size);\n    assert(out_size == 0 && result == NULL);\n\n    // Second test case\n    char *strings1[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected1[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings1, 6, \"xxx\", &out_size);\n    assert(issame(result, expected1, out_size, 3));\n    free(result);\n\n    // Third test case\n    char *strings2[] = {\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char *expected2[] = {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"};\n    result = func0(strings2, 6, \"xx\", &out_size);\n    assert(issame(result, expected2, out_size, 4));\n    free(result);\n\n    // Fourth test case\n    char *strings3[] = {\"grunt\", \"trumpet\", \"prune\", \"gruesome\"};\n    char *expected3[] = {\"grunt\", \"prune\"};\n    result = func0(strings3, 4, \"run\", &out_size);\n    assert(issame(result, expected3, out_size, 2));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 8, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, sum, prod;\n\n  sum = 0;\n  prod = 1;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, sum, prod;\n\n  sum = 0;\n  prod = 1;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}\n\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 8, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  b[0] = sum;\n  b[1] = prod;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  b[0] = sum;\n  b[1] = prod;\n}\n\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 8, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  b[0] = sum;\n  b[1] = prod;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  b[0] = sum;\n  b[1] = prod;\n}\n\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 8, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *r)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  r[0] = sum;\n  r[1] = prod;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *r)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n\n  r[0] = sum;\n  r[1] = prod;\n}\n\n\nint issame(const int *a, const int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[2];\n\n    // First test case\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    // Second test case\n    func0((const int[]){1, 1, 1}, 3, result);\n    assert(issame(result, (const int[]){3, 1}, 2));\n\n    // Third test case\n    func0((const int[]){100, 0}, 2, result);\n    assert(issame(result, (const int[]){100, 0}, 2));\n\n    // Fourth test case\n    func0((const int[]){3, 5, 7}, 3, result);\n    assert(issame(result, (const int[]){3 + 5 + 7, 3 * 5 * 7}, 2));\n\n    // Fifth test case\n    func0((const int[]){10}, 1, result);\n    assert(issame(result, (const int[]){10, 10}, 2));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 9, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max)\n            max = a[i];\n        b[i] = max;\n    }\n\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max)\n            max = a[i];\n        b[i] = max;\n    }\n\n    return b;\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 9, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* A, int ASize) {\n    if (ASize <= 0) {\n        return NULL;\n    }\n    int* ret = (int*)malloc(sizeof(int) * ASize);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int max = A[0];\n    for (int i = 0; i < ASize; i++) {\n        if (A[i] > max) {\n            max = A[i];\n        }\n        ret[i] = max;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* A, int ASize) {\n    if (ASize <= 0) {\n        return NULL;\n    }\n    int* ret = (int*)malloc(sizeof(int) * ASize);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int max = A[0];\n    for (int i = 0; i < ASize; i++) {\n        if (A[i] > max) {\n            max = A[i];\n        }\n        ret[i] = max;\n    }\n    return ret;\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 9, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max)\n            max = a[i];\n        b[i] = max;\n    }\n\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max)\n            max = a[i];\n        b[i] = max;\n    }\n\n    return b;\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 9, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* A, int ASize) {\n    if (ASize <= 0) {\n        return NULL;\n    }\n    int* ret = (int*)malloc(sizeof(int) * ASize);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int max = A[0];\n    for (int i = 0; i < ASize; i++) {\n        if (A[i] > max) {\n            max = A[i];\n        }\n        ret[i] = max;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* A, int ASize) {\n    if (ASize <= 0) {\n        return NULL;\n    }\n    int* ret = (int*)malloc(sizeof(int) * ASize);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int max = A[0];\n    for (int i = 0; i < ASize; i++) {\n        if (A[i] > max) {\n            max = A[i];\n        }\n        ret[i] = max;\n    }\n    return ret;\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n\n    // First test case\n    result = func0((const int[]){}, 0);\n    assert(result == NULL);\n    free(result);\n\n    // Second test case\n    int test1[] = {1, 2, 3, 4};\n    result = func0(test1, 4);\n    assert(issame(result, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    // Third test case\n    int test2[] = {4, 3, 2, 1};\n    result = func0(test2, 4);\n    assert(issame(result, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    // Fourth test case\n    int test3[] = {3, 2, 3, 100, 3};\n    result = func0(test3, 5);\n    assert(issame(result, (const int[]){3, 3, 3, 100, 100}, 5));\n    free(result);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 10, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, flag;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (s[i + j] != s[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(p, s, len);\n            for (k = 0; k < i; k++)\n                p[len + k] = s[i - 1 - k];\n            p[len + i] = '\\0';\n            return p;\n        }\n    }\n\n    strncpy(p, s, len);\n    for (k = 0; k < len; k++)\n        p[len + k] = s[len - 1 - k];\n    p[2 * len] = '\\0';\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, flag;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (s[i + j] != s[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(p, s, len);\n            for (k = 0; k < i; k++)\n                p[len + k] = s[i - 1 - k];\n            p[len + i] = '\\0';\n            return p;\n        }\n    }\n\n    strncpy(p, s, len);\n    for (k = 0; k < len; k++)\n        p[len + k] = s[len - 1 - k];\n    p[2 * len] = '\\0';\n    return p;\n}\n\n\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 10, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, l, m, n;\n    char *t;\n\n    n = strlen(s);\n    t = (char *) malloc(2 * n + 1);\n    if (t == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++) {\n        for (j = n - 1, k = n - i - 1; k >= n / 2; j--, k--) {\n            for (l = 0; l < i; l++) {\n                if (s[j + l] != s[k + l])\n                    break;\n            }\n            if (l >= i)\n                break;\n        }\n        if (j == n - i - 1)\n            break;\n    }\n\n    strncpy(t, s, n);\n    for (m = n, k = n - i - 1; k > 0; m++, k--)\n        t[m] = s[k];\n    t[m] = '\\0';\n\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, l, m, n;\n    char *t;\n\n    n = strlen(s);\n    t = (char *) malloc(2 * n + 1);\n    if (t == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++) {\n        for (j = n - 1, k = n - i - 1; k >= n / 2; j--, k--) {\n            for (l = 0; l < i; l++) {\n                if (s[j + l] != s[k + l])\n                    break;\n            }\n            if (l >= i)\n                break;\n        }\n        if (j == n - i - 1)\n            break;\n    }\n\n    strncpy(t, s, n);\n    for (m = n, k = n - i - 1; k > 0; m++, k--)\n        t[m] = s[k];\n    t[m] = '\\0';\n\n    return t;\n}\n\n\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 10, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    count = 0;\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j])\n            count++;\n        if (count == len) {\n            p = strncpy(p, s, len);\n            for (k = len - 1; k >= 0; k--)\n                p[len + k] = s[k];\n            p[2 * len] = '\\0';\n            return p;\n        }\n    }\n\n    p = strncpy(p, s, len);\n    for (k = len - 1; k >= count; k--)\n        p[len + k] = s[k];\n    p[len + count] = '\\0';\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    count = 0;\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j])\n            count++;\n        if (count == len) {\n            p = strncpy(p, s, len);\n            for (k = len - 1; k >= 0; k--)\n                p[len + k] = s[k];\n            p[2 * len] = '\\0';\n            return p;\n        }\n    }\n\n    p = strncpy(p, s, len);\n    for (k = len - 1; k >= count; k--)\n        p[len + k] = s[k];\n    p[len + count] = '\\0';\n    return p;\n}\n\n\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 10, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    count = 0;\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j])\n            count++;\n        if (count == len) {\n            p = strncpy(p, s, len);\n            for (k = len - 1; k >= 0; k--)\n                p[len + k] = s[k];\n            p[2 * len] = '\\0';\n            return p;\n        }\n    }\n\n    p = strncpy(p, s, len);\n    for (k = len - 1; k >= count; k--)\n        p[len + k] = s[k];\n    p[len + count] = '\\0';\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count;\n    char *p;\n\n    len = strlen(s);\n    p = (char *)malloc(2 * len + 1);\n    if (p == NULL)\n        return NULL;\n\n    count = 0;\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j])\n            count++;\n        if (count == len) {\n            p = strncpy(p, s, len);\n            for (k = len - 1; k >= 0; k--)\n                p[len + k] = s[k];\n            p[2 * len] = '\\0';\n            return p;\n        }\n    }\n\n    p = strncpy(p, s, len);\n    for (k = len - 1; k >= count; k--)\n        p[len + k] = s[k];\n    p[len + count] = '\\0';\n    return p;\n}\n\n\n\nint main() {\n    char *palindrome;\n\n    // First test case\n    palindrome = func0(\"\");\n    assert(strcmp(palindrome, \"\") == 0);\n    free(palindrome);\n\n    // Second test case\n    palindrome = func0(\"x\");\n    assert(strcmp(palindrome, \"x\") == 0);\n    free(palindrome);\n\n    // Third test case\n    palindrome = func0(\"xyz\");\n    assert(strcmp(palindrome, \"xyzyx\") == 0);\n    free(palindrome);\n\n    // Fourth test case\n    palindrome = func0(\"xyx\");\n    assert(strcmp(palindrome, \"xyx\") == 0);\n    free(palindrome);\n\n    // Fifth test case\n    palindrome = func0(\"jerry\");\n    assert(strcmp(palindrome, \"jerryrrej\") == 0);\n    free(palindrome);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 11, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len = strlen(a);\n    char *c;\n\n    if (len > strlen(b))\n        len = strlen(b);\n\n    c = malloc(len + 1);\n    if (!c)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len = strlen(a);\n    char *c;\n\n    if (len > strlen(b))\n        len = strlen(b);\n\n    c = malloc(len + 1);\n    if (!c)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n\n    return c;\n}\n\n\n\n\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 11, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len;\n    char *c;\n\n    len = strlen(a);\n    if (len > strlen(b))\n        len = strlen(b);\n    c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len;\n    char *c;\n\n    len = strlen(a);\n    if (len > strlen(b))\n        len = strlen(b);\n    c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}\n\n\n\n\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 11, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(const char *a, const char *b)\n{\n    int i, len = strlen(a);\n    if (len > strlen(b))\n        len = strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(const char *a, const char *b)\n{\n    int i, len = strlen(a);\n    if (len > strlen(b))\n        len = strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n    return c;\n}\n\n\n\n\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 11, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len = strlen(a);\n    char *c;\n\n    if (len > strlen(b))\n        len = strlen(b);\n\n    c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        c[i] = (a[i] == b[i]) ? '0' : '1';\n\n    c[len] = '\\0';\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    int i, len = strlen(a);\n    char *c;\n\n    if (len > strlen(b))\n        len = strlen(b);\n\n    c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        c[i] = (a[i] == b[i]) ? '0' : '1';\n\n    c[len] = '\\0';\n    return c;\n}\n\n\n\n\n\nint main() {\n    char *result;\n\n    result = func0(\"111000\", \"101010\");\n    assert(strcmp(result, \"010010\") == 0);\n    free(result);\n\n    result = func0(\"1\", \"1\");\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(\"0101\", \"0000\");\n    assert(strcmp(result, \"0101\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 12, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *argv[], int argc)\n{\n    char *max = \"\";\n    int max_len = 0;\n    int i;\n\n    for (i = 0; i < argc; i++) {\n        int len = strlen(argv[i]);\n        if (len > max_len) {\n            max = argv[i];\n            max_len = len;\n        }\n    }\n\n    return max;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *argv[], int argc)\n{\n    char *max = \"\";\n    int max_len = 0;\n    int i;\n\n    for (i = 0; i < argc; i++) {\n        int len = strlen(argv[i]);\n        if (len > max_len) {\n            max = argv[i];\n            max_len = len;\n        }\n    }\n\n    return max;\n}\n\n\n\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 12, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, j, max = 0;\n    char *max_str = \"\";\n\n    for (i = 0; i < argc; i++) {\n        j = strlen(argv[i]);\n        if (j > max) {\n            max = j;\n            max_str = argv[i];\n        }\n    }\n\n    return max_str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, j, max = 0;\n    char *max_str = \"\";\n\n    for (i = 0; i < argc; i++) {\n        j = strlen(argv[i]);\n        if (j > max) {\n            max = j;\n            max_str = argv[i];\n        }\n    }\n\n    return max_str;\n}\n\n\n\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 12, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        int len = strlen(argv[i]);\n        if (len > max) {\n            max = len;\n            p = argv[i];\n        }\n    }\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        int len = strlen(argv[i]);\n        if (len > max) {\n            max = len;\n            p = argv[i];\n        }\n    }\n    return p;\n}\n\n\n\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 12, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, max = 0;\n    char *max_str = \"\";\n\n    for (i = 0; i < argc; i++) {\n        char *str = argv[i];\n        int len = strlen(str);\n        if (len > max) {\n            max = len;\n            max_str = str;\n        }\n    }\n\n    return max_str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, max = 0;\n    char *max_str = \"\";\n\n    for (i = 0; i < argc; i++) {\n        char *str = argv[i];\n        int len = strlen(str);\n        if (len > max) {\n            max = len;\n            max_str = str;\n        }\n    }\n\n    return max_str;\n}\n\n\n\n\nint main() {\n    char *empty_array[] = {\"\"};\n    char *array1[] = {\"x\", \"y\", \"z\"};\n    char *array2[] = {\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"};\n\n    assert(strcmp(func0(empty_array, 0), \"\") == 0);\n    assert(strcmp(func0(array1, 3), \"x\") == 0);\n    assert(strcmp(func0(array2, 6), \"zzzz\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 13, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    while (b != 0) {\n        int c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    while (b != 0) {\n        int c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\n\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 13, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  if (b == 0)\n    return a;\n  return func0(b, a % b);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  if (b == 0)\n    return a;\n  return func0(b, a % b);\n}\n\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 13, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  if (b == 0)\n    return a;\n  return func0(b, a % b);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  if (b == 0)\n    return a;\n  return func0(b, a % b);\n}\n\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 13, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    if (b == 0)\n        return a;\n    return func0(b, a % b);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    if (b == 0)\n        return a;\n    return func0(b, a % b);\n}\n\n\nint main() {\n    assert(func0(3, 7) == 1);\n    assert(func0(10, 15) == 5);\n    assert(func0(49, 14) == 7);\n    assert(func0(144, 60) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 14, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** res = (char**)malloc(len * sizeof(char*));\n    char* tmp = (char*)malloc((len + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (int i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        res[i] = (char*)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(res[i], tmp);\n    }\n    free(tmp);\n    *size = len;\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** res = (char**)malloc(len * sizeof(char*));\n    char* tmp = (char*)malloc((len + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (int i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        res[i] = (char*)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(res[i], tmp);\n    }\n    free(tmp);\n    *size = len;\n    return res;\n}\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 14, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int i, j, k, len;\n    char** ret;\n    char* tmp;\n\n    len = strlen(str);\n    ret = (char**)malloc(sizeof(char*) * (len - 1));\n    tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n\n    for (i = 0; i < len - 1; i++)\n    {\n        tmp = (char*)realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp) - 1] = str[i];\n        tmp[strlen(tmp)] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));\n        strcpy(ret[i], tmp);\n    }\n\n    free(tmp);\n    *size = len - 1;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int i, j, k, len;\n    char** ret;\n    char* tmp;\n\n    len = strlen(str);\n    ret = (char**)malloc(sizeof(char*) * (len - 1));\n    tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n\n    for (i = 0; i < len - 1; i++)\n    {\n        tmp = (char*)realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp) - 1] = str[i];\n        tmp[strlen(tmp)] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));\n        strcpy(ret[i], tmp);\n    }\n\n    free(tmp);\n    *size = len - 1;\n    return ret;\n}\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 14, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** ret = (char**)malloc(sizeof(char*) * len);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n    int i, j;\n    for (i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, sizeof(char) * (strlen(tmp) + 2));\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * strlen(tmp));\n        memcpy(ret[i], tmp, sizeof(char) * strlen(tmp));\n    }\n    free(tmp);\n    *size = len;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** ret = (char**)malloc(sizeof(char*) * len);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n    int i, j;\n    for (i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, sizeof(char) * (strlen(tmp) + 2));\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * strlen(tmp));\n        memcpy(ret[i], tmp, sizeof(char) * strlen(tmp));\n    }\n    free(tmp);\n    *size = len;\n    return ret;\n}\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 14, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** ret = (char**)malloc(sizeof(char*) * len);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n    int i, j;\n    for (i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, sizeof(char) * (strlen(tmp) + 2));\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * strlen(tmp));\n        memcpy(ret[i], tmp, sizeof(char) * strlen(tmp));\n    }\n    free(tmp);\n    *size = len;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar** func0(char* str, int* size)\n{\n    int len = strlen(str);\n    char** ret = (char**)malloc(sizeof(char*) * len);\n    char* tmp = (char*)malloc(sizeof(char) * (len + 1));\n    tmp[0] = '\\0';\n    int i, j;\n    for (i = 0; i < len; i++)\n    {\n        tmp = (char*)realloc(tmp, sizeof(char) * (strlen(tmp) + 2));\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = (char*)malloc(sizeof(char) * strlen(tmp));\n        memcpy(ret[i], tmp, sizeof(char) * strlen(tmp));\n    }\n    free(tmp);\n    *size = len;\n    return ret;\n}\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_prefixes(char **prefixes, int count) {\n    for (int i = 0; i < count; i++) {\n        free(prefixes[i]);\n    }\n    free(prefixes);\n}\n\nint main() {\n    int count;\n    char **result;\n    \n    result = func0(\"\", &count);\n    assert(issame(result, 0, NULL, 0));\n    free_prefixes(result, count);\n\n    char *expected1[] = {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"};\n    result = func0(\"asdfgh\", &count);\n    assert(issame(result, count, expected1, 6));\n    free_prefixes(result, count);\n\n    char *expected2[] = {\"W\", \"WW\", \"WWW\"};\n    result = func0(\"WWW\", &count);\n    assert(issame(result, count, expected2, 3));\n    free_prefixes(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 15, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n    int i, len = 2;\n    char *buf, *p;\n\n    for (i = 1; i <= n; i++)\n        len += snprintf(NULL, 0, \" %d\", i);\n\n    buf = malloc(len);\n    if (!buf)\n        return NULL;\n\n    p = buf;\n    p += sprintf(p, \"0\");\n    for (i = 1; i <= n; i++)\n        p += sprintf(p, \" %d\", i);\n\n    return buf;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n    int i, len = 2;\n    char *buf, *p;\n\n    for (i = 1; i <= n; i++)\n        len += snprintf(NULL, 0, \" %d\", i);\n\n    buf = malloc(len);\n    if (!buf)\n        return NULL;\n\n    p = buf;\n    p += sprintf(p, \"0\");\n    for (i = 1; i <= n; i++)\n        p += sprintf(p, \" %d\", i);\n\n    return buf;\n}\n\n\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 15, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n  char *buf;\n  char *p;\n  int i;\n  int len = 1;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n\n  buf = malloc(len);\n  if (!buf)\n    return NULL;\n\n  p = buf;\n  *p++ = '0';\n\n  for (i = 1; i <= n; i++)\n    p += __sprintf_chk(p, 1, -1, \"%d\", i);\n\n  return buf;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n  char *buf;\n  char *p;\n  int i;\n  int len = 1;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n\n  buf = malloc(len);\n  if (!buf)\n    return NULL;\n\n  p = buf;\n  *p++ = '0';\n\n  for (i = 1; i <= n; i++)\n    p += __sprintf_chk(p, 1, -1, \"%d\", i);\n\n  return buf;\n}\n\n\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 15, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n  char *s;\n  int i, len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  s = malloc (len);\n  if (s == 0)\n    return 0;\n\n  s[0] = '0';\n  for (i = 1, len = 1; i <= n; i++)\n    len += __sprintf_chk (s + len, 1, -1, \"%d\", i);\n\n  return s;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n  char *s;\n  int i, len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  s = malloc (len);\n  if (s == 0)\n    return 0;\n\n  s[0] = '0';\n  for (i = 1, len = 1; i <= n; i++)\n    len += __sprintf_chk (s + len, 1, -1, \"%d\", i);\n\n  return s;\n}\n\n\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 15, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x) {\n  int i;\n  int len = 1;\n  char *buf;\n  char *p;\n\n  for (i = 1; i <= x; i++) {\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  }\n\n  buf = (char *)malloc(len);\n  if (!buf) {\n    return NULL;\n  }\n\n  p = buf;\n  *p++ = '0';\n\n  for (i = 1; i <= x; i++) {\n    p += __sprintf_chk(p, 1, -1, \"%d\", i);\n  }\n\n  return buf;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x) {\n  int i;\n  int len = 1;\n  char *buf;\n  char *p;\n\n  for (i = 1; i <= x; i++) {\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  }\n\n  buf = (char *)malloc(len);\n  if (!buf) {\n    return NULL;\n  }\n\n  p = buf;\n  *p++ = '0';\n\n  for (i = 1; i <= x; i++) {\n    p += __sprintf_chk(p, 1, -1, \"%d\", i);\n  }\n\n  return buf;\n}\n\n\n\nint main() {\n    char *result;\n\n    result = func0(0);\n    assert(strcmp(result, \"0\") == 0);\n    free(result);\n\n    result = func0(3);\n    assert(strcmp(result, \"0 1 2 3\") == 0);\n    free(result);\n\n    result = func0(10);\n    assert(strcmp(result, \"0 1 2 3 4 5 6 7 8 9 10\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 16, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i, j, count = 0;\n    int flag[128] = {0};\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        j = tolower(str[i]);\n        if (flag[j] == 0) {\n            if (__ctype_b_loc()[j] & 0x0400) {\n                flag[j] = 1;\n                count++;\n            }\n        }\n    }\n\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i, j, count = 0;\n    int flag[128] = {0};\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        j = tolower(str[i]);\n        if (flag[j] == 0) {\n            if (__ctype_b_loc()[j] & 0x0400) {\n                flag[j] = 1;\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 16, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, c, count = 0;\n    int seen[256] = {0};\n\n    while (*s) {\n        c = __ctype_tolower_loc()->__table[*s];\n        if (!seen[c]) {\n            if (__ctype_b_loc()->__table[c] & 0x04) {\n                seen[c] = 1;\n                count++;\n            }\n        }\n        s++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, c, count = 0;\n    int seen[256] = {0};\n\n    while (*s) {\n        c = __ctype_tolower_loc()->__table[*s];\n        if (!seen[c]) {\n            if (__ctype_b_loc()->__table[c] & 0x04) {\n                seen[c] = 1;\n                count++;\n            }\n        }\n        s++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 16, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, c, n;\n  unsigned char used[256] = { 0 };\n\n  for (n = 0, i = 0; s[i]; i++) {\n    c = __ctype_tolower_loc()[s[i]];\n    if (!used[c] && (__ctype_b_loc()[1][c] & 4)) {\n      used[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, c, n;\n  unsigned char used[256] = { 0 };\n\n  for (n = 0, i = 0; s[i]; i++) {\n    c = __ctype_tolower_loc()[s[i]];\n    if (!used[c] && (__ctype_b_loc()[1][c] & 4)) {\n      used[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 16, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while ((c = *s++) != '\\0')\n    if (a[c = __ctype_tolower_loc()->__table[c]] == 0)\n      if (__ctype_b_loc()->__table[c] & 0x04)\n        a[c] = 1, n++;\n\n  return n;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while ((c = *s++) != '\\0')\n    if (a[c = __ctype_tolower_loc()->__table[c]] == 0)\n      if (__ctype_b_loc()->__table[c] & 0x04)\n        a[c] = 1, n++;\n\n  return n;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abcde\") == 5);\n    assert(func0(\"abcdecadeCADE\") == 5);\n    assert(func0(\"aaaaAAAAaaaa\") == 1);\n    assert(func0(\"Jerry jERRY JeRRRY\") == 4);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 17, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(char* str, int* size)\n{\n    int* arr = NULL;\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    char* str2;\n    char str3[2] = {0};\n    int len = strlen(str);\n    str2 = (char*)malloc(sizeof(char) * (len + 2));\n    strcpy(str2, str);\n    str2[strlen(str2)] = ' ';\n    for (i = 0; i < len + 1; i++)\n    {\n        if (str2[i] == ' ')\n        {\n            if (!strcmp(str3, \"o\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 4;\n                j++;\n            }\n            if (!strcmp(str3, \"o|\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 2;\n                j++;\n            }\n            if (!strcmp(str3, \".|\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 1;\n                j++;\n            }\n            str3[0] = '\\0';\n        }\n        else\n        {\n            if (strlen", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(char* str, int* size)\n{\n    int* arr = NULL;\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    char* str2;\n    char str3[2] = {0};\n    int len = strlen(str);\n    str2 = (char*)malloc(sizeof(char) * (len + 2));\n    strcpy(str2, str);\n    str2[strlen(str2)] = ' ';\n    for (i = 0; i < len + 1; i++)\n    {\n        if (str2[i] == ' ')\n        {\n            if (!strcmp(str3, \"o\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 4;\n                j++;\n            }\n            if (!strcmp(str3, \"o|\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 2;\n                j++;\n            }\n            if (!strcmp(str3, \".|\"))\n            {\n                if (j == k)\n                {\n                    if (k > 0)\n                    {\n                        k *= 2;\n                    }\n                    else\n                    {\n                        k = 4;\n                    }\n                    arr = (int*)realloc(arr, sizeof(int) * k);\n                }\n                arr[j] = 1;\n                j++;\n            }\n            str3[0] = '\\0';\n        }\n        else\n        {\n            if (strlen\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 17, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int resultCapacity = 0;\n\n    char* strCopy = malloc(strlen(str) + 1);\n    strcpy(strCopy, str);\n\n    char* p = strCopy;\n    char* word = NULL;\n    int wordSize = 0;\n    int wordCapacity = 0;\n\n    while (*p != '\\0') {\n        if (*p == ' ') {\n            if (strcmp(word, \"and\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 4;\n            }\n            if (strcmp(word, \"or\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 2;\n            }\n            if (strcmp(word, \"not\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 1;\n            }\n            word = NULL;\n            wordSize = 0;\n            wordCapacity = 0;\n        } else {\n            if (wordSize + 1 > wordCapacity) {\n                word = realloc(word, (wordCapacity = wordCapacity > 0 ? wordCapacity * 2 : 4) * sizeof(char));\n            }\n            word[wordSize++] = *p;\n        }\n        p++;\n    }\n\n    free(strCopy);\n\n    *returnSize = resultSize;\n    return result", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(char* str, int* returnSize) {\n    int* result = NULL;\n    int resultSize = 0;\n    int resultCapacity = 0;\n\n    char* strCopy = malloc(strlen(str) + 1);\n    strcpy(strCopy, str);\n\n    char* p = strCopy;\n    char* word = NULL;\n    int wordSize = 0;\n    int wordCapacity = 0;\n\n    while (*p != '\\0') {\n        if (*p == ' ') {\n            if (strcmp(word, \"and\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 4;\n            }\n            if (strcmp(word, \"or\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 2;\n            }\n            if (strcmp(word, \"not\") == 0) {\n                if (resultSize < resultCapacity || resultCapacity == 0) {\n                    result = realloc(result, (resultCapacity = resultCapacity > 0 ? resultCapacity * 2 : 4) * sizeof(int));\n                }\n                result[resultSize++] = 1;\n            }\n            word = NULL;\n            wordSize = 0;\n            wordCapacity = 0;\n        } else {\n            if (wordSize + 1 > wordCapacity) {\n                word = realloc(word, (wordCapacity = wordCapacity > 0 ? wordCapacity * 2 : 4) * sizeof(char));\n            }\n            word[wordSize++] = *p;\n        }\n        p++;\n    }\n\n    free(strCopy);\n\n    *returnSize = resultSize;\n    return result\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 17, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(char *str, int *len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *arr;\n    char *str2;\n    char str3[3] = {0};\n\n    i = strlen(str);\n    str2 = malloc(i + 2);\n    memcpy(str2, str, i);\n    str2[i] = ' ';\n    for (j = 0, k = 0, l = 0; j < i + 1; j++)\n    {\n        if (str2[j] == ' ')\n        {\n            if (str3[0] == 'o' && str3[1] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr, l * sizeof(int));\n                    }\n                }\n                arr[l++] = 4;\n            }\n            if (str3[0] == 'o' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr, l * sizeof(int));\n                    }\n                }\n                arr[l++] = 2;\n            }\n            if (str3[0] == '.' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr,", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(char *str, int *len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *arr;\n    char *str2;\n    char str3[3] = {0};\n\n    i = strlen(str);\n    str2 = malloc(i + 2);\n    memcpy(str2, str, i);\n    str2[i] = ' ';\n    for (j = 0, k = 0, l = 0; j < i + 1; j++)\n    {\n        if (str2[j] == ' ')\n        {\n            if (str3[0] == 'o' && str3[1] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr, l * sizeof(int));\n                    }\n                }\n                arr[l++] = 4;\n            }\n            if (str3[0] == 'o' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr, l * sizeof(int));\n                    }\n                }\n                arr[l++] = 2;\n            }\n            if (str3[0] == '.' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                    {\n                        l = 4;\n                        arr = malloc(l * sizeof(int));\n                    }\n                    else\n                    {\n                        l *= 2;\n                        arr = realloc(arr,\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 17, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(char *str, int *len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *arr;\n    char *str2;\n    char str3[3] = {0};\n\n    i = strlen(str);\n    str2 = malloc(i + 2);\n    memcpy(str2, str, i);\n    str2[i] = ' ';\n    for (j = 0, k = 0; j < i + 1; j++)\n    {\n        if (str2[j] == ' ')\n        {\n            if (str3[0] == 'o' && str3[1] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 4;\n            }\n            if (str3[0] == 'o' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 2;\n            }\n            if (str3[0] == '.' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 1;\n            }\n            str3[0] = 0;\n        }\n        else\n        {\n            if (strlen(str3) != 2)\n            {\n                str3[strlen(str3)] = str2[j];\n", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(char *str, int *len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *arr;\n    char *str2;\n    char str3[3] = {0};\n\n    i = strlen(str);\n    str2 = malloc(i + 2);\n    memcpy(str2, str, i);\n    str2[i] = ' ';\n    for (j = 0, k = 0; j < i + 1; j++)\n    {\n        if (str2[j] == ' ')\n        {\n            if (str3[0] == 'o' && str3[1] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 4;\n            }\n            if (str3[0] == 'o' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 2;\n            }\n            if (str3[0] == '.' && str3[1] == '|' && str3[2] == 0)\n            {\n                if (k == l)\n                {\n                    if (l == 0)\n                        l = 4;\n                    else\n                        l *= 2;\n                    arr = realloc(arr, l * sizeof(int));\n                }\n                arr[l++] = 1;\n            }\n            str3[0] = 0;\n        }\n        else\n        {\n            if (strlen(str3) != 2)\n            {\n                str3[strlen(str3)] = str2[j];\n\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int *result;\n\n    result = func0(\"\", &count);\n    assert(issame(result, count, (const int[]){}, 0));\n    free(result);\n\n    result = func0(\"o o o o\", &count);\n    assert(issame(result, count, (const int[]){4, 4, 4, 4}, 4));\n    free(result);\n\n    result = func0(\".| .| .| .|\", &count);\n    assert(issame(result, count, (const int[]){1, 1, 1, 1}, 4));\n    free(result);\n\n    result = func0(\"o| o| .| .| o o o o\", &count);\n    assert(issame(result, count, (const int[]){2, 2, 1, 1, 4, 4, 4, 4}, 8));\n    free(result);\n\n    result = func0(\"o| .| o| .| o o| o o|\", &count);\n    assert(issame(result, count, (const int[]){2, 1, 2, 1, 4, 2, 4, 2}, 8));\n    free(result);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 18, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str, char *substr)\n{\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    if (len == 0)\n        return 0;\n    for (int i = 0; i <= len - sublen; i++)\n    {\n        if (!strncmp(str + i, substr, sublen))\n            count++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str, char *substr)\n{\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    if (len == 0)\n        return 0;\n    for (int i = 0; i <= len - sublen; i++)\n    {\n        if (!strncmp(str + i, substr, sublen))\n            count++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 18, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int i, j, k, count = 0;\n    i = strlen(s);\n    j = strlen(t);\n    for (k = 0; k <= i - j; k++)\n        if (!strncmp(s + k, t, j))\n            count++;\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int i, j, k, count = 0;\n    i = strlen(s);\n    j = strlen(t);\n    for (k = 0; k <= i - j; k++)\n        if (!strncmp(s + k, t, j))\n            count++;\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 18, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int count = 0;\n    int len = strlen(s);\n    int len2 = strlen(t);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (!strncmp(s, t, len2))\n            count++;\n        s++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int count = 0;\n    int len = strlen(s);\n    int len2 = strlen(t);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (!strncmp(s, t, len2))\n            count++;\n        s++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 18, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int count = 0;\n    int len = strlen(s);\n    int len2 = strlen(t);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (!strncmp(s, t, len2))\n            count++;\n        s++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s, char *t)\n{\n    int count = 0;\n    int len = strlen(s);\n    int len2 = strlen(t);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (!strncmp(s, t, len2))\n            count++;\n        s++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"\", \"x\") == 0);\n    assert(func0(\"xyxyxyx\", \"x\") == 4);\n    assert(func0(\"cacacacac\", \"cac\") == 4);\n    assert(func0(\"john doe\", \"john\") == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 19, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    static char out[10000];\n    int count[10] = {0};\n    char* words[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int i, j, k, l, m;\n    char word[6];\n\n    while (*s != '\\0')\n    {\n        for (i = 0; s[i] != ' ' && s[i] != '\\0'; i++)\n            word[i] = s[i];\n        word[i] = '\\0';\n\n        for (j = 0; j < 10; j++)\n            if (!strcmp(word, words[j]))\n            {\n                count[j]++;\n                break;\n            }\n\n        s += i + 1;\n    }\n\n    for (k = 0, l = 0; k < 10; k++)\n        for (m = 0; m < count[k]; m++)\n            for (i = 0; words[k][i] != '\\0'; i++)\n                out[l++] = words[k][i];\n            out[l++] = ' ';\n\n    if (l > 0)\n        l--;\n    out[l] = '\\0';\n\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    static char out[10000];\n    int count[10] = {0};\n    char* words[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int i, j, k, l, m;\n    char word[6];\n\n    while (*s != '\\0')\n    {\n        for (i = 0; s[i] != ' ' && s[i] != '\\0'; i++)\n            word[i] = s[i];\n        word[i] = '\\0';\n\n        for (j = 0; j < 10; j++)\n            if (!strcmp(word, words[j]))\n            {\n                count[j]++;\n                break;\n            }\n\n        s += i + 1;\n    }\n\n    for (k = 0, l = 0; k < 10; k++)\n        for (m = 0; m < count[k]; m++)\n            for (i = 0; words[k][i] != '\\0'; i++)\n                out[l++] = words[k][i];\n            out[l++] = ' ';\n\n    if (l > 0)\n        l--;\n    out[l] = '\\0';\n\n    return out;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 19, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    int i, j, k, l, m, n, p, q, r, t;\n    char* str[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int num[10] = {0};\n    char c[100];\n    char* out = c;\n    char* temp = c;\n    char* temp1 = c;\n    char* temp2 = c;\n    char* temp3 = c;\n    char* temp4 = c;\n    char* temp5 = c;\n    char* temp6 = c;\n    char* temp7 = c;\n    char* temp8 = c;\n    char* temp9 = c;\n    char* temp10 = c;\n    char* temp11 = c;\n    char* temp12 = c;\n    char* temp13 = c;\n    char* temp14 = c;\n    char* temp15 = c;\n    char* temp16 = c;\n    char* temp17 = c;\n    char* temp18 = c;\n    char* temp19 = c;\n    char* temp20 = c;\n    char* temp21 = c;\n    char* temp22 = c;\n    char* temp23 = c;\n    char* temp24 = c;\n    char* temp25 = c;\n    char* temp26 = c;\n    char* temp27 = c;\n    char* temp28 = c;\n    char* temp29 = c;\n    char* temp30 = c;\n    char* temp31 = c;\n    char* temp32 = c;\n    char* temp33 = c;\n    char* temp34 = c;\n    char* temp35 = c;\n    char* temp36 = c;\n    char* temp37 = c;\n    char* temp38 = c;\n    char* temp39 = c;\n    char* temp40 = c;\n    char* temp4", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    int i, j, k, l, m, n, p, q, r, t;\n    char* str[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int num[10] = {0};\n    char c[100];\n    char* out = c;\n    char* temp = c;\n    char* temp1 = c;\n    char* temp2 = c;\n    char* temp3 = c;\n    char* temp4 = c;\n    char* temp5 = c;\n    char* temp6 = c;\n    char* temp7 = c;\n    char* temp8 = c;\n    char* temp9 = c;\n    char* temp10 = c;\n    char* temp11 = c;\n    char* temp12 = c;\n    char* temp13 = c;\n    char* temp14 = c;\n    char* temp15 = c;\n    char* temp16 = c;\n    char* temp17 = c;\n    char* temp18 = c;\n    char* temp19 = c;\n    char* temp20 = c;\n    char* temp21 = c;\n    char* temp22 = c;\n    char* temp23 = c;\n    char* temp24 = c;\n    char* temp25 = c;\n    char* temp26 = c;\n    char* temp27 = c;\n    char* temp28 = c;\n    char* temp29 = c;\n    char* temp30 = c;\n    char* temp31 = c;\n    char* temp32 = c;\n    char* temp33 = c;\n    char* temp34 = c;\n    char* temp35 = c;\n    char* temp36 = c;\n    char* temp37 = c;\n    char* temp38 = c;\n    char* temp39 = c;\n    char* temp40 = c;\n    char* temp4\n\n\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 19, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* str)\n{\n    static char out[1024] = {0};\n    int i = 0, j = 0, k = 0, l = 0;\n    int count[10] = {0};\n    char* nums[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[7] = {0};\n\n    while (str[i] != '\\0')\n    {\n        j = 0;\n        while (str[i] != ' ' && str[i] != '\\0')\n        {\n            temp[j] = str[i];\n            i++;\n            j++;\n        }\n        for (k = 0; k < 10; k++)\n        {\n            if (strcmp(temp, nums[k]) == 0)\n            {\n                count[k]++;\n                break;\n            }\n        }\n        temp[j] = '\\0';\n        if (str[i] != '\\0')\n        {\n            i++;\n        }\n    }\n\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < count[i]; j++)\n        {\n            out[l] = nums[i][j];\n            l++;\n        }\n        out[l] = ' ';\n        l++;\n    }\n    if (l > 0)\n    {\n        out[l - 1] = '\\0';\n    }\n    else\n    {\n        out[0] = '\\0';\n    }\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* str)\n{\n    static char out[1024] = {0};\n    int i = 0, j = 0, k = 0, l = 0;\n    int count[10] = {0};\n    char* nums[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[7] = {0};\n\n    while (str[i] != '\\0')\n    {\n        j = 0;\n        while (str[i] != ' ' && str[i] != '\\0')\n        {\n            temp[j] = str[i];\n            i++;\n            j++;\n        }\n        for (k = 0; k < 10; k++)\n        {\n            if (strcmp(temp, nums[k]) == 0)\n            {\n                count[k]++;\n                break;\n            }\n        }\n        temp[j] = '\\0';\n        if (str[i] != '\\0')\n        {\n            i++;\n        }\n    }\n\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < count[i]; j++)\n        {\n            out[l] = nums[i][j];\n            l++;\n        }\n        out[l] = ' ';\n        l++;\n    }\n    if (l > 0)\n    {\n        out[l - 1] = '\\0';\n    }\n    else\n    {\n        out[0] = '\\0';\n    }\n    return out;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 19, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    static char out[1024] = {0};\n    int i, j, k, l, m, n;\n    int count[10] = {0};\n    char* nums[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char tmp[7] = {0};\n\n    for (i = 0; s[i] != '\\0';)\n    {\n        for (j = 0, k = i; s[k] != ' ' && s[k] != '\\0'; k++, j++)\n            tmp[j] = s[k];\n        tmp[j] = '\\0';\n        for (l = 0; l < 10; l++)\n            if (!strcmp(tmp, nums[l]))\n                count[l]++;\n        i = k + 1;\n    }\n\n    for (m = 0, n = 0; m < 10; m++)\n        for (j = 0; j < count[m]; j++)\n            for (k = 0; nums[m][k] != '\\0'; k++)\n                out[n++] = nums[m][k];\n        out[n++] = ' ';\n    if (n > 0)\n        out[n - 1] = '\\0';\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    static char out[1024] = {0};\n    int i, j, k, l, m, n;\n    int count[10] = {0};\n    char* nums[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char tmp[7] = {0};\n\n    for (i = 0; s[i] != '\\0';)\n    {\n        for (j = 0, k = i; s[k] != ' ' && s[k] != '\\0'; k++, j++)\n            tmp[j] = s[k];\n        tmp[j] = '\\0';\n        for (l = 0; l < 10; l++)\n            if (!strcmp(tmp, nums[l]))\n                count[l]++;\n        i = k + 1;\n    }\n\n    for (m = 0, n = 0; m < 10; m++)\n        for (j = 0; j < count[m]; j++)\n            for (k = 0; nums[m][k] != '\\0'; k++)\n                out[n++] = nums[m][k];\n        out[n++] = ' ';\n    if (n > 0)\n        out[n - 1] = '\\0';\n    return out;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"\"), \"\") == 0);\n    assert(strcmp(func0(\"three\"), \"three\") == 0);\n    assert(strcmp(func0(\"three five nine\"), \"three five nine\") == 0);\n    assert(strcmp(func0(\"five zero four seven nine eight\"), \"zero four five seven eight nine\") == 0);\n    assert(strcmp(func0(\"six five four three two one zero\"), \"zero one two three four five six\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 20, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *data, int n, float *result)\n{\n    int i, j;\n    float min_diff = 1.0f;\n\n    result[0] = data[0];\n    result[1] = data[1];\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            float diff = fabsf(data[i] - data[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                result[0] = data[i];\n                result[1] = data[j];\n            }\n        }\n    }\n\n    if (result[0] > result[1]) {\n        float tmp = result[0];\n        result[0] = result[1];\n        result[1] = tmp;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *data, int n, float *result)\n{\n    int i, j;\n    float min_diff = 1.0f;\n\n    result[0] = data[0];\n    result[1] = data[1];\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            float diff = fabsf(data[i] - data[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                result[0] = data[i];\n                result[1] = data[j];\n            }\n        }\n    }\n\n    if (result[0] > result[1]) {\n        float tmp = result[0];\n        result[0] = result[1];\n        result[1] = tmp;\n    }\n}\n\n\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 20, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}\n\n\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 20, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = fabs(y[0] - y[1]);\n\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = fabs(y[0] - y[1]);\n\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}\n\n\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 20, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = fabs(y[0] - y[1]);\n\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin;\n\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = fabs(y[0] - y[1]);\n\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}\n\n\n\nint issame(float a[], float b[], int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float result[2];\n\n    float test1[] = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    float expected1[] = {3.9, 4.0};\n    func0(test1, 6, result);\n    assert(issame(result, expected1, 2));\n\n    float test2[] = {1.0, 2.0, 5.9, 4.0, 5.0};\n    float expected2[] = {5.0, 5.9};\n    func0(test2, 5, result);\n    assert(issame(result, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    float expected3[] = {2.0, 2.2};\n    func0(test3, 6, result);\n    assert(issame(result, expected3, 2));\n\n    float test4[] = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    float expected4[] = {2.0, 2.0};\n    func0(test4, 6, result);\n    assert(issame(result, expected4, 2));\n\n    float test5[] = {1.1, 2.2, 3.1, 4.1, 5.1};\n    float expected5[] = {2.2, 3.1};\n    func0(test5, 5, result);\n    assert(issame(result, expected5, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 21, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i, j;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (j = 0; j < n; j++)\n        x[j] = (x[j] - min) / (max - min);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i, j;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (j = 0; j < n; j++)\n        x[j] = (x[j] - min) / (max - min);\n}\n\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 21, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}\n\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 21, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i;\n    float max = x[0];\n    float min = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n        if (x[i] < min)\n            min = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n    int i;\n    float max = x[0];\n    float min = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n        if (x[i] < min)\n            min = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}\n\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 21, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n  int i;\n  float min, max, range;\n\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] > max)\n      max = x[i];\n    if (x[i] < min)\n      min = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nvoid func0(float *x, int n)\n{\n  int i;\n  float min, max, range;\n\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] > max)\n      max = x[i];\n    if (x[i] < min)\n      min = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}\n\n\nint issame(float *a, float *b, int size) {\n    const float EPSILON = 1e-4;\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > EPSILON) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {2.0, 49.9};\n    float expected1[] = {0.0, 1.0};\n    func0(test1, 2);\n    assert(issame(test1, expected1, 2));\n\n    float test2[] = {100.0, 49.9};\n    float expected2[] = {1.0, 0.0};\n    func0(test2, 2);\n    assert(issame(test2, expected2, 2));\n\n    float test3[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    float expected3[] = {0.0, 0.25, 0.5, 0.75, 1.0};\n    func0(test3, 5);\n    assert(issame(test3, expected3, 5));\n\n    float test4[] = {2.0, 1.0, 5.0, 3.0, 4.0};\n    float expected4[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test4, 5);\n    assert(issame(test4, expected4, 5));\n\n    float test5[] = {12.0, 11.0, 15.0, 13.0, 14.0};\n    float expected5[] = {0.25, 0.0, 1.0, 0.5, 0.75};\n    func0(test5, 5);\n    assert(issame(test5, expected5, 5));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 22, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *str, int *len)\n{\n    static int out[100];\n    int i = 0;\n    char *p = str;\n    char *q;\n    long l;\n\n    while (*p) {\n        while (*p && !((*(const unsigned short int *)(__ctype_b_loc())+(unsigned char)(*p))&0x800) && *p != '-')\n            p++;\n        if (!*p)\n            break;\n        l = strtol(p, &q, 10);\n        if (p == q || (*q == ',' || *q == '\\0')) {\n            if (*q == ',')\n                out[i++] = l;\n            while (*q && *q != ',')\n                q++;\n        }\n        p = q;\n    }\n    *len = i;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *str, int *len)\n{\n    static int out[100];\n    int i = 0;\n    char *p = str;\n    char *q;\n    long l;\n\n    while (*p) {\n        while (*p && !((*(const unsigned short int *)(__ctype_b_loc())+(unsigned char)(*p))&0x800) && *p != '-')\n            p++;\n        if (!*p)\n            break;\n        l = strtol(p, &q, 10);\n        if (p == q || (*q == ',' || *q == '\\0')) {\n            if (*q == ',')\n                out[i++] = l;\n            while (*q && *q != ',')\n                q++;\n        }\n        p = q;\n    }\n    *len = i;\n    return out;\n}\n\n\n\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 22, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (((*__ctype_b_loc())[(unsigned char)(*s)] & (0x02 | 0x08)) || *s == '-') {\n            char *end;\n            long val = strtol(s, &end, 10);\n            if (end == s) {\n                if (*s)\n                    s++;\n            } else if (*end == ',' || *end == '\\0') {\n                out[i++] = val;\n                s = end;\n            } else {\n                while (*end && *end != ',')\n                    end++;\n                s = end;\n            }\n        } else {\n            s++;\n        }\n    }\n    *n = i;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (((*__ctype_b_loc())[(unsigned char)(*s)] & (0x02 | 0x08)) || *s == '-') {\n            char *end;\n            long val = strtol(s, &end, 10);\n            if (end == s) {\n                if (*s)\n                    s++;\n            } else if (*end == ',' || *end == '\\0') {\n                out[i++] = val;\n                s = end;\n            } else {\n                while (*end && *end != ',')\n                    end++;\n                s = end;\n            }\n        } else {\n            s++;\n        }\n    }\n    *n = i;\n    return out;\n}\n\n\n\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 22, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (!((__ctype_b_loc ()->__b[((unsigned char)(*s))] & (0x08)) || *s == '-')) {\n            s++;\n            continue;\n        }\n        long x = strtol(s, &s, 10);\n        if (s == s) {\n            if (*s != ',' && *s != '\\0') {\n                s++;\n                continue;\n            }\n        } else if (*s == ',' || *s == '\\0') {\n            out[i++] = x;\n        } else {\n            s++;\n            continue;\n        }\n        if (*s == '\\0') {\n            break;\n        }\n    }\n    *n = i;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (!((__ctype_b_loc ()->__b[((unsigned char)(*s))] & (0x08)) || *s == '-')) {\n            s++;\n            continue;\n        }\n        long x = strtol(s, &s, 10);\n        if (s == s) {\n            if (*s != ',' && *s != '\\0') {\n                s++;\n                continue;\n            }\n        } else if (*s == ',' || *s == '\\0') {\n            out[i++] = x;\n        } else {\n            s++;\n            continue;\n        }\n        if (*s == '\\0') {\n            break;\n        }\n    }\n    *n = i;\n    return out;\n}\n\n\n\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 22, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (!((__ctype_b_loc ()->__b[((unsigned char)(*s))] & (0x08)) || *s == '-')) {\n            s++;\n            continue;\n        }\n        long x = strtol(s, &s, 10);\n        if (s == s) {\n            if (*s != ',' && *s != '\\0') {\n                s++;\n                continue;\n            }\n        } else if (*s == ',' || *s == '\\0') {\n            out[i++] = x;\n        } else {\n            s++;\n            continue;\n        }\n        if (*s == '\\0') {\n            break;\n        }\n    }\n    *n = i;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint *func0(char *s, int *n)\n{\n    static int out[10000];\n    int i = 0;\n    while (*s) {\n        if (!((__ctype_b_loc ()->__b[((unsigned char)(*s))] & (0x08)) || *s == '-')) {\n            s++;\n            continue;\n        }\n        long x = strtol(s, &s, 10);\n        if (s == s) {\n            if (*s != ',' && *s != '\\0') {\n                s++;\n                continue;\n            }\n        } else if (*s == ',' || *s == '\\0') {\n            out[i++] = x;\n        } else {\n            s++;\n            continue;\n        }\n        if (*s == '\\0') {\n            break;\n        }\n    }\n    *n = i;\n    return out;\n}\n\n\n\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test 1\n    int *result1 = func0(\"\", &size);\n    assert(issame(result1, size, (const int[]){}, 0));\n\n    // Test 2\n    int *result2 = func0(\"4,,23.2,9,adasd\", &size);\n    assert(issame(result2, size, (const int[]){4, 9}, 2));\n\n    // Test 3\n    int *result3 = func0(\"3,c,3,3,a,b\", &size);\n    assert(issame(result3, size, (const int[]){3, 3, 3}, 3));\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 23, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 23, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 23, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 23, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"x\") == 1);\n    assert(func0(\"asdasnakj\") == 9);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 24, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 24, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a)\n{\n    int i;\n    if (a < 4)\n        return 1;\n    for (i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return a / i;\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a)\n{\n    int i;\n    if (a < 4)\n        return 1;\n    for (i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return a / i;\n    return 1;\n}\n\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 24, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  int i;\n  for (i = 2; i < x; i++) {\n    if (x % i == 0) {\n      return x / i;\n    }\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  int i;\n  for (i = 2; i < x; i++) {\n    if (x % i == 0) {\n      return x / i;\n    }\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 24, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  int i;\n  for (i = 2; i < x; i++) {\n    if (x % i == 0) {\n      return x / i;\n    }\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  int i;\n  for (i = 2; i < x; i++) {\n    if (x % i == 0) {\n      return x / i;\n    }\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(3) == 1);\n    assert(func0(7) == 1);\n    assert(func0(10) == 5);\n    assert(func0(100) == 50);\n    assert(func0(49) == 7);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 25, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(int n, int *len)\n{\n    int *factors = malloc(256 * sizeof(int));\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            factors[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(int n, int *len)\n{\n    int *factors = malloc(256 * sizeof(int));\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            factors[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 25, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int n, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 256);\n    *returnSize = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            ret[(*returnSize)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        ret[(*returnSize)++] = n;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int n, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 256);\n    *returnSize = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            ret[(*returnSize)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        ret[(*returnSize)++] = n;\n    }\n    return ret;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 25, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(int n, int *len)\n{\n    int *factors = malloc(256 * sizeof(int));\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            do {\n                factors[(*len)++] = i;\n                n /= i;\n            } while (n % i == 0);\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(int n, int *len)\n{\n    int *factors = malloc(256 * sizeof(int));\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            do {\n                factors[(*len)++] = i;\n                n /= i;\n            } while (n % i == 0);\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 25, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int n, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 256);\n    *returnSize = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            do {\n                ret[(*returnSize)++] = i;\n                n /= i;\n            } while (n % i == 0);\n        }\n    }\n    if (n > 1) {\n        ret[(*returnSize)++] = n;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int n, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 256);\n    *returnSize = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            do {\n                ret[(*returnSize)++] = i;\n                n /= i;\n            } while (n % i == 0);\n        }\n    }\n    if (n > 1) {\n        ret[(*returnSize)++] = n;\n    }\n    return ret;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int* result;\n\n    result = func0(2, &size);\n    assert(issame(result, size, (const int[]){2}, 1));\n    free(result);\n\n    result = func0(4, &size);\n    assert(issame(result, size, (const int[]){2, 2}, 2));\n    free(result);\n\n    result = func0(8, &size);\n    assert(issame(result, size, (const int[]){2, 2, 2}, 3));\n    free(result);\n\n    result = func0(3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19}, 2));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 19 * 3 * 19 * 3 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 3, 3, 19, 19, 19}, 6));\n    free(result);\n\n    result = func0(3 * 19 * 19 * 19, &size);\n    assert(issame(result, size, (const int[]){3, 19, 19, 19}, 4));\n    free(result);\n\n    result = func0(3 * 2 * 3, &size);\n    assert(issame(result, size, (const int[]){2, 3, 3}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 26, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int *m) {\n    int *b = malloc(n * sizeof(int));\n    int *c = calloc(n, sizeof(int));\n    int *d = calloc(n, sizeof(int));\n    int i, j, k, l, p, q, r, s, t;\n    i = j = k = 0;\n    for (l = 0; l < n; l++) {\n        p = a[l];\n        q = 0;\n        for (r = 0; r < j; r++) {\n            if (p == d[r]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            continue;\n        }\n        q = 0;\n        for (s = 0; s < i; s++) {\n            if (p == c[s]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            d[j++] = p;\n        } else {\n            c[i++] = p;\n        }\n    }\n    t = 0;\n    for (l = 0; l < n; l++) {\n        p = a[l];\n        q = 0;\n        for (r = 0; r < j; r++) {\n            if (p == d[r]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            continue;\n        }\n        b[t++] = p;\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int *a, int n, int *m) {\n    int *b = malloc(n * sizeof(int));\n    int *c = calloc(n, sizeof(int));\n    int *d = calloc(n, sizeof(int));\n    int i, j, k, l, p, q, r, s, t;\n    i = j = k = 0;\n    for (l = 0; l < n; l++) {\n        p = a[l];\n        q = 0;\n        for (r = 0; r < j; r++) {\n            if (p == d[r]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            continue;\n        }\n        q = 0;\n        for (s = 0; s < i; s++) {\n            if (p == c[s]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            d[j++] = p;\n        } else {\n            c[i++] = p;\n        }\n    }\n    t = 0;\n    for (l = 0; l < n; l++) {\n        p = a[l];\n        q = 0;\n        for (r = 0; r < j; r++) {\n            if (p == d[r]) {\n                q = 1;\n                break;\n            }\n        }\n        if (q) {\n            continue;\n        }\n        b[t++] = p;\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 26, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, count = 0, count2 = 0;\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < count; j++) {\n            if (temp[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == count) {\n            for (k = 0; k < count2; k++) {\n                if (temp2[k] == A[i]) {\n                    temp[count] = A[i];\n                    count++;\n                    break;\n                }\n            }\n            if (k == count2) {\n                temp[count] = A[i];\n                count++;\n            }\n        }\n    }\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < count; j++) {\n            if (temp[j] == A[0]) {\n                break;\n            }\n        }\n        if (j == count) {\n            B[count2] = A[0];\n            count2++;\n        }\n    }\n    *returnSize = count2;\n    free(temp);\n    free(temp2);\n    return B;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, count = 0, count2 = 0;\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < count; j++) {\n            if (temp[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == count) {\n            for (k = 0; k < count2; k++) {\n                if (temp2[k] == A[i]) {\n                    temp[count] = A[i];\n                    count++;\n                    break;\n                }\n            }\n            if (k == count2) {\n                temp[count] = A[i];\n                count++;\n            }\n        }\n    }\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < count; j++) {\n            if (temp[j] == A[0]) {\n                break;\n            }\n        }\n        if (j == count) {\n            B[count2] = A[0];\n            count2++;\n        }\n    }\n    *returnSize = count2;\n    free(temp);\n    free(temp2);\n    return B;\n}\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 26, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = j = k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < k; j++) {\n            if (temp[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            temp[k++] = A[i];\n        }\n    }\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < l; j++) {\n            if (temp2[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            temp2[l++] = A[i];\n        }\n    }\n    *returnSize = l;\n    free(temp);\n    free(temp2);\n    return B;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = j = k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < k; j++) {\n            if (temp[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            temp[k++] = A[i];\n        }\n    }\n    for (i = 0; i < ASize; i++) {\n        for (j = 0; j < l; j++) {\n            if (temp2[j] == A[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            temp2[l++] = A[i];\n        }\n    }\n    *returnSize = l;\n    free(temp);\n    free(temp2);\n    return B;\n}\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 26, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, l, m, n;\n    for(i = 0, j = 0, k = 0; i < ASize; i++){\n        for(l = 0; l < j; l++){\n            if(temp[l] == A[i]){\n                break;\n            }\n        }\n        if(l == j){\n            temp[j++] = A[i];\n        }\n        for(m = 0; m < k; m++){\n            if(temp2[m] == A[i]){\n                break;\n            }\n        }\n        if(m == k){\n            temp2[k++] = A[i];\n        }\n    }\n    for(n = 0; n < ASize; n++){\n        for(l = 0; l < j; l++){\n            if(temp2[l] == A[n]){\n                break;\n            }\n        }\n        if(l == j){\n            B[n] = A[n];\n        }\n    }\n    *returnSize = k;\n    free(temp);\n    free(temp2);\n    return B;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint* func0(int* A, int ASize, int* returnSize){\n    int* B = (int*)malloc(sizeof(int) * ASize);\n    int* temp = (int*)calloc(ASize, sizeof(int));\n    int* temp2 = (int*)calloc(ASize, sizeof(int));\n    int i, j, k, l, m, n;\n    for(i = 0, j = 0, k = 0; i < ASize; i++){\n        for(l = 0; l < j; l++){\n            if(temp[l] == A[i]){\n                break;\n            }\n        }\n        if(l == j){\n            temp[j++] = A[i];\n        }\n        for(m = 0; m < k; m++){\n            if(temp2[m] == A[i]){\n                break;\n            }\n        }\n        if(m == k){\n            temp2[k++] = A[i];\n        }\n    }\n    for(n = 0; n < ASize; n++){\n        for(l = 0; l < j; l++){\n            if(temp2[l] == A[n]){\n                break;\n            }\n        }\n        if(l == j){\n            B[n] = A[n];\n        }\n    }\n    *returnSize = k;\n    free(temp);\n    free(temp2);\n    return B;\n}\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int new_size;\n    int* result;\n\n    result = func0((const int[]){}, 0, &new_size);\n    assert(issame(result, new_size, (const int[]){}, 0));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 4}, 4, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 2, 3, 4}, 4));\n    free(result);\n\n    result = func0((const int[]){1, 2, 3, 2, 4, 3, 5}, 7, &new_size);\n    assert(issame(result, new_size, (const int[]){1, 4, 5}, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 27, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n    char c;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        c = s[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 'a' - 'A';\n        else if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n        t[i] = c;\n    }\n    t[len] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n    char c;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        c = s[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 'a' - 'A';\n        else if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n        t[i] = c;\n    }\n    t[len] = '\\0';\n}\n\n\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 27, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i] != '\\0'; i++)\n        ;\n    for (j = 0; j < i; j++) {\n        if (s[j] >= 'a' && s[j] <= 'z')\n            t[j] = s[j] - 'a' + 'A';\n        else if (s[j] >= 'A' && s[j] <= 'Z')\n            t[j] = s[j] - 'A' + 'a';\n    }\n    t[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i] != '\\0'; i++)\n        ;\n    for (j = 0; j < i; j++) {\n        if (s[j] >= 'a' && s[j] <= 'z')\n            t[j] = s[j] - 'a' + 'A';\n        else if (s[j] >= 'A' && s[j] <= 'Z')\n            t[j] = s[j] - 'A' + 'a';\n    }\n    t[j] = '\\0';\n}\n\n\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 27, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            t[i] = s[i] - 'a' + 'A';\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            t[i] = s[i] - 'A' + 'a';\n        else\n            t[i] = s[i];\n    }\n    t[len] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            t[i] = s[i] - 'a' + 'A';\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            t[i] = s[i] - 'A' + 'a';\n        else\n            t[i] = s[i];\n    }\n    t[len] = '\\0';\n}\n\n\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 27, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            t[i] = s[i] - 'A' + 'a';\n        else if (s[i] >= 'a' && s[i] <= 'z')\n            t[i] = s[i] - 'a' + 'A';\n        else\n            t[i] = s[i];\n    }\n    t[len] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            t[i] = s[i] - 'A' + 'a';\n        else if (s[i] >= 'a' && s[i] <= 'z')\n            t[i] = s[i] - 'a' + 'A';\n        else\n            t[i] = s[i];\n    }\n    t[len] = '\\0';\n}\n\n\n\nint main() {\n    char result[100]; // Buffer large enough for test cases\n\n    func0(\"\", result);\n    assert(strcmp(result, \"\") == 0);\n\n    func0(\"Hello!\", result);\n    assert(strcmp(result, \"hELLO!\") == 0);\n\n    func0(\"These violent delights have violent ends\", result);\n    assert(strcmp(result, \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 28, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *argv[], int argc)\n{\n    int i, j, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n    for (j = 0; j < argc; j++)\n        strcat(str, argv[j]);\n\n    return str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *argv[], int argc)\n{\n    int i, j, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n    for (j = 0; j < argc; j++)\n        strcat(str, argv[j]);\n\n    return str;\n}\n\n\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 28, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n    *ret = '\\0';\n\n    for (i = 0; i < argc; i++)\n        strcat(ret, argv[i]);\n\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n    *ret = '\\0';\n\n    for (i = 0; i < argc; i++)\n        strcat(ret, argv[i]);\n\n    return ret;\n}\n\n\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 28, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n\n    for (i = 0; i < argc; i++)\n        str = strcat(str, argv[i]);\n\n    return str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n\n    for (i = 0; i < argc; i++)\n        str = strcat(str, argv[i]);\n\n    return str;\n}\n\n\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 28, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n\n    for (i = 0; i < argc; i++)\n        str = strcat(str, argv[i]);\n\n    return str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *str;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    str = malloc(len + 1);\n    if (str == NULL)\n        return NULL;\n\n    str[0] = '\\0';\n\n    for (i = 0; i < argc; i++)\n        str = strcat(str, argv[i]);\n\n    return str;\n}\n\n\n\nint main() {\n    char* result;\n    char* empty_strings[] = {};\n    result = func0(empty_strings, 0);\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    char* strings1[] = {\"x\", \"y\", \"z\"};\n    result = func0(strings1, 3);\n    assert(strcmp(result, \"xyz\") == 0);\n    free(result);\n\n    char* strings2[] = {\"x\", \"y\", \"z\", \"w\", \"k\"};\n    result = func0(strings2, 5);\n    assert(strcmp(result, \"xyzwk\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 29, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}\n\n\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 29, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}\n\n\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 29, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    char **tmp;\n\n    *out = tmp = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            tmp[j++] = argv[i];\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    char **tmp;\n\n    *out = tmp = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            tmp[j++] = argv[i];\n    return j;\n}\n\n\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 29, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n\nint func0(char **argv, int argc, char *prefix, char ***out)\n{\n    int i, j, len = strlen(prefix);\n    *out = malloc(argc * sizeof(char *));\n    for (i = j = 0; i < argc; i++)\n        if (!strncmp(argv[i], prefix, len))\n            (*out)[j++] = argv[i];\n    return j;\n}\n\n\n\n// Helper function to compare two arrays of strings\nint issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char** result;\n    int count;\n    const char* empty[] = {};\n    count = func0(empty, 0, \"john\", &result);\n    assert(issame(result, count, empty, 0));\n    free(result);\n\n    char* strings[] = {\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"};\n    char* expected[] = {\"xxx\", \"xxxAAA\", \"xxx\"};\n    count = func0(strings, 6, \"xxx\", &result);\n    assert(issame(result, count, expected, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 30, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nint* func0(float* a, int n, int* m) {\n  int* b = (int*)malloc(n * sizeof(int));\n  *m = 0;\n  for (int i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[(*m)++] = a[i];\n    }\n  }\n  return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nint* func0(float* a, int n, int* m) {\n  int* b = (int*)malloc(n * sizeof(int));\n  *m = 0;\n  for (int i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[(*m)++] = a[i];\n    }\n  }\n  return b;\n}\n\n\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 30, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nfloat *func0(float *a, int n, int *m)\n{\n    int i;\n    float *b;\n\n    b = (float *) malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nfloat *func0(float *a, int n, int *m)\n{\n    int i;\n    float *b;\n\n    b = (float *) malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}\n\n\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 30, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *a, int n, int *m) {\n  float *b;\n  int i;\n  b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *a, int n, int *m) {\n  float *b;\n  int i;\n  b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  }\n}\n\n\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 30, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *a, int n, int *m) {\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (int i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *a, int n, int *m) {\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (int i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  }\n}\n\n\n\n// Helper function to compare two arrays of floats\nint issame(const float* a, int a_count, const float* b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    float* result;\n    int count;\n\n    result = func0((const float[]){-1, -2, 4, 5, 6}, 5, &count);\n    assert(issame(result, count, (const float[]){4, 5, 6}, 3));\n    free(result);\n\n    result = func0((const float[]){5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}, 11, &count);\n    assert(issame(result, count, (const float[]){5, 3, 2, 3, 3, 9, 123, 1}, 8));\n    free(result);\n\n    result = func0((const float[]){-1, -2}, 2, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    result = func0((const float[]){}, 0, &count);\n    assert(issame(result, count, (const float[]){}, 0));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 31, "type": "O0", "ground_truth_c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}", "model_prediction": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(long long n)\n{\n    long long i;\n    if (n < 2)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}", "executed_test": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(long long n)\n{\n    long long i;\n    if (n < 2)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}\n\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 31, "type": "O1", "ground_truth_c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}", "model_prediction": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(unsigned long n)\n{\n  unsigned long i;\n\n  if (n <= 1)\n    return 0;\n  if (n <= 3)\n    return 1;\n  if (n % 2 == 0)\n    return 0;\n\n  for (i = 2; i * i < n; i++)\n    if (n % i == 0)\n      return 1;\n\n  return 0;\n}", "executed_test": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(unsigned long n)\n{\n  unsigned long i;\n\n  if (n <= 1)\n    return 0;\n  if (n <= 3)\n    return 1;\n  if (n % 2 == 0)\n    return 0;\n\n  for (i = 2; i * i < n; i++)\n    if (n % i == 0)\n      return 1;\n\n  return 0;\n}\n\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 31, "type": "O2", "ground_truth_c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}", "model_prediction": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(long n)\n{\n  long i;\n  if (n <= 1)\n    return 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(long n)\n{\n  long i;\n  if (n <= 1)\n    return 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 31, "type": "O3", "ground_truth_c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}", "model_prediction": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(unsigned long n)\n{\n  unsigned long i;\n\n  if (n <= 1)\n    return 0;\n\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n\n  return 1;\n}", "executed_test": "#include <stdbool.h>\n#include <assert.h>\n\nint func0(unsigned long n)\n{\n  unsigned long i;\n\n  if (n <= 1)\n    return 0;\n\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n\n  return 1;\n}\n\n\nint main() {\n    assert(func0(6) == false);\n    assert(func0(101) == true);\n    assert(func0(11) == true);\n    assert(func0(13441) == true);\n    assert(func0(61) == true);\n    assert(func0(4) == false);\n    assert(func0(1) == false);\n    assert(func0(5) == true);\n    assert(func0(11) == true);\n    assert(func0(17) == true);\n    assert(func0(5 * 17) == false);\n    assert(func0(11 * 7) == false);\n    assert(func0(13441 * 19) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 32, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double a = 0.0;\n  double b = x[0];\n  int i, j, k;\n  double t;\n\n  for (i = 1; i < n; i++) {\n    t = 1.0;\n    for (j = 0; j < i; j++)\n      t *= 0.0;\n    b += t * x[i];\n  }\n\n  while (fabs(b) > 1.0e-10) {\n    t = 0.0;\n    for (i = 1; i < n; i++) {\n      t += i * x[i] * (1.0);\n      for (k = 1; k < i; k++)\n        t *= a;\n    }\n    a -= b / t;\n    b = x[0];\n    for (i = 1; i < n; i++) {\n      t = 1.0;\n      for (k = 0; k < i; k++)\n        t *= a;\n      b += t * x[i];\n    }\n  }\n\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double a = 0.0;\n  double b = x[0];\n  int i, j, k;\n  double t;\n\n  for (i = 1; i < n; i++) {\n    t = 1.0;\n    for (j = 0; j < i; j++)\n      t *= 0.0;\n    b += t * x[i];\n  }\n\n  while (fabs(b) > 1.0e-10) {\n    t = 0.0;\n    for (i = 1; i < n; i++) {\n      t += i * x[i] * (1.0);\n      for (k = 1; k < i; k++)\n        t *= a;\n    }\n    a -= b / t;\n    b = x[0];\n    for (i = 1; i < n; i++) {\n      t = 1.0;\n      for (k = 0; k < i; k++)\n        t *= a;\n      b += t * x[i];\n    }\n  }\n\n  return a;\n}\n\n\n\n\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 32, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double sum, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15, sum16, sum17, sum18, sum19, sum20, sum21, sum22, sum23, sum24, sum25, sum26, sum27, sum28, sum29, sum30, sum31, sum32, sum33, sum34, sum35, sum36, sum37, sum38, sum39, sum40, sum41, sum42, sum43, sum44, sum45, sum46, sum47, sum48, sum49, sum50, sum51, sum52, sum53, sum54, sum55, sum56, sum57, sum58, sum59, sum60, sum61, sum62, sum63, sum64, sum65, sum66, sum67, sum68, sum69, sum70, sum71, sum72, sum73, sum74, sum75, sum76, sum77, sum78, sum79, sum80, sum81, sum82, sum83, sum84, sum85, sum86, sum87, sum88, sum89, sum90, sum91, sum92, sum93, sum94, sum95, sum96, sum97, sum98, sum99, sum100, sum101, sum102, sum103, sum104, sum105, sum106, sum107, sum108, sum109, sum110, sum111, sum112, sum113, sum114, sum115, sum116, sum117, sum118, sum119, sum120, sum", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double sum, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15, sum16, sum17, sum18, sum19, sum20, sum21, sum22, sum23, sum24, sum25, sum26, sum27, sum28, sum29, sum30, sum31, sum32, sum33, sum34, sum35, sum36, sum37, sum38, sum39, sum40, sum41, sum42, sum43, sum44, sum45, sum46, sum47, sum48, sum49, sum50, sum51, sum52, sum53, sum54, sum55, sum56, sum57, sum58, sum59, sum60, sum61, sum62, sum63, sum64, sum65, sum66, sum67, sum68, sum69, sum70, sum71, sum72, sum73, sum74, sum75, sum76, sum77, sum78, sum79, sum80, sum81, sum82, sum83, sum84, sum85, sum86, sum87, sum88, sum89, sum90, sum91, sum92, sum93, sum94, sum95, sum96, sum97, sum98, sum99, sum100, sum101, sum102, sum103, sum104, sum105, sum106, sum107, sum108, sum109, sum110, sum111, sum112, sum113, sum114, sum115, sum116, sum117, sum118, sum119, sum120, sum\n\n\n\n\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 32, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double sum = x[0];\n  double y = 0.0;\n  int i, j;\n\n  for (i = 1; i < n; i++) {\n    double term = x[i];\n    for (j = 0; j < i; j++)\n      term *= 0.0;\n    sum += term;\n  }\n\n  while (fabs(sum) > 1e-15) {\n    double term = 0.0;\n    for (i = 1; i <= n; i++) {\n      double factor = 1.0;\n      for (j = 0; j < i; j++)\n        factor *= y;\n      term += i * x[i] * factor;\n    }\n    y -= sum / term;\n    sum = x[0];\n    for (i = 1; i < n; i++) {\n      double factor = 1.0;\n      for (j = 0; j < i; j++)\n        factor *= y;\n      sum += x[i] * factor;\n    }\n  }\n\n  return y;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n  double sum = x[0];\n  double y = 0.0;\n  int i, j;\n\n  for (i = 1; i < n; i++) {\n    double term = x[i];\n    for (j = 0; j < i; j++)\n      term *= 0.0;\n    sum += term;\n  }\n\n  while (fabs(sum) > 1e-15) {\n    double term = 0.0;\n    for (i = 1; i <= n; i++) {\n      double factor = 1.0;\n      for (j = 0; j < i; j++)\n        factor *= y;\n      term += i * x[i] * factor;\n    }\n    y -= sum / term;\n    sum = x[0];\n    for (i = 1; i < n; i++) {\n      double factor = 1.0;\n      for (j = 0; j < i; j++)\n        factor *= y;\n      sum += x[i] * factor;\n    }\n  }\n\n  return y;\n}\n\n\n\n\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 32, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n    double sum, y, z;\n    int i, j;\n\n    sum = x[0];\n    for (i = 1; i < n; i++)\n        sum += x[i] * 0.0;\n\n    y = 0.0;\n    while (fabs(sum) > 1e-10) {\n        z = sum / 0.0;\n        y -= z;\n        for (i = 0; i < n; i++) {\n            z = y;\n            for (j = 1; j <= i; j++)\n                z *= y;\n            sum += x[i] * z;\n        }\n    }\n    return y;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble func0(double *x, int n)\n{\n    double sum, y, z;\n    int i, j;\n\n    sum = x[0];\n    for (i = 1; i < n; i++)\n        sum += x[i] * 0.0;\n\n    y = 0.0;\n    while (fabs(sum) > 1e-10) {\n        z = sum / 0.0;\n        y -= z;\n        for (i = 0; i < n; i++) {\n            z = y;\n            for (j = 1; j <= i; j++)\n                z *= y;\n            sum += x[i] * z;\n        }\n    }\n    return y;\n}\n\n\n\n\n\n\ndouble evaluate_polynomial(const double *coeffs, int size, double x) {\n    double result = 0.0;\n    double term = 1.0; \n    for (int i = 0; i < size; i++) {\n        if (i > 0) {\n            term *= x; \n        }\n        result += coeffs[i] * term;\n    }\n    return result;\n}\n\nint main() {\n    double solution;\n    int ncoeff;\n    \n    for (int i = 0; i < 100; i++) {\n        ncoeff = 2 * (1 + rand() % 4);\n        double coeffs[ncoeff];\n        for (int j = 0; j < ncoeff; j++) {\n            double coeff = -10 + rand() % 21;\n            if (coeff == 0) coeff = 1;\n            coeffs[j] = coeff;\n        }\n        \n        solution = func0(coeffs, ncoeff);\n\n        assert(fabs(evaluate_polynomial(coeffs, ncoeff, solution)) < 1e-3);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 33, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n int i, j, k, t;\n int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n\n for (i = 0, j = 0; i * 3 < n; i++)\n  c[j++] = a[i * 3];\n\n for (i = 0; i < j - 1; i++) {\n  k = i;\n  for (t = i + 1; t < j; t++)\n   if (c[t] < c[k])\n    k = t;\n  if (k != i) {\n   t = c[i];\n   c[i] = c[k];\n   c[k] = t;\n  }\n }\n\n for (i = 0; i < n; i++)\n  if (i % 3 == 0)\n   b[i] = c[i / 3];\n  else\n   b[i] = a[i];\n\n free(c);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n int i, j, k, t;\n int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n\n for (i = 0, j = 0; i * 3 < n; i++)\n  c[j++] = a[i * 3];\n\n for (i = 0; i < j - 1; i++) {\n  k = i;\n  for (t = i + 1; t < j; t++)\n   if (c[t] < c[k])\n    k = t;\n  if (k != i) {\n   t = c[i];\n   c[i] = c[k];\n   c[k] = t;\n  }\n }\n\n for (i = 0; i < n; i++)\n  if (i % 3 == 0)\n   b[i] = c[i / 3];\n  else\n   b[i] = a[i];\n\n free(c);\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 33, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n  for (i = 0, j = 0; i < n; i += 3, j++)\n    c[j] = a[i];\n  for (i = 0; i < j; i++) {\n    k = i;\n    for (t = i + 1; t < j; t++)\n      if (c[t] < c[k])\n        k = t;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    if (i % 3 == 0)\n      b[i] = c[i / 3];\n    else\n      b[i] = a[i];\n  free(c);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n  for (i = 0, j = 0; i < n; i += 3, j++)\n    c[j] = a[i];\n  for (i = 0; i < j; i++) {\n    k = i;\n    for (t = i + 1; t < j; t++)\n      if (c[t] < c[k])\n        k = t;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    if (i % 3 == 0)\n      b[i] = c[i / 3];\n    else\n      b[i] = a[i];\n  free(c);\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 33, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n\n  for (i = 0, j = 0; i < n; i += 3, j++)\n    c[j] = a[i];\n\n  for (i = 0; i < j; i++) {\n    k = i;\n    for (t = i + 1; t < j; t++)\n      if (c[t] < c[k])\n        k = t;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n\n  for (i = 0; i < n; i++)\n    b[i] = (i % 3 == 0) ? c[i / 3] : a[i];\n\n  free(c);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = (int *)malloc(sizeof(int) * (n / 3 + 1));\n\n  for (i = 0, j = 0; i < n; i += 3, j++)\n    c[j] = a[i];\n\n  for (i = 0; i < j; i++) {\n    k = i;\n    for (t = i + 1; t < j; t++)\n      if (c[t] < c[k])\n        k = t;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n\n  for (i = 0; i < n; i++)\n    b[i] = (i % 3 == 0) ? c[i / 3] : a[i];\n\n  free(c);\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 33, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = malloc(sizeof(int) * (n / 3 + 1));\n\n  for (i = 0; i < n; i += 3)\n    c[i / 3] = a[i];\n\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++)\n      if (c[j] < c[k])\n        k = j;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n\n  for (i = 0; i < n; i++)\n    b[i] = c[i / 3];\n\n  free(c);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, k, t;\n  int *c = malloc(sizeof(int) * (n / 3 + 1));\n\n  for (i = 0; i < n; i += 3)\n    c[i / 3] = a[i];\n\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++)\n      if (c[j] < c[k])\n        k = j;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n\n  for (i = 0; i < n; i++)\n    b[i] = c[i / 3];\n\n  free(c);\n}\n\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 2, 3};\n    int result1[3];\n    func0(test1, 3, result1);\n    assert(issame(result1, result1, 3));\n\n    int test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    int result2[11];\n    func0(test2, 11, result2);\n    assert(issame(result2, result2, 11));\n\n    int test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    int result3[10];\n    func0(test3, 10, result3);\n    assert(issame(result3, result3, 10));\n\n    int test4[] = {5, 6, 3, 4, 8, 9, 2};\n    int correct4[] = {2, 6, 3, 4, 8, 9, 5};\n    int result4[7];\n    func0(test4, 7, result4);\n    assert(issame(result4, correct4, 7));\n\n    int test5[] = {5, 8, 3, 4, 6, 9, 2};\n    int correct5[] = {2, 8, 3, 4, 6, 9, 5};\n    int result5[7];\n    func0(test5, 7, result5);\n    assert(issame(result5, correct5, 7));\n\n    int test6[] = {5, 6, 9, 4, 8, 3, 2};\n    int correct6[] = {2, 6, 9, 4, 8, 3, 5};\n    int result6[7];\n    func0(test6, 7, result6);\n    assert(issame(result6, correct6, 7));\n\n    int test7[] = {5, 6, 3, 4, 8, 9, 2, 1};\n    int correct7[] = {2, 6, 3, 4, 8, 9, 5, 1};\n    int result7[8];\n    func0(test7, 8, result7);\n    assert(issame(result7, correct7, 8));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 34, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(int* nums, int numsSize, int* returnSize)\n{\n    int* ret = (int*)malloc(sizeof(int) * numsSize);\n    int i, j, k, flag;\n    for (i = 0, j = 0; i < numsSize; i++)\n    {\n        flag = 0;\n        for (k = 0; k < j; k++)\n        {\n            if (nums[i] == ret[k])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            ret[j++] = nums[i];\n        }\n    }\n    for (i = 0; i < j - 1; i++)\n    {\n        for (k = i + 1; k < j; k++)\n        {\n            if (ret[i] > ret[k])\n            {\n                int tmp = ret[i];\n                ret[i] = ret[k];\n                ret[k] = tmp;\n            }\n        }\n    }\n    *returnSize = j;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(int* nums, int numsSize, int* returnSize)\n{\n    int* ret = (int*)malloc(sizeof(int) * numsSize);\n    int i, j, k, flag;\n    for (i = 0, j = 0; i < numsSize; i++)\n    {\n        flag = 0;\n        for (k = 0; k < j; k++)\n        {\n            if (nums[i] == ret[k])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            ret[j++] = nums[i];\n        }\n    }\n    for (i = 0; i < j - 1; i++)\n    {\n        for (k = i + 1; k < j; k++)\n        {\n            if (ret[i] > ret[k])\n            {\n                int tmp = ret[i];\n                ret[i] = ret[k];\n                ret[k] = tmp;\n            }\n        }\n    }\n    *returnSize = j;\n    return ret;\n}\n\n\n\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 34, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}\n\n\n\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 34, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}\n\n\n\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 34, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == i)\n            b[i] = a[i];\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = n;\n}\n\n\n\n\nint main() {\n    int test_array[] = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    int expected_array[] = {0, 2, 3, 5, 9, 123};\n    int unique_size;\n    int *unique_array = func0(test_array, sizeof(test_array) / sizeof(test_array[0]), &unique_size);\n\n    assert(unique_size == sizeof(expected_array) / sizeof(expected_array[0]));\n    for (int i = 0; i < unique_size; i++) {\n        assert(unique_array[i] == expected_array[i]);\n    }\n\n    free(unique_array);\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 35, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}\n\n\n\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 35, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max;\n\n  max = -1.0;\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max;\n\n  max = -1.0;\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}\n\n\n\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 35, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}\n\n\n\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 35, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n\n  return max;\n}\n\n\n\n\nint main() {\n    float list1[] = {1, 2, 3};\n    assert(fabs(func0(list1, 3) - 3) < 1e-4);\n\n    float list2[] = {5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10};\n    assert(fabs(func0(list2, 11) - 124) < 1e-4);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 36, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            k = i;\n            while (k > 0) {\n                j = k % 10;\n                if (j == 7)\n                    count++;\n                k /= 10;\n            }\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            k = i;\n            while (k > 0) {\n                j = k % 10;\n                if (j == 7)\n                    count++;\n                k /= 10;\n            }\n        }\n    }\n    return count;\n}\n\n\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 36, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            j = i;\n            while (j > 0) {\n                k = j % 10;\n                if (k == 7)\n                    cnt++;\n                j /= 10;\n            }\n        }\n    }\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            j = i;\n            while (j > 0) {\n                k = j % 10;\n                if (k == 7)\n                    cnt++;\n                j /= 10;\n            }\n        }\n    }\n    return cnt;\n}\n\n\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 36, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        j = i;\n        while (j > 0) {\n            k = j % 10;\n            if (k == 7)\n                count++;\n            j /= 10;\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        j = i;\n        while (j > 0) {\n            k = j % 10;\n            if (k == 7)\n                count++;\n            j /= 10;\n        }\n    }\n    return count;\n}\n\n\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 36, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        j = i;\n        while (j > 0) {\n            k = j % 10;\n            if (k == 7)\n                count++;\n            j /= 10;\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        j = i;\n        while (j > 0) {\n            k = j % 10;\n            if (k == 7)\n                count++;\n            j /= 10;\n        }\n    }\n    return count;\n}\n\n\n\nint main() {\n    assert(func0(50) == 0);\n    assert(func0(78) == 2);\n    assert(func0(79) == 3);\n    assert(func0(100) == 3);\n    assert(func0(200) == 6);\n    assert(func0(4000) == 192);\n    assert(func0(10000) == 639);\n    assert(func0(100000) == 8026);\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 37, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j, k;\n    float *tmp = (float *)malloc(sizeof(float) * (n / 2 + 1));\n    k = 0;\n    for (i = 0; i < n; i += 2) {\n        tmp[k++] = in[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            out[i] = tmp[i / 2];\n        } else {\n            out[i] = in[i];\n        }\n    }\n    free(tmp);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j, k;\n    float *tmp = (float *)malloc(sizeof(float) * (n / 2 + 1));\n    k = 0;\n    for (i = 0; i < n; i += 2) {\n        tmp[k++] = in[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            out[i] = tmp[i / 2];\n        } else {\n            out[i] = in[i];\n        }\n    }\n    free(tmp);\n}\n\n\n\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 37, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = x[i];\n  for (i=n/2-1; i>0; i--)\n    for (j=0; j<i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i=0; i<n; i++)\n    if (i%2)\n      y[i] = x[i];\n    else\n      y[i] = tmp[i/2];\n  free(tmp);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = x[i];\n  for (i=n/2-1; i>0; i--)\n    for (j=0; j<i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i=0; i<n; i++)\n    if (i%2)\n      y[i] = x[i];\n    else\n      y[i] = tmp[i/2];\n  free(tmp);\n}\n\n\n\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 37, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j;\n    float *tmp = (float *)malloc(sizeof(float) * (n / 2 + 1));\n    for (i = 0; i < n; i += 2)\n        tmp[i / 2] = in[i];\n    for (i = n / 2 - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n    for (i = 0; i < n; i++)\n        if (i % 2 == 0)\n            out[i] = tmp[i / 2];\n        else\n            out[i] = in[i];\n    free(tmp);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j;\n    float *tmp = (float *)malloc(sizeof(float) * (n / 2 + 1));\n    for (i = 0; i < n; i += 2)\n        tmp[i / 2] = in[i];\n    for (i = n / 2 - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n    for (i = 0; i < n; i++)\n        if (i % 2 == 0)\n            out[i] = tmp[i / 2];\n        else\n            out[i] = in[i];\n    free(tmp);\n}\n\n\n\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 37, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j;\n    float *tmp = malloc(sizeof(float) * (n / 2 + 1));\n\n    for (i = 0; i < n; i++)\n        tmp[i] = in[i];\n\n    for (i = n / 2; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++)\n        out[i] = i % 2 ? in[i] : tmp[i / 2];\n\n    free(tmp);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nvoid func0(float *in, int n, float *out)\n{\n    int i, j;\n    float *tmp = malloc(sizeof(float) * (n / 2 + 1));\n\n    for (i = 0; i < n; i++)\n        tmp[i] = in[i];\n\n    for (i = n / 2; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (tmp[j] > tmp[j + 1]) {\n                float t = tmp[j];\n                tmp[j] = tmp[j + 1];\n                tmp[j + 1] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++)\n        out[i] = i % 2 ? in[i] : tmp[i / 2];\n\n    free(tmp);\n}\n\n\n\n\n\nint issame(float *a, float *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    float test1[] = {1, 2, 3};\n    float result1[3];\n    func0(test1, 3, result1);\n    float expected1[] = {1, 2, 3};\n    assert(issame(result1, expected1, 3));\n\n    float test2[] = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    float result2[11];\n    func0(test2, 11, result2);\n    float expected2[] = {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123};\n    assert(issame(result2, expected2, 11));\n\n    float test3[] = {5, 8, -12, 4, 23, 2, 3, 11, 12, -10};\n    float result3[10];\n    func0(test3, 10, result3);\n    float expected3[] = {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10};\n    assert(issame(result3, expected3, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 38, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0; i < (len + 2) / 3; i++) {\n        j = (i + 1) * 3 > len ? len - i * 3 : 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = t;\n                t = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0; i < (len + 2) / 3; i++) {\n        j = (i + 1) * 3 > len ? len - i * 3 : 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = t;\n                t = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}\n\n\n\n\n\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 38, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n\n    for (i = 0; i < len / 3; i++) {\n        if (len - i * 3 >= 3) {\n            __strncpy_chk(tmp, str, len - i * 3, 4);\n            tmp[len - i * 3] = '\\0';\n        } else {\n            strncpy(tmp, str, 3);\n            tmp[3] = '\\0';\n        }\n\n        if (flag) {\n            char t = tmp[0];\n            tmp[0] = tmp[2];\n            tmp[2] = t;\n        } else {\n            char t = tmp[0];\n            tmp[0] = tmp[1];\n            tmp[1] = tmp[2];\n            tmp[2] = t;\n        }\n\n        strncpy(str, tmp, len - i * 3);\n        str += 3;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n\n    for (i = 0; i < len / 3; i++) {\n        if (len - i * 3 >= 3) {\n            __strncpy_chk(tmp, str, len - i * 3, 4);\n            tmp[len - i * 3] = '\\0';\n        } else {\n            strncpy(tmp, str, 3);\n            tmp[3] = '\\0';\n        }\n\n        if (flag) {\n            char t = tmp[0];\n            tmp[0] = tmp[2];\n            tmp[2] = t;\n        } else {\n            char t = tmp[0];\n            tmp[0] = tmp[1];\n            tmp[1] = tmp[2];\n            tmp[2] = t;\n        }\n\n        strncpy(str, tmp, len - i * 3);\n        str += 3;\n    }\n}\n\n\n\n\n\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 38, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    int i, j, k, len;\n    char tmp[4];\n\n    len = strlen(s);\n    for (i = 0; i < len; i += 3) {\n        if (i + 3 > len) {\n            j = len - i;\n            __strncpy_chk(tmp, s + i, j, 4);\n            tmp[j] = '\\0';\n        } else {\n            strncpy(tmp, s + i, 3);\n            tmp[3] = '\\0';\n        }\n        k = tmp[2];\n        tmp[2] = tmp[0];\n        if (flag) {\n            tmp[2] = tmp[1];\n            tmp[1] = tmp[0];\n            tmp[0] = k;\n        } else {\n            tmp[0] = tmp[1];\n            tmp[1] = k;\n        }\n        strncpy(s + i, tmp, 3);\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    int i, j, k, len;\n    char tmp[4];\n\n    len = strlen(s);\n    for (i = 0; i < len; i += 3) {\n        if (i + 3 > len) {\n            j = len - i;\n            __strncpy_chk(tmp, s + i, j, 4);\n            tmp[j] = '\\0';\n        } else {\n            strncpy(tmp, s + i, 3);\n            tmp[3] = '\\0';\n        }\n        k = tmp[2];\n        tmp[2] = tmp[0];\n        if (flag) {\n            tmp[2] = tmp[1];\n            tmp[1] = tmp[0];\n            tmp[0] = k;\n        } else {\n            tmp[0] = tmp[1];\n            tmp[1] = k;\n        }\n        strncpy(s + i, tmp, 3);\n    }\n}\n\n\n\n\n\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 38, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  int i, j, k, l;\n  char t[4];\n\n  l = strlen(s);\n  k = (l + 2) / 3;\n  for (i = 0; i < l; i++) {\n    j = l - i * 3;\n    if (flag) {\n      if (j > 3)\n        __strncpy_chk(t, s, j, sizeof(t));\n      else\n        strncpy(t, s, 3);\n      t[j] = '\\0';\n    } else {\n      if (j > 3)\n        strncpy(t, s, 3);\n      else\n        __strncpy_chk(t, s, j, sizeof(t));\n      t[j] = '\\0';\n    }\n    strncpy(s, t, 3);\n    s += 3;\n    if (i >= k)\n      break;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  int i, j, k, l;\n  char t[4];\n\n  l = strlen(s);\n  k = (l + 2) / 3;\n  for (i = 0; i < l; i++) {\n    j = l - i * 3;\n    if (flag) {\n      if (j > 3)\n        __strncpy_chk(t, s, j, sizeof(t));\n      else\n        strncpy(t, s, 3);\n      t[j] = '\\0';\n    } else {\n      if (j > 3)\n        strncpy(t, s, 3);\n      else\n        __strncpy_chk(t, s, j, sizeof(t));\n      t[j] = '\\0';\n    }\n    strncpy(s, t, 3);\n    s += 3;\n    if (i >= k)\n      break;\n  }\n}\n\n\n\n\n\n\nint main(){\n    srand((unsigned int)time(NULL));\n    char str[22], temp[22], decoded_str[22];\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        for (int j = 0; j < l; j++) {\n            str[j] = 'a' + rand() % 26;\n        }\n        str[l] = '\\0';\n        strcpy(temp, str);\n\n        func0(temp, 1); // Encode\n        strcpy(decoded_str, temp);\n        func0(decoded_str, 0); // Decode\n\n        assert(strcmp(decoded_str, str) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 39, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int a = 1, b = 2, c = 0, i, j;\n    while (1) {\n        b = a + b;\n        a = b - a;\n        if (c >= n)\n            return 0;\n        for (i = 2, j = 0; i * i <= b; i++) {\n            if (b % i == 0) {\n                j = 1;\n                break;\n            }\n        }\n        if (!j)\n            c++;\n        if (c == n)\n            return b;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int a = 1, b = 2, c = 0, i, j;\n    while (1) {\n        b = a + b;\n        a = b - a;\n        if (c >= n)\n            return 0;\n        for (i = 2, j = 0; i * i <= b; i++) {\n            if (b % i == 0) {\n                j = 1;\n                break;\n            }\n        }\n        if (!j)\n            c++;\n        if (c == n)\n            return b;\n    }\n}\n\n\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 39, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, j, k, l;\n  int a, b;\n\n  a = 1;\n  b = 2;\n  for (i = 0; i < n; i++) {\n    k = b;\n    b = a + b;\n    a = k;\n    if (b > 3) {\n      for (j = 2; j * j <= b; j++) {\n        if (b % j == 0)\n          break;\n      }\n      if (j * j > b)\n        return b;\n    }\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, j, k, l;\n  int a, b;\n\n  a = 1;\n  b = 2;\n  for (i = 0; i < n; i++) {\n    k = b;\n    b = a + b;\n    a = k;\n    if (b > 3) {\n      for (j = 2; j * j <= b; j++) {\n        if (b % j == 0)\n          break;\n      }\n      if (j * j > b)\n        return b;\n    }\n  }\n  return 0;\n}\n\n\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 39, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, j, k, l;\n  i = 1;\n  j = 2;\n  k = 0;\n  while (k < n) {\n    l = 1;\n    if (j > 3) {\n      while (l) {\n        if (j < i * i) {\n          l = 0;\n        } else {\n          if (j % i == 0) {\n            l = 0;\n          }\n        }\n        i = i + 1;\n      }\n    }\n    if (l) {\n      k = k + 1;\n    }\n    if (k == n) {\n      return j;\n    }\n    i = j;\n    j = j + i;\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, j, k, l;\n  i = 1;\n  j = 2;\n  k = 0;\n  while (k < n) {\n    l = 1;\n    if (j > 3) {\n      while (l) {\n        if (j < i * i) {\n          l = 0;\n        } else {\n          if (j % i == 0) {\n            l = 0;\n          }\n        }\n        i = i + 1;\n      }\n    }\n    if (l) {\n      k = k + 1;\n    }\n    if (k == n) {\n      return j;\n    }\n    i = j;\n    j = j + i;\n  }\n  return 0;\n}\n\n\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 39, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    int a, b;\n\n    a = 1;\n    b = 2;\n    for (i = 0; i < n; i++) {\n        if (b > 3) {\n            for (j = 2; j * j <= b; j++) {\n                if (b % j == 0)\n                    break;\n            }\n            if (j * j > b) {\n                a = b;\n                b = a + b;\n                continue;\n            }\n        }\n        return b;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    int a, b;\n\n    a = 1;\n    b = 2;\n    for (i = 0; i < n; i++) {\n        if (b > 3) {\n            for (j = 2; j * j <= b; j++) {\n                if (b % j == 0)\n                    break;\n            }\n            if (j * j > b) {\n                a = b;\n                b = a + b;\n                continue;\n            }\n        }\n        return b;\n    }\n    return 0;\n}\n\n\n\nint main() {\n    assert(func0(1) == 2);\n    assert(func0(2) == 3);\n    assert(func0(3) == 5);\n    assert(func0(4) == 13);\n    assert(func0(5) == 89);\n    assert(func0(6) == 233);\n    assert(func0(7) == 1597);\n    assert(func0(8) == 28657);\n    assert(func0(9) == 514229);\n    assert(func0(10) == 433494437);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 40, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n      }\n    }\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 40, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n      }\n    }\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 40, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      for (k = j + 1; k < n; k++)\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      for (k = j + 1; k < n; k++)\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 40, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      for (k = j + 1; k < n; k++)\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      for (k = j + 1; k < n; k++)\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, 5, -1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 3, -2, 1};\n    assert(func0(test3, 4) == true);\n    \n    int test4[] = {1, 2, 3, 7};\n    assert(func0(test4, 4) == false);\n    \n    int test5[] = {1, 2, 5, 7};\n    assert(func0(test5, 4) == false);\n    \n    int test6[] = {2, 4, -5, 3, 9, 7};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {1};\n    assert(func0(test7, 1) == false);\n    \n    int test8[] = {1, 3, 5, -100};\n    assert(func0(test8, 4) == false);\n    \n    int test9[] = {100, 3, 5, -100};\n    assert(func0(test9, 4) == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 41, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}\n\n\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 41, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}\n\n\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 41, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}\n\n\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 41, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return x * x;\n}\n\n\n\nint main() {\n    assert(func0(2) == 4);\n    assert(func0(3) == 9);\n    assert(func0(4) == 16);\n    assert(func0(8) == 64);\n    assert(func0(10) == 100);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 42, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 42, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 42, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 42, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] += 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] += 1;\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int list1[] = {};\n    int result1[] = {};\n    func0(list1, 0);\n    assert(issame(list1, 0, result1, 0));\n\n    int list2[] = {3, 2, 1};\n    int result2[] = {4, 3, 2};\n    func0(list2, 3);\n    assert(issame(list2, 3, result2, 3));\n\n    int list3[] = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    int result3[] = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    func0(list3, 9);\n    assert(issame(list3, 9, result3, 9));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 43, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0)\n        return 1;\n    }\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0)\n        return 1;\n    }\n  }\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 43, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 43, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 43, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] + a[j] == 0)\n        return 1;\n  return 0;\n}\n\n\n\nint main() {\n    int test1[] = {1, 3, 5, 0};\n    assert(func0(test1, 4) == false);\n    \n    int test2[] = {1, 3, -2, 1};\n    assert(func0(test2, 4) == false);\n    \n    int test3[] = {1, 2, 3, 7};\n    assert(func0(test3, 4) == false);\n    \n    int test4[] = {2, 4, -5, 3, 5, 7};\n    assert(func0(test4, 6) == true);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == false);\n    \n    int test6[] = {-3, 9, -1, 3, 2, 30};\n    assert(func0(test6, 6) == true);\n    \n    int test7[] = {-3, 9, -1, 3, 2, 31};\n    assert(func0(test7, 6) == true);\n    \n    int test8[] = {-3, 9, -1, 4, 2, 30};\n    assert(func0(test8, 6) == false);\n    \n    int test9[] = {-3, 9, -1, 4, 2, 31};\n    assert(func0(test9, 6) == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 44, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *buf)\n{\n    int i = 0;\n    char tmp[32];\n    while (n > 0) {\n        tmp[i++] = n % base + '0';\n        n /= base;\n    }\n    int j = 0;\n    while (i > 0) {\n        buf[j++] = tmp[--i];\n    }\n    buf[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *buf)\n{\n    int i = 0;\n    char tmp[32];\n    while (n > 0) {\n        tmp[i++] = n % base + '0';\n        n /= base;\n    }\n    int j = 0;\n    while (i > 0) {\n        buf[j++] = tmp[--i];\n    }\n    buf[j] = '\\0';\n}\n\n\n\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 44, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n\n    while (n > 0) {\n        buf[i++] = n % base + '0';\n        n /= base;\n    }\n\n    for (i--; i >= 0; i--)\n        *s++ = buf[i];\n\n    *s = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n\n    while (n > 0) {\n        buf[i++] = n % base + '0';\n        n /= base;\n    }\n\n    for (i--; i >= 0; i--)\n        *s++ = buf[i];\n\n    *s = '\\0';\n}\n\n\n\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 44, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n    while (n > 0) {\n        buf[i++] = n % base + '0';\n        n /= base;\n    }\n    while (i-- > 0) {\n        *s++ = buf[i];\n    }\n    *s = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n    while (n > 0) {\n        buf[i++] = n % base + '0';\n        n /= base;\n    }\n    while (i-- > 0) {\n        *s++ = buf[i];\n    }\n    *s = '\\0';\n}\n\n\n\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 44, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n\n    do {\n        buf[i++] = n % base + '0';\n        n /= base;\n    } while (n > 0);\n\n    for (i--; i >= 0; i--)\n        *s++ = buf[i];\n\n    *s = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int base, char *s)\n{\n    int i = 0;\n    char buf[32];\n\n    do {\n        buf[i++] = n % base + '0';\n        n /= base;\n    } while (n > 0);\n\n    for (i--; i >= 0; i--)\n        *s++ = buf[i];\n\n    *s = '\\0';\n}\n\n\n\n\nint main() {\n    char buffer[33];\n    \n    func0(8, 3, buffer);\n    assert(strcmp(buffer, \"22\") == 0);\n    \n    func0(9, 3, buffer);\n    assert(strcmp(buffer, \"100\") == 0);\n    \n    func0(234, 2, buffer);\n    assert(strcmp(buffer, \"11101010\") == 0);\n    \n    func0(16, 2, buffer);\n    assert(strcmp(buffer, \"10000\") == 0);\n    \n    func0(8, 2, buffer);\n    assert(strcmp(buffer, \"1000\") == 0);\n    \n    func0(7, 2, buffer);\n    assert(strcmp(buffer, \"111\") == 0);\n    \n    for (int x = 2; x < 8; x++) {\n        char expected[33];\n        sprintf(expected, \"%d\", x);\n        func0(x, x + 1, buffer);\n        assert(strcmp(buffer, expected) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 45, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 3.14159265358979323846;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 3.14159265358979323846;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 45, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 1.0f;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 1.0f;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 45, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 0.5f;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 0.5f;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 45, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 0.5f;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float a, float b)\n{\n  return a * b * 0.5f;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(5, 3) - 7.5) < 1e-4);\n    assert(fabs(func0(2, 2) - 2.0) < 1e-4);\n    assert(fabs(func0(10, 8) - 40.0) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 46, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    return a[n];\n}\n\n\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 46, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i <= n; i++)\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i <= n; i++)\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  return a[n];\n}\n\n\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 46, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++)\n    a[i] = a[i-1] + a[i-2] + i;\n  return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++)\n    a[i] = a[i-1] + a[i-2] + i;\n  return a[n];\n}\n\n\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 46, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 1;\n  a[3] = 2;\n  for (i = 4; i < n; i++)\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 1;\n  a[3] = 2;\n  for (i = 4; i < n; i++)\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  return a[n];\n}\n\n\n\nint main() {\n    assert(func0(5) == 4);\n    assert(func0(8) == 28);\n    assert(func0(10) == 104);\n    assert(func0(12) == 386);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 47, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float temp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float temp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}\n\n\n\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 47, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float temp;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j])\n            {\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2 - 1] + a[n / 2]) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float temp;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j])\n            {\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2 - 1] + a[n / 2]) / 2;\n}\n\n\n\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 47, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float tmp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float tmp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}\n\n\n\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 47, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float tmp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n\nfloat func0(float *a, int n)\n{\n    int i, j;\n    float tmp;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n            }\n\n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2;\n}\n\n\n\n\nint main() {\n    float list1[] = {3, 1, 2, 4, 5};\n    assert(fabs(func0(list1, 5) - 3) < 1e-4);\n\n    float list2[] = {-10, 4, 6, 1000, 10, 20};\n    assert(fabs(func0(list2, 6) - 8.0) < 1e-4);\n\n    float list3[] = {5};\n    assert(fabs(func0(list3, 1) - 5) < 1e-4);\n\n    float list4[] = {6, 5};\n    assert(fabs(func0(list4, 2) - 5.5) < 1e-4);\n\n    float list5[] = {8, 1, 3, 9, 9, 2, 7};\n    assert(fabs(func0(list5, 7) - 7) < 1e-4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 48, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 48, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, len;\n  len = strlen(s);\n  for (i = 0; i < len/2; i++)\n    if (s[i] != s[len-i-1])\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, len;\n  len = strlen(s);\n  for (i = 0; i < len/2; i++)\n    if (s[i] != s[len-i-1])\n      return 0;\n  return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 48, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, len;\n\n  len = strlen(s);\n  for (i = 0; i < len/2; i++)\n    if (s[i] != s[len-i-1])\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, len;\n\n  len = strlen(s);\n  for (i = 0; i < len/2; i++)\n    if (s[i] != s[len-i-1])\n      return 0;\n  return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 48, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len / 2; i++)\n        if (s[i] != s[len - i - 1])\n            return 0;\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len;\n\n    len = strlen(s);\n    for (i = 0; i < len / 2; i++)\n        if (s[i] != s[len - i - 1])\n            return 0;\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"\") == true);\n    assert(func0(\"aba\") == true);\n    assert(func0(\"aaaaa\") == true);\n    assert(func0(\"zbcd\") == false);\n    assert(func0(\"xywyx\") == true);\n    assert(func0(\"xywyz\") == false);\n    assert(func0(\"xywzx\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 49, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, r = 1;\n    for (i = 0; i < n; i++)\n        r = (r * 2) % m;\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, r = 1;\n    for (i = 0; i < n; i++)\n        r = (r * 2) % m;\n    return r;\n}\n\n\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 49, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, r = 1;\n    for (i = 0; i < n; i++)\n        r = (r * 2) % m;\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, r = 1;\n    for (i = 0; i < n; i++)\n        r = (r * 2) % m;\n    return r;\n}\n\n\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 49, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, x;\n\n    x = 1;\n    for (i = 0; i < n; i++)\n        x = (2 * x) % m;\n    return x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, x;\n\n    x = 1;\n    for (i = 0; i < n; i++)\n        x = (2 * x) % m;\n    return x;\n}\n\n\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 49, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, x;\n\n    x = 1;\n    for (i = 0; i < n; i++)\n        x = (2 * x) % m;\n    return x;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int m)\n{\n    int i, x;\n\n    x = 1;\n    for (i = 0; i < n; i++)\n        x = (2 * x) % m;\n    return x;\n}\n\n\n\nint main() {\n    assert(func0(3, 5) == 3);\n    assert(func0(1101, 101) == 2);\n    assert(func0(0, 101) == 1);\n    assert(func0(3, 11) == 8);\n    assert(func0(100, 101) == 1);\n    assert(func0(30, 5) == 4);\n    assert(func0(31, 5) == 3);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 50, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    int i, j, k;\n    int n = flag ? 5 : 21;\n    size_t len = strlen(s);\n    for (i = 0; i < len; i++) {\n        j = s[i] - 'a' + n;\n        k = j % 26;\n        s[i] = 'a' + k;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    int i, j, k;\n    int n = flag ? 5 : 21;\n    size_t len = strlen(s);\n    for (i = 0; i < len; i++) {\n        j = s[i] - 'a' + n;\n        k = j % 26;\n        s[i] = 'a' + k;\n    }\n}\n\n\n\n\n\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 50, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    size_t i;\n    for (i = 0; i < strlen(s); i++)\n        s[i] = (s[i] - 'a' + (flag ? 22 : 10)) % 26 + 'a';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n    size_t i;\n    for (i = 0; i < strlen(s); i++)\n        s[i] = (s[i] - 'a' + (flag ? 22 : 10)) % 26 + 'a';\n}\n\n\n\n\n\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 50, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  size_t i, len = strlen(s);\n  for (i = 0; i < len; i++)\n    s[i] = (s[i] - 'A' + (flag ? 22 : 10)) % 26 + 'a';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  size_t i, len = strlen(s);\n  for (i = 0; i < len; i++)\n    s[i] = (s[i] - 'A' + (flag ? 22 : 10)) % 26 + 'a';\n}\n\n\n\n\n\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 50, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  int i, j, k, l, m, n, o, p, q, r, s1, t, u, v, w, x, y, z;\n  int len;\n  int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s2, t1, u1, v1, w1, x1, y1, z1;\n  int a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s3, t2, u2, v2, w2, x2, y2, z2;\n  int a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s4, t3, u3, v3, w3, x3, y3, z3;\n  int a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s5, t4, u4, v4, w4, x4, y4, z4;\n  int a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s6, t5, u5, v5, w5, x5, y5, z5;\n  int a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <time.h>\n\nvoid func0(char *s, int flag)\n{\n  int i, j, k, l, m, n, o, p, q, r, s1, t, u, v, w, x, y, z;\n  int len;\n  int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s2, t1, u1, v1, w1, x1, y1, z1;\n  int a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s3, t2, u2, v2, w2, x2, y2, z2;\n  int a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s4, t3, u3, v3, w3, x3, y3, z3;\n  int a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s5, t4, u4, v4, w4, x4, y4, z4;\n  int a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s6, t5, u5, v5, w5, x5, y5, z5;\n  int a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6\n\n\n\n\n\n\nint main() {\n    srand((unsigned int)time(NULL));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        char *str = (char *)malloc(l + 1);\n        for (int j = 0; j < l; j++) {\n            char chr = 'a' + rand() % 26;\n            str[j] = chr;\n        }\n        str[l] = '\\0';\n\n        char *encoded_str = (char *)malloc(l + 1);\n        strcpy(encoded_str, str);\n        func0(encoded_str, 1);\n        func0(encoded_str, 0);\n        assert(strcmp(encoded_str, str) == 0);\n\n        free(str);\n        free(encoded_str);\n    }\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 51, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p, *q;\n\n    for (p = s, q = s; *p; p++)\n        if (strchr(\"AEIOUaeiou\", *p) == NULL)\n            *q++ = *p;\n    *q = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p, *q;\n\n    for (p = s, q = s; *p; p++)\n        if (strchr(\"AEIOUaeiou\", *p) == NULL)\n            *q++ = *p;\n    *q = '\\0';\n}\n\n\n\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 51, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}\n\n\n\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 51, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}\n\n\n\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 51, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"AEIOUaeiou\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}\n\n\n\n\nint main() {\n    char test1[] = \"\";\n    func0(test1);\n    assert(strcmp(test1, \"\") == 0);\n    \n    char test2[] = \"abcdef\\nghijklm\";\n    func0(test2);\n    assert(strcmp(test2, \"bcdf\\nghjklm\") == 0);\n    \n    char test3[] = \"fedcba\";\n    func0(test3);\n    assert(strcmp(test3, \"fdcb\") == 0);\n    \n    char test4[] = \"eeeee\";\n    func0(test4);\n    assert(strcmp(test4, \"\") == 0);\n    \n    char test5[] = \"acBAA\";\n    func0(test5);\n    assert(strcmp(test5, \"cB\") == 0);\n    \n    char test6[] = \"EcBOO\";\n    func0(test6);\n    assert(strcmp(test6, \"cB\") == 0);\n    \n    char test7[] = \"ybcd\";\n    func0(test7);\n    assert(strcmp(test7, \"ybcd\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 52, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 52, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 52, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 52, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(int *a, int n, int m)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    int list1[] = {1, 2, 4, 10};\n    assert(func0(list1, 4, 100));\n\n    int list2[] = {1, 20, 4, 10};\n    assert(!func0(list2, 4, 5));\n    \n    int list3[] = {1, 20, 4, 10};\n    assert(func0(list3, 4, 21));\n    \n    int list4[] = {1, 20, 4, 10};\n    assert(func0(list4, 4, 22));\n    \n    int list5[] = {1, 8, 4, 10};\n    assert(func0(list5, 4, 11));\n    \n    int list6[] = {1, 8, 4, 10};\n    assert(!func0(list6, 4, 10));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 53, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b)\n{\n  return a + b;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b)\n{\n  return a + b;\n}\n\n\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 53, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b)\n{\n  return a + b;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b)\n{\n  return a + b;\n}\n\n\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 53, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n  return a + b;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n  return a + b;\n}\n\n\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 53, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n  return a + b;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n  return a + b;\n}\n\n\n\nint main() {\n    assert(func0(0, 1) == 1);\n    assert(func0(1, 0) == 1);\n    assert(func0(2, 3) == 5);\n    assert(func0(5, 7) == 12);\n    assert(func0(7, 5) == 12);\n    for (int i = 0; i < 100; i += 1) {\n        int x = rand() % 1000;\n        int y = rand() % 1000;\n        assert(func0(x, y) == x + y);\n    }\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 54, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *a, char *b)\n{\n    int i, j, k, l;\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n\n    for (i = 0; i < len_a; i++) {\n        int found = 0;\n        for (j = 0; j < len_b; j++) {\n            if (a[i] == b[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n\n    for (k = 0; k < len_b; k++) {\n        int found = 0;\n        for (l = 0; l < len_a; l++) {\n            if (b[k] == a[l]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *a, char *b)\n{\n    int i, j, k, l;\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n\n    for (i = 0; i < len_a; i++) {\n        int found = 0;\n        for (j = 0; j < len_b; j++) {\n            if (a[i] == b[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n\n    for (k = 0; k < len_b; k++) {\n        int found = 0;\n        for (l = 0; l < len_a; l++) {\n            if (b[k] == a[l]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 54, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *a, char *b)\n{\n  int i, j, k, l;\n  int flag;\n\n  l = strlen(a);\n  k = strlen(b);\n\n  for (i = 0; i < l - 1; i++) {\n    flag = 0;\n    for (j = 0; j < k - 1; j++) {\n      if (a[i] == b[j]) {\n flag = 1;\n break;\n      }\n    }\n    if (flag == 0)\n      return 0;\n  }\n\n  for (i = 0; i < k - 1; i++) {\n    flag = 0;\n    for (j = 0; j < l - 1; j++) {\n      if (b[i] == a[j]) {\n flag = 1;\n break;\n      }\n    }\n    if (flag == 0)\n      return 0;\n  }\n\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *a, char *b)\n{\n  int i, j, k, l;\n  int flag;\n\n  l = strlen(a);\n  k = strlen(b);\n\n  for (i = 0; i < l - 1; i++) {\n    flag = 0;\n    for (j = 0; j < k - 1; j++) {\n      if (a[i] == b[j]) {\n flag = 1;\n break;\n      }\n    }\n    if (flag == 0)\n      return 0;\n  }\n\n  for (i = 0; i < k - 1; i++) {\n    flag = 0;\n    for (j = 0; j < l - 1; j++) {\n      if (b[i] == a[j]) {\n flag = 1;\n break;\n      }\n    }\n    if (flag == 0)\n      return 0;\n  }\n\n  return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 54, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, len1, len2;\n    len1 = strlen(s1);\n    len2 = strlen(s2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (j == len2)\n            return 0;\n    }\n    for (i = 0; i < len2; i++) {\n        for (j = 0; j < len1; j++) {\n            if (s2[i] == s1[j])\n                break;\n        }\n        if (j == len1)\n            return 0;\n    }\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, len1, len2;\n    len1 = strlen(s1);\n    len2 = strlen(s2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (j == len2)\n            return 0;\n    }\n    for (i = 0; i < len2; i++) {\n        for (j = 0; j < len1; j++) {\n            if (s2[i] == s1[j])\n                break;\n        }\n        if (j == len1)\n            return 0;\n    }\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 54, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, len1, len2;\n\n    len1 = strlen(s1);\n    len2 = strlen(s2);\n\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (j == len2)\n            return 0;\n    }\n\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (i == len1)\n            return 0;\n    }\n\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, len1, len2;\n\n    len1 = strlen(s1);\n    len2 = strlen(s2);\n\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (j == len2)\n            return 0;\n    }\n\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (s1[i] == s2[j])\n                break;\n        }\n        if (i == len1)\n            return 0;\n    }\n\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(func0(\"abcd\", \"dddddddabc\") == true);\n    assert(func0(\"dddddddabc\", \"abcd\") == true);\n    assert(func0(\"eabcd\", \"dddddddabc\") == false);\n    assert(func0(\"abcd\", \"dddddddabce\") == false);\n    assert(func0(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(func0(\"aabb\", \"aaccc\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 55, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}\n\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 55, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[1000];\n\n  for (i = 0; i < 1000; i++)\n    a[i] = 0;\n\n  a[0] = 1;\n\n  for (i = 1; i < n; i++)\n    a[i] = a[i-1] + a[i];\n\n  return a[n-1];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[1000];\n\n  for (i = 0; i < 1000; i++)\n    a[i] = 0;\n\n  a[0] = 1;\n\n  for (i = 1; i < n; i++)\n    a[i] = a[i-1] + a[i];\n\n  return a[n-1];\n}\n\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 55, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[1000];\n  a[0] = 0;\n  a[1] = 1;\n  for (i = 2; i < n; i++)\n    a[i] = a[i-1] + a[i-2];\n  return a[n-1];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  int a[1000];\n  a[0] = 0;\n  a[1] = 1;\n  for (i = 2; i < n; i++)\n    a[i] = a[i-1] + a[i-2];\n  return a[n-1];\n}\n\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 55, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, a[1000], b[1000];\n    for (i = 0; i < 1000; i++)\n        a[i] = b[i] = 0;\n    a[0] = b[0] = 1;\n    for (i = 2; i <= n; i++) {\n        for (j = 0; j < i; j++)\n            b[j] = a[j] + a[j + 1];\n        for (k = 0; k < i; k++)\n            a[k] = b[k];\n    }\n    return b[n - 2];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k, a[1000], b[1000];\n    for (i = 0; i < 1000; i++)\n        a[i] = b[i] = 0;\n    a[0] = b[0] = 1;\n    for (i = 2; i <= n; i++) {\n        for (j = 0; j < i; j++)\n            b[j] = a[j] + a[j + 1];\n        for (k = 0; k < i; k++)\n            a[k] = b[k];\n    }\n    return b[n - 2];\n}\n\n\nint main() {\n    assert(func0(10) == 55);\n    assert(func0(1) == 1);\n    assert(func0(8) == 21);\n    assert(func0(11) == 89);\n    assert(func0(12) == 144);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 56, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i = 0;\n    int count = 0;\n    while (str[i] != '\\0')\n    {\n        if (str[i] == '<')\n            count++;\n        if (str[i] == '>')\n            count--;\n        if (count < 0)\n            return 0;\n        i++;\n    }\n    if (count == 0)\n        return 1;\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i = 0;\n    int count = 0;\n    while (str[i] != '\\0')\n    {\n        if (str[i] == '<')\n            count++;\n        if (str[i] == '>')\n            count--;\n        if (count < 0)\n            return 0;\n        i++;\n    }\n    if (count == 0)\n        return 1;\n    return 0;\n}\n\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 56, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}\n\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 56, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}\n\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 56, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i = 0;\n    while (*s) {\n        if (*s == '<')\n            i++;\n        else if (*s == '>')\n            i--;\n        if (i < 0)\n            return 0;\n        s++;\n    }\n    return i == 0;\n}\n\n\nint main() {\n    assert(func0(\"<>\"));\n    assert(func0(\"<<><>>\"));\n    assert(func0(\"<><><<><>><>\"));\n    assert(func0(\"<><><<<><><>><>><<><><<>>>\"));\n    assert(!func0(\"<<<><>>>>\"));\n    assert(!func0(\"><<>\"));\n    assert(!func0(\"<\"));\n    assert(!func0(\"<<<<\"));\n    assert(!func0(\">\"));\n    assert(!func0(\"<<>\"));\n    assert(!func0(\"<><><<><>><>><<>\"));\n    assert(!func0(\"<><><<><>><>>><>\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 57, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i, incr = 0, decr = 0;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i - 1] < x[i])\n incr = 1;\n      if (x[i - 1] > x[i])\n decr = 1;\n    }\n  return (incr + decr != 2);\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i, incr = 0, decr = 0;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i - 1] < x[i])\n incr = 1;\n      if (x[i - 1] > x[i])\n decr = 1;\n    }\n  return (incr + decr != 2);\n}\n\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 57, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i, inc = 0, dec = 0;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i] > x[i-1])\n inc = 1;\n      if (x[i] < x[i-1])\n dec = 1;\n    }\n  return (inc + dec == 2);\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i, inc = 0, dec = 0;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i] > x[i-1])\n inc = 1;\n      if (x[i] < x[i-1])\n dec = 1;\n    }\n  return (inc + dec == 2);\n}\n\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 57, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i;\n  int asc = 0;\n  int desc = 0;\n\n  for (i = 0; i < n - 1; i++)\n  {\n    if (a[i] < a[i + 1])\n      asc = 1;\n    if (a[i] > a[i + 1])\n      desc = 1;\n  }\n\n  return (asc + desc == 2);\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i;\n  int asc = 0;\n  int desc = 0;\n\n  for (i = 0; i < n - 1; i++)\n  {\n    if (a[i] < a[i + 1])\n      asc = 1;\n    if (a[i] > a[i + 1])\n      desc = 1;\n  }\n\n  return (asc + desc == 2);\n}\n\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 57, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i;\n  int flag1 = 0;\n  int flag2 = 0;\n\n  for (i = 1; i < n; i++)\n  {\n    if (x[i] > x[i-1])\n      flag1 = 1;\n    if (x[i] < x[i-1])\n      flag2 = 1;\n  }\n\n  return (flag1 + flag2 == 2);\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(float *x, int n)\n{\n  int i;\n  int flag1 = 0;\n  int flag2 = 0;\n\n  for (i = 1; i < n; i++)\n  {\n    if (x[i] > x[i-1])\n      flag1 = 1;\n    if (x[i] < x[i-1])\n      flag2 = 1;\n  }\n\n  return (flag1 + flag2 == 2);\n}\n\n\nint main() {\n    float list1[] = {1, 2, 4, 10};\n    float list2[] = {1, 2, 4, 20};\n    float list3[] = {1, 20, 4, 10};\n    float list4[] = {4, 1, 0, -10};\n    float list5[] = {4, 1, 1, 0};\n    float list6[] = {1, 2, 3, 2, 5, 60};\n    float list7[] = {1, 2, 3, 4, 5, 60};\n    float list8[] = {9, 9, 9, 9};\n\n    assert(func0(list1, 4) == true);\n    assert(func0(list2, 4) == true);\n    assert(func0(list3, 4) == false);\n    assert(func0(list4, 4) == true);\n    assert(func0(list5, 4) == true);\n    assert(func0(list6, 6) == false);\n    assert(func0(list7, 6) == true);\n    assert(func0(list8, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 58, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* c = (int*)malloc(n * sizeof(int));\n    int i, j, k, flag;\n    for (i = 0, j = 0; j < n; j++) {\n        flag = 0;\n        for (k = 0; k < i; k++) {\n            if (c[k] == a[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            continue;\n        }\n        for (k = 0; k < m; k++) {\n            if (a[j] == b[k]) {\n                c[i++] = a[j];\n                break;\n            }\n        }\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int temp = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = temp;\n            }\n        }\n    }\n    *returnSize = i;\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* c = (int*)malloc(n * sizeof(int));\n    int i, j, k, flag;\n    for (i = 0, j = 0; j < n; j++) {\n        flag = 0;\n        for (k = 0; k < i; k++) {\n            if (c[k] == a[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            continue;\n        }\n        for (k = 0; k < m; k++) {\n            if (a[j] == b[k]) {\n                c[i++] = a[j];\n                break;\n            }\n        }\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int temp = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = temp;\n            }\n        }\n    }\n    *returnSize = i;\n    return c;\n}\n\n\n\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n", "compile_passed": 1, "test_passed": 0}
{"task_id": 58, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *c)\n{\n    int i, j, k, t;\n    int *d;\n\n    d = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i])\n                goto next;\n        }\n        for (j = 0; j < m; j++) {\n            if (a[i] == b[j]) {\n                d[k] = a[i];\n                k++;\n                break;\n            }\n        }\nnext:\n        ;\n    }\n    for (i = k - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (d[j] > d[j + 1]) {\n                t = d[j];\n                d[j] = d[j + 1];\n                d[j + 1] = t;\n            }\n        }\n    }\n    *c = k;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *c)\n{\n    int i, j, k, t;\n    int *d;\n\n    d = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i])\n                goto next;\n        }\n        for (j = 0; j < m; j++) {\n            if (a[i] == b[j]) {\n                d[k] = a[i];\n                k++;\n                break;\n            }\n        }\nnext:\n        ;\n    }\n    for (i = k - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (d[j] > d[j + 1]) {\n                t = d[j];\n                d[j] = d[j + 1];\n                d[j + 1] = t;\n            }\n        }\n    }\n    *c = k;\n}\n\n\n\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n", "compile_passed": 1, "test_passed": 0}
{"task_id": 58, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *k)\n{\n    int i, j, t;\n    int *c = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == i) {\n            for (j = 0; j < m; j++) {\n                if (a[i] == b[j]) {\n                    c[i] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *k = n;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *k)\n{\n    int i, j, t;\n    int *c = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == i) {\n            for (j = 0; j < m; j++) {\n                if (a[i] == b[j]) {\n                    c[i] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *k = n;\n}\n\n\n\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n", "compile_passed": 1, "test_passed": 0}
{"task_id": 58, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *k)\n{\n    int i, j, t;\n    int *c = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == i) {\n            for (j = 0; j < m; j++) {\n                if (a[i] == b[j]) {\n                    c[i] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *k = n;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b, int m, int *k)\n{\n    int i, j, t;\n    int *c = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == i) {\n            for (j = 0; j < m; j++) {\n                if (a[i] == b[j]) {\n                    c[i] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *k = n;\n}\n\n\n\n\nint main() {\n    int size;\n\n    int l1[] = {1, 4, 3, 34, 653, 2, 5};\n    int l2[] = {5, 7, 1, 5, 9, 653, 121};\n    int expected1[] = {1, 5, 653};\n    int *result1 = func0(l1, 7, l2, 7, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result1[i] == expected1[i]);\n    }\n    free(result1);\n\n    int l3[] = {5, 3, 2, 8};\n    int l4[] = {3, 2};\n    int expected2[] = {2, 3};\n    int *result2 = func0(l3, 4, l4, 2, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result2[i] == expected2[i]);\n    }\n    free(result2);\n\n    int l5[] = {4, 3, 2, 8};\n    int l6[] = {3, 2, 4};\n    int expected3[] = {2, 3, 4};\n    int *result3 = func0(l5, 4, l6, 3, &size);\n    for (int i = 0; i < size; i++) {\n        assert(result3[i] == expected3[i]);\n    }\n    free(result3);\n\n    int l7[] = {4, 3, 2, 8};\n    int l8[] = {};\n    int *result4 = func0(l7, 4, l8, 0, &size);\n    assert(size == 0); // Since l8 is empty, result4 should be empty as well\n    free(result4);\n\n    return 0;\n}\n", "compile_passed": 1, "test_passed": 0}
{"task_id": 59, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while (n % i == 0 && i < n) {\n      n /= i;\n    }\n  }\n  return n;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while (n % i == 0 && i < n) {\n      n /= i;\n    }\n  }\n  return n;\n}\n\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 59, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0 && n > i) {\n            n /= i;\n        }\n    }\n    return n;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0 && n > i) {\n            n /= i;\n        }\n    }\n    return n;\n}\n\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 59, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while (n % i == 0 && n > i) {\n      n /= i;\n    }\n  }\n  return n;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while (n % i == 0 && n > i) {\n      n /= i;\n    }\n  }\n  return n;\n}\n\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 59, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  for (i = 2; i * i <= n; i++)\n    while (n % i == 0 && n > i)\n      n /= i;\n  return n;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i;\n  for (i = 2; i * i <= n; i++)\n    while (n % i == 0 && n > i)\n      n /= i;\n  return n;\n}\n\n\nint main() {\n    assert(func0(15) == 5);\n    assert(func0(27) == 3);\n    assert(func0(63) == 7);\n    assert(func0(330) == 11);\n    assert(func0(13195) == 29);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 60, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 60, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 60, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  return n * (n + 1) / 2;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 60, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n  return n * (n + 1) / 2;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n) {\n  return n * (n + 1) / 2;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(6) == 21);\n    assert(func0(11) == 66);\n    assert(func0(30) == 465);\n    assert(func0(100) == 5050);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 61, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; i < strlen(s); i++) {\n        if (s[i] == '(')\n            cnt++;\n        if (s[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    return cnt == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; i < strlen(s); i++) {\n        if (s[i] == '(')\n            cnt++;\n        if (s[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    return cnt == 0;\n}\n\n\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 61, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nbool func0(char *s) {\n    int i, cnt = 0;\n    for (i = 0; s[i] != '\\0'; i++)\n        ;\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == '(')\n            cnt++;\n        else if (s[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            return false;\n    }\n    return cnt == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nbool func0(char *s) {\n    int i, cnt = 0;\n    for (i = 0; s[i] != '\\0'; i++)\n        ;\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == '(')\n            cnt++;\n        else if (s[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            return false;\n    }\n    return cnt == 0;\n}\n\n\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 61, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++) {\n        if (*s == '(')\n            n++;\n        else if (*s == ')') {\n            n--;\n            if (n == -1)\n                return 0;\n        }\n    }\n    return n == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++) {\n        if (*s == '(')\n            n++;\n        else if (*s == ')') {\n            n--;\n            if (n == -1)\n                return 0;\n        }\n    }\n    return n == 0;\n}\n\n\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 61, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++) {\n        if (*s == '(')\n            n++;\n        else if (*s == ')') {\n            n--;\n            if (n == -1)\n                return 0;\n        }\n    }\n    return n == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++) {\n        if (*s == '(')\n            n++;\n        else if (*s == ')') {\n            n--;\n            if (n == -1)\n                return 0;\n        }\n    }\n    return n == 0;\n}\n\n\n\nint main() {\n    assert(func0(\"()\"));\n    assert(func0(\"(()())\"));\n    assert(func0(\"()()(()())()\"));\n    assert(func0(\"()()((()()())())(()()(()))\"));\n    assert(!func0(\"((()())))\"));\n    assert(!func0(\")(()\"));\n    assert(!func0(\"(\"));\n    assert(!func0(\"((((\"));\n    assert(!func0(\")\"));\n    assert(!func0(\"(()\"));\n    assert(!func0(\"()()(()())())(()\"));\n    assert(!func0(\"()()(()())()))()\"));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 62, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = a[i] * i;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = a[i] * i;\n}\n\n\n\n\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 62, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}\n\n\n\n\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 62, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}\n\n\n\n\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 62, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i] = i * a[i];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i] = i * a[i];\n}\n\n\n\n\n\nbool issame(const float *a, int a_size, const float *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (fabs(a[i] - b[i]) > 1e-4) return false;\n    }\n    return true;\n}\n\nint main() {\n    float result[4];\n\n    float case1[] = {3, 1, 2, 4, 5};\n    float expected1[] = {1, 4, 12, 20};\n    func0(case1, 5, result);\n    assert(issame(result, 4, expected1, 4));\n\n    float case2[] = {1, 2, 3};\n    float expected2[] = {2, 6};\n    func0(case2, 3, result);\n    assert(issame(result, 2, expected2, 2));\n\n    float case3[] = {3, 2, 1};\n    float expected3[] = {2, 2};\n    func0(case3, 3, result);\n    assert(issame(result, 2, expected3, 2));\n\n    float case4[] = {3, 2, 1, 0, 4};\n    float expected4[] = {2, 2, 0, 16};\n    func0(case4, 5, result);\n    assert(issame(result, 4, expected4, 4));\n\n    float case5[] = {1};\n    func0(case5, 1, result);\n    assert(issame(result, 0, NULL, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 63, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    for (i = 3; i <= n; i++)\n        a[i - 2] = a[i - 3] + a[i - 2] + a[i - 1];\n    return a[n - 2];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    for (i = 3; i <= n; i++)\n        a[i - 2] = a[i - 3] + a[i - 2] + a[i - 1];\n    return a[n - 2];\n}\n\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 63, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n - 1];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n - 1];\n}\n\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 63, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (i = 2; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (i = 2; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}\n\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 63, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 1;\n    for (i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 1;\n    for (i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}\n\n\nint main() {\n    assert(func0(2) == 1);\n    assert(func0(1) == 0);\n    assert(func0(5) == 4);\n    assert(func0(8) == 24);\n    assert(func0(10) == 81);\n    assert(func0(12) == 274);\n    assert(func0(14) == 927);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 64, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, count = 0;\n    int len = strlen(s);\n\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            count++;\n    }\n\n    if (len > 0 && (s[len - 1] == 'y' || s[len - 1] == 'Y'))\n        count++;\n\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, count = 0;\n    int len = strlen(s);\n\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            count++;\n    }\n\n    if (len > 0 && (s[len - 1] == 'y' || s[len - 1] == 'Y'))\n        count++;\n\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 64, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n, c;\n\n    n = strlen(s);\n    c = 0;\n    for (i = 0; i < n; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            c++;\n    }\n    if (s[n - 1] == 'Y' || s[n - 1] == 'y')\n        c++;\n    return c;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n, c;\n\n    n = strlen(s);\n    c = 0;\n    for (i = 0; i < n; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            c++;\n    }\n    if (s[n - 1] == 'Y' || s[n - 1] == 'y')\n        c++;\n    return c;\n}\n\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 64, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len, count;\n\n    len = strlen(s);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len, count;\n\n    len = strlen(s);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", s[i]))\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 64, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len, count;\n    char *vowels = \"aeiouAEIOU\";\n\n    len = strlen(s);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, s[i]) != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, len, count;\n    char *vowels = \"aeiouAEIOU\";\n\n    len = strlen(s);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, s[i]) != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"abcde\") == 2);\n    assert(func0(\"Alone\") == 3);\n    assert(func0(\"key\") == 2);\n    assert(func0(\"bye\") == 1);\n    assert(func0(\"keY\") == 2);\n    assert(func0(\"bYe\") == 1);\n    assert(func0(\"ACEDY\") == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 65, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x, int n)\n{\n    static char xs[50];\n    int i, len;\n\n    sprintf(xs, \"%d\", x);\n    len = strlen(xs);\n    if (len < n) {\n        for (i = 0; i < len / 2; i++) {\n            char tmp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = tmp;\n        }\n    } else {\n        char ys[50];\n        strcpy(ys, xs + len - n);\n        ys[n] = '\\0';\n        strncat(ys, xs, len - n);\n        strcpy(xs, ys);\n    }\n    return xs;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x, int n)\n{\n    static char xs[50];\n    int i, len;\n\n    sprintf(xs, \"%d\", x);\n    len = strlen(xs);\n    if (len < n) {\n        for (i = 0; i < len / 2; i++) {\n            char tmp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = tmp;\n        }\n    } else {\n        char ys[50];\n        strcpy(ys, xs + len - n);\n        ys[n] = '\\0';\n        strncat(ys, xs, len - n);\n        strcpy(xs, ys);\n    }\n    return xs;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 65, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  int i;\n  int j;\n  int len;\n  char tmp;\n  char buf[50];\n\n  __sprintf_chk (xs, 1, 50, \"%d\", a1);\n  len = strlen(xs);\n  if (a2 > len)\n    {\n      for (i = 0; i < len; i++)\n        {\n          j = len - i - 1;\n          tmp = xs[i];\n          xs[i] = xs[j];\n          xs[j] = tmp;\n        }\n    }\n  else\n    {\n      __strcpy_chk (buf, xs + len - a2, 50);\n      buf[a2] = '\\0';\n      __strncat_chk (buf, xs, len - a2, 50);\n      __strcpy_chk (xs, buf, 50);\n    }\n  return xs;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  int i;\n  int j;\n  int len;\n  char tmp;\n  char buf[50];\n\n  __sprintf_chk (xs, 1, 50, \"%d\", a1);\n  len = strlen(xs);\n  if (a2 > len)\n    {\n      for (i = 0; i < len; i++)\n        {\n          j = len - i - 1;\n          tmp = xs[i];\n          xs[i] = xs[j];\n          xs[j] = tmp;\n        }\n    }\n  else\n    {\n      __strcpy_chk (buf, xs + len - a2, 50);\n      buf[a2] = '\\0';\n      __strncat_chk (buf, xs, len - a2, 50);\n      __strcpy_chk (xs, buf, 50);\n    }\n  return xs;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 65, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  char *xs_ptr = xs;\n  int i;\n  int j;\n  char tmp;\n  char *tmp_ptr;\n  char *tmp2_ptr;\n  char *tmp3_ptr;\n  char *tmp4_ptr;\n  char *tmp5_ptr;\n  char *tmp6_ptr;\n  char *tmp7_ptr;\n  char *tmp8_ptr;\n  char *tmp9_ptr;\n  char *tmp10_ptr;\n  char *tmp11_ptr;\n  char *tmp12_ptr;\n  char *tmp13_ptr;\n  char *tmp14_ptr;\n  char *tmp15_ptr;\n  char *tmp16_ptr;\n  char *tmp17_ptr;\n  char *tmp18_ptr;\n  char *tmp19_ptr;\n  char *tmp20_ptr;\n  char *tmp21_ptr;\n  char *tmp22_ptr;\n  char *tmp23_ptr;\n  char *tmp24_ptr;\n  char *tmp25_ptr;\n  char *tmp26_ptr;\n  char *tmp27_ptr;\n  char *tmp28_ptr;\n  char *tmp29_ptr;\n  char *tmp30_ptr;\n  char *tmp31_ptr;\n  char *tmp32_ptr;\n  char *tmp33_ptr;\n  char *tmp34_ptr;\n  char *tmp35_ptr;\n  char *tmp36_ptr;\n  char *tmp37_ptr;\n  char *tmp38_ptr;\n  char *tmp39_ptr;\n  char *tmp40_ptr;\n  char *tmp41_ptr;\n  char *tmp42_ptr;\n  char *tmp43_ptr;\n  char *tmp44_ptr;\n  char *tmp45_ptr;\n  char *tmp46_ptr;\n  char *tmp47_ptr;\n", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  char *xs_ptr = xs;\n  int i;\n  int j;\n  char tmp;\n  char *tmp_ptr;\n  char *tmp2_ptr;\n  char *tmp3_ptr;\n  char *tmp4_ptr;\n  char *tmp5_ptr;\n  char *tmp6_ptr;\n  char *tmp7_ptr;\n  char *tmp8_ptr;\n  char *tmp9_ptr;\n  char *tmp10_ptr;\n  char *tmp11_ptr;\n  char *tmp12_ptr;\n  char *tmp13_ptr;\n  char *tmp14_ptr;\n  char *tmp15_ptr;\n  char *tmp16_ptr;\n  char *tmp17_ptr;\n  char *tmp18_ptr;\n  char *tmp19_ptr;\n  char *tmp20_ptr;\n  char *tmp21_ptr;\n  char *tmp22_ptr;\n  char *tmp23_ptr;\n  char *tmp24_ptr;\n  char *tmp25_ptr;\n  char *tmp26_ptr;\n  char *tmp27_ptr;\n  char *tmp28_ptr;\n  char *tmp29_ptr;\n  char *tmp30_ptr;\n  char *tmp31_ptr;\n  char *tmp32_ptr;\n  char *tmp33_ptr;\n  char *tmp34_ptr;\n  char *tmp35_ptr;\n  char *tmp36_ptr;\n  char *tmp37_ptr;\n  char *tmp38_ptr;\n  char *tmp39_ptr;\n  char *tmp40_ptr;\n  char *tmp41_ptr;\n  char *tmp42_ptr;\n  char *tmp43_ptr;\n  char *tmp44_ptr;\n  char *tmp45_ptr;\n  char *tmp46_ptr;\n  char *tmp47_ptr;\n\n\n\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 65, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  char *xs_ptr = xs;\n  int i;\n  int j;\n  char tmp;\n  char *tmp_ptr;\n  char *tmp2_ptr;\n  char *tmp3_ptr;\n  char *tmp4_ptr;\n  char *tmp5_ptr;\n  char *tmp6_ptr;\n  char *tmp7_ptr;\n  char *tmp8_ptr;\n  char *tmp9_ptr;\n  char *tmp10_ptr;\n  char *tmp11_ptr;\n  char *tmp12_ptr;\n  char *tmp13_ptr;\n  char *tmp14_ptr;\n  char *tmp15_ptr;\n  char *tmp16_ptr;\n  char *tmp17_ptr;\n  char *tmp18_ptr;\n  char *tmp19_ptr;\n  char *tmp20_ptr;\n  char *tmp21_ptr;\n  char *tmp22_ptr;\n  char *tmp23_ptr;\n  char *tmp24_ptr;\n  char *tmp25_ptr;\n  char *tmp26_ptr;\n  char *tmp27_ptr;\n  char *tmp28_ptr;\n  char *tmp29_ptr;\n  char *tmp30_ptr;\n  char *tmp31_ptr;\n  char *tmp32_ptr;\n  char *tmp33_ptr;\n  char *tmp34_ptr;\n  char *tmp35_ptr;\n  char *tmp36_ptr;\n  char *tmp37_ptr;\n  char *tmp38_ptr;\n  char *tmp39_ptr;\n  char *tmp40_ptr;\n  char *tmp41_ptr;\n  char *tmp42_ptr;\n  char *tmp43_ptr;\n  char *tmp44_ptr;\n  char *tmp45_ptr;\n  char *tmp46_ptr;\n  char *tmp47_ptr;\n", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a1, int a2)\n{\n  char xs[50];\n  char *xs_ptr = xs;\n  int i;\n  int j;\n  char tmp;\n  char *tmp_ptr;\n  char *tmp2_ptr;\n  char *tmp3_ptr;\n  char *tmp4_ptr;\n  char *tmp5_ptr;\n  char *tmp6_ptr;\n  char *tmp7_ptr;\n  char *tmp8_ptr;\n  char *tmp9_ptr;\n  char *tmp10_ptr;\n  char *tmp11_ptr;\n  char *tmp12_ptr;\n  char *tmp13_ptr;\n  char *tmp14_ptr;\n  char *tmp15_ptr;\n  char *tmp16_ptr;\n  char *tmp17_ptr;\n  char *tmp18_ptr;\n  char *tmp19_ptr;\n  char *tmp20_ptr;\n  char *tmp21_ptr;\n  char *tmp22_ptr;\n  char *tmp23_ptr;\n  char *tmp24_ptr;\n  char *tmp25_ptr;\n  char *tmp26_ptr;\n  char *tmp27_ptr;\n  char *tmp28_ptr;\n  char *tmp29_ptr;\n  char *tmp30_ptr;\n  char *tmp31_ptr;\n  char *tmp32_ptr;\n  char *tmp33_ptr;\n  char *tmp34_ptr;\n  char *tmp35_ptr;\n  char *tmp36_ptr;\n  char *tmp37_ptr;\n  char *tmp38_ptr;\n  char *tmp39_ptr;\n  char *tmp40_ptr;\n  char *tmp41_ptr;\n  char *tmp42_ptr;\n  char *tmp43_ptr;\n  char *tmp44_ptr;\n  char *tmp45_ptr;\n  char *tmp46_ptr;\n  char *tmp47_ptr;\n\n\n\n\nint main() {\n    assert(strcmp(func0(100, 2), \"001\") == 0);\n    assert(strcmp(func0(12, 2), \"12\") == 0);\n    assert(strcmp(func0(97, 8), \"79\") == 0);\n    assert(strcmp(func0(12, 1), \"21\") == 0);\n    assert(strcmp(func0(11, 101), \"11\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 66, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n int i, sum = 0;\n\n for (i = 0; str[i]; i++)\n  if (str[i] >= 'A' && str[i] <= 'Z')\n   sum += str[i];\n\n return sum;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n int i, sum = 0;\n\n for (i = 0; str[i]; i++)\n  if (str[i] >= 'A' && str[i] <= 'Z')\n   sum += str[i];\n\n return sum;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 66, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, sum;\n  for (i = 0, sum = 0; s[i] != '\\0'; i++)\n    if (s[i] >= 'A' && s[i] <= 'Z')\n      sum += s[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, sum;\n  for (i = 0, sum = 0; s[i] != '\\0'; i++)\n    if (s[i] >= 'A' && s[i] <= 'Z')\n      sum += s[i];\n  return sum;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 66, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int sum = 0;\n  while (*s) {\n    if (*s >= 'A' && *s <= 'Z')\n      sum += *s;\n    s++;\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int sum = 0;\n  while (*s) {\n    if (*s >= 'A' && *s <= 'Z')\n      sum += *s;\n    s++;\n  }\n  return sum;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 66, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int sum = 0;\n  while (*s) {\n    if (*s >= 'A' && *s <= 'Z')\n      sum += *s;\n    s++;\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int sum = 0;\n  while (*s) {\n    if (*s >= 'A' && *s <= 'Z')\n      sum += *s;\n    s++;\n  }\n  return sum;\n}\n\n\nint main() {\n    assert(func0(\"\") == 0);\n    assert(func0(\"abAB\") == 131);\n    assert(func0(\"abcCd\") == 67);\n    assert(func0(\"helloE\") == 69);\n    assert(func0(\"woArBld\") == 131);\n    assert(func0(\"aAaaaXa\") == 153);\n    assert(func0(\" How are yOu?\") == 151);\n    assert(func0(\"You arE Very Smart\") == 327);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 67, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str, int n)\n{\n    char num1[10] = {0};\n    char num2[10] = {0};\n    int i = 0;\n    int flag = 0;\n    int len = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0800)\n        {\n            if (flag == 0)\n            {\n                num1[len++] = str[i];\n            }\n            else\n            {\n                num2[len++] = str[i];\n            }\n        }\n        else\n        {\n            if (flag == 0 && len > 0)\n            {\n                flag = 1;\n                len = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str, int n)\n{\n    char num1[10] = {0};\n    char num2[10] = {0};\n    int i = 0;\n    int flag = 0;\n    int len = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0800)\n        {\n            if (flag == 0)\n            {\n                num1[len++] = str[i];\n            }\n            else\n            {\n                num2[len++] = str[i];\n            }\n        }\n        else\n        {\n            if (flag == 0 && len > 0)\n            {\n                flag = 1;\n                len = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}\n\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 67, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *map = __ctype_b_loc();\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (map[str[i] & 0xff] & 0x08)\n        {\n            if (flag == 0)\n            {\n                a[j++] = str[i];\n            }\n            else\n            {\n                b[k++] = str[i];\n            }\n        }\n        else\n        {\n            if (flag == 0 && j > 0)\n            {\n                flag = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *str, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *map = __ctype_b_loc();\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (map[str[i] & 0xff] & 0x08)\n        {\n            if (flag == 0)\n            {\n                a[j++] = str[i];\n            }\n            else\n            {\n                b[k++] = str[i];\n            }\n        }\n        else\n        {\n            if (flag == 0 && j > 0)\n            {\n                flag = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}\n\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 67, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    while (*s)\n    {\n        if (ctype_b[((unsigned char)(*s)) + 1] & (1 << 3))\n        {\n            if (flag)\n            {\n                b[j++] = *s;\n            }\n            else\n            {\n                a[i++] = *s;\n            }\n        }\n        else\n        {\n            if (flag)\n            {\n                continue;\n            }\n            if (i > 0)\n            {\n                flag = 1;\n                i = 0;\n            }\n        }\n        s++;\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    while (*s)\n    {\n        if (ctype_b[((unsigned char)(*s)) + 1] & (1 << 3))\n        {\n            if (flag)\n            {\n                b[j++] = *s;\n            }\n            else\n            {\n                a[i++] = *s;\n            }\n        }\n        else\n        {\n            if (flag)\n            {\n                continue;\n            }\n            if (i > 0)\n            {\n                flag = 1;\n                i = 0;\n            }\n        }\n        s++;\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}\n\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 67, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *wc = __ctype_b_loc();\n    while (*s)\n    {\n        if (wc[0][(unsigned char)(*s)] & 0x08)\n        {\n            if (flag)\n            {\n                b[j++] = *s;\n            }\n            else\n            {\n                a[i++] = *s;\n            }\n        }\n        else\n        {\n            if (flag)\n            {\n                flag = 0;\n                i = 0;\n            }\n            else\n            {\n                if (i > 0)\n                {\n                    flag = 1;\n                }\n            }\n        }\n        s++;\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s, int n)\n{\n    char a[16] = {0};\n    char b[16] = {0};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    const unsigned short *wc = __ctype_b_loc();\n    while (*s)\n    {\n        if (wc[0][(unsigned char)(*s)] & 0x08)\n        {\n            if (flag)\n            {\n                b[j++] = *s;\n            }\n            else\n            {\n                a[i++] = *s;\n            }\n        }\n        else\n        {\n            if (flag)\n            {\n                flag = 0;\n                i = 0;\n            }\n            else\n            {\n                if (i > 0)\n                {\n                    flag = 1;\n                }\n            }\n        }\n        s++;\n    }\n    return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}\n\n\nint main() {\n    assert(func0(\"5 apples and 6 oranges\", 19) == 8);\n    assert(func0(\"5 apples and 6 oranges\", 21) == 10);\n    assert(func0(\"0 apples and 1 oranges\", 3) == 2);\n    assert(func0(\"1 apples and 0 oranges\", 3) == 2);\n    assert(func0(\"2 apples and 3 oranges\", 100) == 95);\n    assert(func0(\"2 apples and 3 oranges\", 5) == 0);\n    assert(func0(\"1 apples and 100 oranges\", 120) == 19);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 68, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct pair func0(int *a, int n, struct pair *p)\n{\n    int i, min = 0x7fffffff, pos = -1;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0 && (a[i] < min || pos == -1)) {\n            min = a[i];\n            pos = i;\n        }\n    if (pos == -1)\n        p = NULL;\n    else {\n        p->first = min;\n        p->second = pos;\n    }\n    return *p;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct pair func0(int *a, int n, struct pair *p)\n{\n    int i, min = 0x7fffffff, pos = -1;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0 && (a[i] < min || pos == -1)) {\n            min = a[i];\n            pos = i;\n        }\n    if (pos == -1)\n        p = NULL;\n    else {\n        p->first = min;\n        p->second = pos;\n    }\n    return *p;\n}\n\n\n\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 68, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* nums, int numsSize, int* returnSize) {\n    int i, min = -1, max = 2147483647;\n    for (i = 0; i < numsSize; i++) {\n        if (nums[i] % 2 == 0) {\n            if (min == -1 || nums[i] < nums[min]) {\n                min = i;\n            }\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n    }\n    if (min == -1) {\n        return NULL;\n    }\n    returnSize[0] = min;\n    returnSize[1] = max;\n    return returnSize;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* nums, int numsSize, int* returnSize) {\n    int i, min = -1, max = 2147483647;\n    for (i = 0; i < numsSize; i++) {\n        if (nums[i] % 2 == 0) {\n            if (min == -1 || nums[i] < nums[min]) {\n                min = i;\n            }\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n    }\n    if (min == -1) {\n        return NULL;\n    }\n    returnSize[0] = min;\n    returnSize[1] = max;\n    return returnSize;\n}\n\n\n\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 68, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n, int *b)\n{\n  int i, min, pos;\n\n  min = -1;\n  pos = -1;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 0) {\n      if (min == -1 || a[i] < min) {\n        min = a[i];\n        pos = i;\n      }\n    }\n  }\n  if (pos == -1)\n    return 0;\n  b[0] = min;\n  b[1] = pos;\n  return b;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n, int *b)\n{\n  int i, min, pos;\n\n  min = -1;\n  pos = -1;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 0) {\n      if (min == -1 || a[i] < min) {\n        min = a[i];\n        pos = i;\n      }\n    }\n  }\n  if (pos == -1)\n    return 0;\n  b[0] = min;\n  b[1] = pos;\n  return b;\n}\n\n\n\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 68, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n, int *b)\n{\n  int i, min, pos;\n\n  min = -1;\n  pos = -1;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 0) {\n      if (min == -1 || a[i] < min) {\n        min = a[i];\n        pos = i;\n      }\n    }\n  }\n  if (pos == -1)\n    return 0;\n  b[0] = min;\n  b[1] = pos;\n  return b;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *a, int n, int *b)\n{\n  int i, min, pos;\n\n  min = -1;\n  pos = -1;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 0) {\n      if (min == -1 || a[i] < min) {\n        min = a[i];\n        pos = i;\n      }\n    }\n  }\n  if (pos == -1)\n    return 0;\n  b[0] = min;\n  b[1] = pos;\n  return b;\n}\n\n\n\n\nint issame(const int *a, const int *b, int a_length, int b_length) {\n    if (a_length != b_length) return 0;\n    for (int i = 0; i < a_length; ++i) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int output[2];\n    int *result;\n    \n    int test1[] = {4, 2, 3};\n    int expect1[] = {2, 1};\n    result = func0(test1, 3, output);\n    assert(issame(result, expect1, 2, 2));\n\n    int test2[] = {1, 2, 3};\n    int expect2[] = {2, 1};\n    result = func0(test2, 3, output);\n    assert(issame(result, expect2, 2, 2));\n\n    int test3[] = {};\n    result = func0(test3, 0, output);\n    assert(result == NULL);\n\n    int test4[] = {5, 0, 3, 0, 4, 2};\n    int expect4[] = {0, 1};\n    result = func0(test4, 6, output);\n    assert(issame(result, expect4, 2, 2));\n\n    int test5[] = {1, 2, 3, 0, 5, 3};\n    int expect5[] = {0, 3};\n    result = func0(test5, 6, output);\n    assert(issame(result, expect5, 2, 2));\n\n    int test6[] = {5, 4, 8, 4, 8};\n    int expect6[] = {4, 1};\n    result = func0(test6, 5, output);\n    assert(issame(result, expect6, 2, 2));\n\n    int test7[] = {7, 6, 7, 1};\n    int expect7[] = {6, 1};\n    result = func0(test7, 4, output);\n    assert(issame(result, expect7, 2, 2));\n\n    int test8[] = {7, 9, 7, 1};\n    result = func0(test8, 4, output);\n    assert(result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 69, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *arr, int n)\n{\n    int *count = calloc(n + 1, sizeof(int));\n    int max = -1;\n    for (int i = 0; i < n; i++) {\n        count[arr[i]]++;\n        if (count[arr[i]] >= arr[i] && arr[i] > max)\n            max = arr[i];\n    }\n    free(count);\n    return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *arr, int n)\n{\n    int *count = calloc(n + 1, sizeof(int));\n    int max = -1;\n    for (int i = 0; i < n; i++) {\n        count[arr[i]]++;\n        if (count[arr[i]] >= arr[i] && arr[i] > max)\n            max = arr[i];\n    }\n    free(count);\n    return max;\n}\n\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 69, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int *count = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        int x = A[i];\n        count[x]++;\n        if (count[x] >= x && x > max)\n            max = x;\n    }\n    free(count);\n    return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int *count = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        int x = A[i];\n        count[x]++;\n        if (count[x] >= x && x > max)\n            max = x;\n    }\n    free(count);\n    return max;\n}\n\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 69, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int i, max = -1, *count;\n\n    count = (int *) calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++count[A[i]] >= A[i] && A[i] > max)\n            max = A[i];\n    }\n    free(count);\n    return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int i, max = -1, *count;\n\n    count = (int *) calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++count[A[i]] >= A[i] && A[i] > max)\n            max = A[i];\n    }\n    free(count);\n    return max;\n}\n\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 69, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int i, max = -1, *count;\n\n    count = (int *) calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++count[A[i]] >= A[i])\n            if (A[i] > max)\n                max = A[i];\n    }\n    free(count);\n    return max;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *A, int n)\n{\n    int i, max = -1, *count;\n\n    count = (int *) calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++count[A[i]] >= A[i])\n            if (A[i] > max)\n                max = A[i];\n    }\n    free(count);\n    return max;\n}\n\n\nint main() {\n    int arr1[] = {5, 5, 5, 5, 1};\n    int arr2[] = {4, 1, 4, 1, 4, 4};\n    int arr3[] = {3, 3};\n    int arr4[] = {8, 8, 8, 8, 8, 8, 8, 8};\n    int arr5[] = {2, 3, 3, 2, 2};\n    int arr6[] = {2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1};\n    int arr7[] = {3, 2, 8, 2};\n    int arr8[] = {6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10};\n    int arr9[] = {8, 8, 3, 6, 5, 6, 4};\n    int arr10[] = {6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9};\n    int arr11[] = {1, 9, 10, 1, 3};\n    int arr12[] = {6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10};\n    int arr13[] = {1};\n    int arr14[] = {8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5};\n    int arr15[] = {2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10};\n    int arr16[] = {1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3};\n    int arr17[] = {9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4};\n    int arr18[] = {2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7};\n    int arr19[] = {9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1};\n    int arr20[] = {5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8};\n    int arr21[] = {10};\n    int arr22[] = {9, 7, 7, 2, 4,7, 2, 10, 9, 7, 5, 7, 2};\n    int arr23[] = {5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8};\n    int arr24[] = {7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6};\n    int arr25[] = {3, 10, 10, 9, 2};\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 70, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n int i, j, t;\n\n for (i = 0; i < n - 1; i++)\n  for (j = i + 1; j < n; j++)\n   if (a[i] > a[j]) {\n    t = a[i];\n    a[i] = a[j];\n    a[j] = t;\n   }\n\n i = 0;\n j = n - 1;\n for (t = 0; i <= j; t++) {\n  if (i == j)\n   b[t] = a[i++];\n  else {\n   b[t] = a[i++];\n   b[++t] = a[j--];\n  }\n }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n int i, j, t;\n\n for (i = 0; i < n - 1; i++)\n  for (j = i + 1; j < n; j++)\n   if (a[i] > a[j]) {\n    t = a[i];\n    a[i] = a[j];\n    a[j] = t;\n   }\n\n i = 0;\n j = n - 1;\n for (t = 0; i <= j; t++) {\n  if (i == j)\n   b[t] = a[i++];\n  else {\n   b[t] = a[i++];\n   b[++t] = a[j--];\n  }\n }\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 70, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n\n  for (i = 0; i <= n - 1 - i; i++) {\n    b[2 * i] = a[i];\n    b[2 * i + 1] = a[n - 1 - i];\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n\n  for (i = 0; i <= n - 1 - i; i++) {\n    b[2 * i] = a[i];\n    b[2 * i + 1] = a[n - 1 - i];\n  }\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 70, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n\n  for (i = 0, j = n - 1; i <= j; i++, j--) {\n    b[i] = a[i];\n    if (i != j)\n      b[i + 1] = a[j];\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n\n  for (i = 0, j = n - 1; i <= j; i++, j--) {\n    b[i] = a[i];\n    if (i != j)\n      b[i + 1] = a[j];\n  }\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 70, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0; i < n; i++)\n    b[i] = a[i];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0; i < n; i++)\n    b[i] = a[i];\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int a1[] = {1, 2, 3, 4};\n    int e1[] = {1, 4, 2, 3};\n    int out1[4];\n    func0(a1, 4, out1);\n    assert(issame(e1, out1, 4));\n\n    int a2[] = {5, 6, 7, 8, 9};\n    int e2[] = {5, 9, 6, 8, 7};\n    int out2[5];\n    func0(a2, 5, out2);\n    assert(issame(e2, out2, 5));\n\n    int a3[] = {1, 2, 3, 4, 5};\n    int e3[] = {1, 5, 2, 4, 3};\n    int out3[5];\n    func0(a3, 5, out3);\n    assert(issame(e3, out3, 5));\n\n    int a4[] = {5, 6, 7, 8, 9, 1};\n    int e4[] = {1, 9, 5, 8, 6, 7};\n    int out4[6];\n    func0(a4, 6, out4);\n    assert(issame(e4, out4, 6));\n\n    int a5[] = {5, 5, 5, 5};\n    int e5[] = {5, 5, 5, 5};\n    int out5[4];\n    func0(a5, 4, out5);\n    assert(issame(e5, out5, 4));\n\n    int a6[] = {};\n    int e6[] = {};\n    int out6[0];\n    func0(a6, 0, out6);\n    assert(issame(e6, out6, 0));\n\n    int a7[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int e7[] = {1, 8, 2, 7, 3, 6, 4, 5};\n    int out7[8];\n    func0(a7, 8, out7);\n    assert(issame(e7, out7, 8));\n\n    int a8[] = {0, 2, 2, 2, 5, 5, -5, -5};\n    int e8[] = {-5, 5, -5, 5, 0, 2, 2, 2};\n    int out8[8];\n    func0(a8, 8, out8);\n    assert(issame(e8, out8, 8));\n\n    int a9[] = {111111};\n    int e9[] = {111111};\n    int out9[1];\n    func0(a9, 1, out9);\n    assert(issame(e9, out9, 1));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 71, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, p;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return 0.0f;\n\n    p = (a + b + c) / 2.0f;\n    s = sqrtf(p * (p - a) * (p - b) * (p - c));\n\n    return roundf(s * 100.0f) / 100.0f;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, p;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return 0.0f;\n\n    p = (a + b + c) / 2.0f;\n    s = sqrtf(p * (p - a) * (p - b) * (p - c));\n\n    return roundf(s * 100.0f) / 100.0f;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 71, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1.0;\n\n    s = (a + b + c) / 2.0;\n    t = s * (s - a) * (s - b) * (s - c);\n    if (t < 0.0)\n        t = sqrtf(t);\n    else\n        t = 0.0;\n\n    return roundf(4.0 * t) / 4.0;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1.0;\n\n    s = (a + b + c) / 2.0;\n    t = s * (s - a) * (s - b) * (s - c);\n    if (t < 0.0)\n        t = sqrtf(t);\n    else\n        t = 0.0;\n\n    return roundf(4.0 * t) / 4.0;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 71, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1.0;\n\n    s = (a + b + c) / 2.0;\n    t = s * (s - a) * (s - b) * (s - c);\n    if (t < 0.0)\n        t = sqrtf(t);\n    else\n        t = 0.0;\n\n    return roundf(4.0 * t) / 4.0;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1.0;\n\n    s = (a + b + c) / 2.0;\n    t = s * (s - a) * (s - b) * (s - c);\n    if (t < 0.0)\n        t = sqrtf(t);\n    else\n        t = 0.0;\n\n    return roundf(4.0 * t) / 4.0;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 71, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n\n    s = (a + b + c) / 2;\n    t = s * (s - a) * (s - b) * (s - c);\n    return roundf(sqrtf(t) * 1000000) / 1000000;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nfloat func0(float a, float b, float c)\n{\n    float s, t;\n\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n\n    s = (a + b + c) / 2;\n    t = s * (s - a) * (s - b) * (s - c);\n    return roundf(sqrtf(t) * 1000000) / 1000000;\n}\n\n\n\n\nint main() {\n    assert(fabs(func0(3, 4, 5) - 6.00) < 0.01);\n    assert(fabs(func0(1, 2, 10) + 1) < 0.01);\n    assert(fabs(func0(4, 8, 5) - 8.18) < 0.01);\n    assert(fabs(func0(2, 2, 2) - 1.73) < 0.01);\n    assert(fabs(func0(1, 2, 3) + 1) < 0.01);\n    assert(fabs(func0(10, 5, 7) - 16.25) < 0.01);\n    assert(fabs(func0(2, 6, 3) + 1) < 0.01);\n    assert(fabs(func0(1, 1, 1) - 0.43) < 0.01);\n    assert(fabs(func0(2, 2, 10) + 1) < 0.01);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 72, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (a[i] != a[n - 1 - i])\n            return 0;\n        sum += a[i] + a[n - 1 - i];\n    }\n    if (n % 2 == 1)\n        sum += a[n / 2];\n    return sum <= k;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (a[i] != a[n - 1 - i])\n            return 0;\n        sum += a[i] + a[n - 1 - i];\n    }\n    if (n % 2 == 1)\n        sum += a[n / 2];\n    return sum <= k;\n}\n\n\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 72, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\n            return false;\n        sum += arr[i] + arr[n - i - 1];\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\n            return false;\n        sum += arr[i] + arr[n - i - 1];\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}\n\n\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 72, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}\n\n\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 72, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n\nbool func0(int *arr, int n, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (n % 2 == 1)\n        sum += arr[n / 2];\n    return sum <= k;\n}\n\n\n\nint main() {\n    int test1[] = {3, 2, 3};\n    assert(func0(test1, 3, 9) == true);\n\n    int test2[] = {1, 2};\n    assert(func0(test2, 2, 5) == false);\n\n    int test3[] = {3};\n    assert(func0(test3, 1, 5) == true);\n\n    int test4[] = {3, 2, 3};\n    assert(func0(test4, 3, 1) == false);\n\n    int test5[] = {1, 2, 3};\n    assert(func0(test5, 3, 6) == false);\n\n    int test6[] = {5};\n    assert(func0(test6, 1, 5) == true);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 73, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, count = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[i] != a[n-1-i])\n      count++;\n  return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, count = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[i] != a[n-1-i])\n      count++;\n  return count;\n}\n\n\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 73, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s = 0;\n  for (i = 0; i < n/2; i++)\n    s += a[i] != a[n-i-1];\n  return s;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s = 0;\n  for (i = 0; i < n/2; i++)\n    s += a[i] != a[n-i-1];\n  return s;\n}\n\n\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 73, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  i = j = k = l = m = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[i] != a[n-1-i])\n      j++;\n  return j;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  i = j = k = l = m = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[i] != a[n-1-i])\n      j++;\n  return j;\n}\n\n\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 73, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int c = 0;\n  for (i = 0; i < n / 2; i++)\n    if (a[i] != a[n - i - 1])\n      c++;\n  return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int c = 0;\n  for (i = 0; i < n / 2; i++)\n    if (a[i] != a[n - i - 1])\n      c++;\n  return c;\n}\n\n\n\nint main() {\n    int test1[] = {1, 2, 3, 5, 4, 7, 9, 6};\n    assert(func0(test1, 8) == 4);\n\n    int test2[] = {1, 2, 3, 4, 3, 2, 2};\n    assert(func0(test2, 7) == 1);\n\n    int test3[] = {1, 4, 2};\n    assert(func0(test3, 3) == 1);\n\n    int test4[] = {1, 4, 4, 2};\n    assert(func0(test4, 4) == 1);\n\n    int test5[] = {1, 2, 3, 2, 1};\n    assert(func0(test5, 5) == 0);\n\n    int test6[] = {3, 1, 1, 3};\n    assert(func0(test6, 4) == 0);\n\n    int test7[] = {1};\n    assert(func0(test7, 1) == 0);\n\n    int test8[] = {0, 1};\n    assert(func0(test8, 2) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 74, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **arg0, int arg1, char **arg2, int arg3) {\n    int i;\n    int len0 = 0;\n    int len1 = 0;\n    for (i = 0; i < arg1; i++) {\n        len0 += strlen(arg0[i]);\n    }\n    for (i = 0; i < arg3; i++) {\n        len1 += strlen(arg2[i]);\n    }\n    if (len0 < len1) {\n        return arg0;\n    } else if (len0 > len1) {\n        return arg2;\n    } else {\n        return arg0;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **arg0, int arg1, char **arg2, int arg3) {\n    int i;\n    int len0 = 0;\n    int len1 = 0;\n    for (i = 0; i < arg1; i++) {\n        len0 += strlen(arg0[i]);\n    }\n    for (i = 0; i < arg3; i++) {\n        len1 += strlen(arg2[i]);\n    }\n    if (len0 < len1) {\n        return arg0;\n    } else if (len0 > len1) {\n        return arg2;\n    } else {\n        return arg0;\n    }\n}\nint issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n\n\n\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 74, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **a, int n, char **b, int m)\n{\n    int i, j, la, lb;\n\n    la = 0;\n    for (i = 0; i < n; i++)\n        la += strlen(a[i]);\n\n    lb = 0;\n    for (i = 0; i < m; i++)\n        lb += strlen(b[i]);\n\n    if (la < lb)\n        return a;\n    else\n        return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **a, int n, char **b, int m)\n{\n    int i, j, la, lb;\n\n    la = 0;\n    for (i = 0; i < n; i++)\n        la += strlen(a[i]);\n\n    lb = 0;\n    for (i = 0; i < m; i++)\n        lb += strlen(b[i]);\n\n    if (la < lb)\n        return a;\n    else\n        return b;\n}\nint issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n\n\n\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 74, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **a, int na, char **b, int nb)\n{\n    int i, la = 0, lb = 0;\n\n    for (i = 0; i < na; i++)\n        la += strlen(a[i]);\n\n    for (i = 0; i < nb; i++)\n        lb += strlen(b[i]);\n\n    return la < lb ? b : a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **a, int na, char **b, int nb)\n{\n    int i, la = 0, lb = 0;\n\n    for (i = 0; i < na; i++)\n        la += strlen(a[i]);\n\n    for (i = 0; i < nb; i++)\n        lb += strlen(b[i]);\n\n    return la < lb ? b : a;\n}\nint issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n\n\n\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 74, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **p, int n, char **q, int m)\n{\n    int i, len1 = 0, len2 = 0;\n\n    for (i = 0; i < n; i++)\n        len1 += strlen(p[i]);\n    for (i = 0; i < m; i++)\n        len2 += strlen(q[i]);\n\n    return len1 < len2 ? q : p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **p, int n, char **q, int m)\n{\n    int i, len1 = 0, len2 = 0;\n\n    for (i = 0; i < n; i++)\n        len1 += strlen(p[i]);\n    for (i = 0; i < m; i++)\n        len2 += strlen(q[i]);\n\n    return len1 < len2 ? q : p;\n}\nint issame(char** arr1, int n1, char** arr2, int n2){\n\n  int i;\n  if(n1 != n2) return 0;\n\n  for(i=0; i<n1; i++){\n    if(strcmp(arr1[i], arr2[i]) != 0) return 0;\n  }\n\n  return 1;\n\n}\n\n// Main function\n\n\n\n\nint main(){\n\n  char* arr1[] = {};\n  char* arr2[] = {};\n  int n1 = 0, n2 = 0;\n  issame(func0(arr1, n1, arr2, n2), n1, arr2, n2);\n\n  char* arr3[] = {\"hi\", \"admin\"};\n  char* arr4[] = {\"hi\", \"hi\"};\n  n1 = 2; n2 = 2;\n  issame(func0(arr3, n1, arr4, n2), n1, arr4, n2);\n\n  char* arr5[] = {\"hi\", \"admin\"};\n  char* arr6[] = {\"hi\", \"hi\", \"admin\", \"project\"};\n  n1 = 2; n2 = 4;\n  issame(func0(arr5, n1, arr6, n2), n1, arr5, n1);\n\n  // Other test cases\n\n  return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 75, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n) {\n  int i, c;\n  if (n < 2) return 0;\n  for (c = 0, i = 2; i * i <= n; i++)\n    for (; n % i == 0; n /= i)\n      c++;\n  if (n > 1) c++;\n  return c == 3;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n) {\n  int i, c;\n  if (n < 2) return 0;\n  for (c = 0, i = 2; i * i <= n; i++)\n    for (; n % i == 0; n /= i)\n      c++;\n  if (n > 1) c++;\n  return c == 3;\n}\n\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 75, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nbool func0(int n) {\n    int count = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nbool func0(int n) {\n    int count = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}\n\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 75, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, c;\n\n  if (n <= 1)\n    return 0;\n\n  c = 0;\n  for (i = 2; i * i <= n; i++)\n    while (n % i == 0) {\n      c++;\n      n /= i;\n    }\n\n  if (n > 1)\n    c++;\n\n  return c;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n  int i, c;\n\n  if (n <= 1)\n    return 0;\n\n  c = 0;\n  for (i = 2; i * i <= n; i++)\n    while (n % i == 0) {\n      c++;\n      n /= i;\n    }\n\n  if (n > 1)\n    c++;\n\n  return c;\n}\n\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 75, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nbool func0(int n)\n{\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        cnt++;\n    return cnt == 3;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nbool func0(int n)\n{\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        cnt++;\n    return cnt == 3;\n}\n\n\nint main() {\n    assert(func0(5) == 0);\n    assert(func0(30) == 1);\n    assert(func0(8) == 1); // 8 = 2 * 2 * 2\n    assert(func0(10) == 0);\n    assert(func0(125) == 1); // 125 = 5 * 5 * 5 (three times the same prime)\n    assert(func0(3 * 5 * 7) == 1);\n    assert(func0(3 * 6 * 7) == 0);\n    assert(func0(9 * 9 * 9) == 0);\n    assert(func0(11 * 9 * 9) == 0);\n    assert(func0(11 * 13 * 7) == 1);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 76, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y)\n{\n  int z = 1;\n  int i;\n  for (i = 0; i < 100; i++) {\n    if (z > x)\n      return 0;\n    if (z == x)\n      return 1;\n    z = z * y;\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y)\n{\n  int z = 1;\n  int i;\n  for (i = 0; i < 100; i++) {\n    if (z > x)\n      return 0;\n    if (z == x)\n      return 1;\n    z = z * y;\n  }\n  return 0;\n}\n\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 76, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int k)\n{\n    int i;\n    int p;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    p = 1;\n    for (i = 1; i <= 99; i++) {\n        p *= k;\n        if (p > n)\n            break;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int k)\n{\n    int i;\n    int p;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    p = 1;\n    for (i = 1; i <= 99; i++) {\n        p *= k;\n        if (p > n)\n            break;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}\n\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 76, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int b)\n{\n    int i, p;\n\n    for (i = 0, p = 1; i < 100 && p <= n; i++) {\n        p *= b;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int b)\n{\n    int i, p;\n\n    for (i = 0, p = 1; i < 100 && p <= n; i++) {\n        p *= b;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}\n\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 76, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int k)\n{\n    int i, p;\n\n    for (i = 0, p = 1; i < 100 && p <= n; i++) {\n        p *= k;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n, int k)\n{\n    int i, p;\n\n    for (i = 0, p = 1; i < 100 && p <= n; i++) {\n        p *= k;\n        if (p == n)\n            return 1;\n    }\n    return 0;\n}\n\n\nint main() {\n    assert(func0(1, 4) == 1);\n    assert(func0(2, 2) == 1);\n    assert(func0(8, 2) == 1);\n    assert(func0(3, 2) == 0);\n    assert(func0(3, 1) == 0);\n    assert(func0(5, 3) == 0);\n    assert(func0(16, 2) == 1);\n    assert(func0(143214, 16) == 0);\n    assert(func0(4, 2) == 1);\n    assert(func0(9, 3) == 1);\n    assert(func0(16, 4) == 1);\n    assert(func0(24, 2) == 0);\n    assert(func0(128, 4) == 0);\n    assert(func0(12, 6) == 0);\n    assert(func0(1, 1) == 1);\n    assert(func0(1, 12) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 77, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = 0;\n  while (y * y * y < abs(x)) {\n    if (y * y * y == abs(x)) {\n      return 1;\n    }\n    y++;\n  }\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = 0;\n  while (y * y * y < abs(x)) {\n    if (y * y * y == abs(x)) {\n      return 1;\n    }\n    y++;\n  }\n  return 0;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 77, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int m;\n\n    m = n < 0 ? -n : n;\n    for (i = 1; i * i * i <= m; i++)\n        if (i * i * i == m)\n            return 1;\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i;\n    int m;\n\n    m = n < 0 ? -n : n;\n    for (i = 1; i * i * i <= m; i++)\n        if (i * i * i == m)\n            return 1;\n    return 0;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 77, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = x < 0 ? -x : x;\n  int z = 1;\n  while (y != 0) {\n    if (z * z * z > y) {\n      return 0;\n    }\n    z++;\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = x < 0 ? -x : x;\n  int z = 1;\n  while (y != 0) {\n    if (z * z * z > y) {\n      return 0;\n    }\n    z++;\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 77, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = x < 0 ? -x : x;\n  int z = 1;\n  while (y != 0) {\n    if (z * z * z > y) {\n      return 0;\n    }\n    z++;\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int x) {\n  int y = x < 0 ? -x : x;\n  int z = 1;\n  while (y != 0) {\n    if (z * z * z > y) {\n      return 0;\n    }\n    z++;\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 0);\n    assert(func0(-1) == 1);\n    assert(func0(64) == 1);\n    assert(func0(180) == 0);\n    assert(func0(1000) == 1);\n    assert(func0(0) == 1);\n    assert(func0(1729) == 0);\n\n    printf(\"All tests passed.\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 78, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt;\n    for (i = cnt = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            cnt++;\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt;\n    for (i = cnt = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            cnt++;\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 78, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            cnt++;\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            cnt++;\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 78, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++)\n        if (strchr(\"2357BD\", *s))\n            n++;\n    return n;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n;\n    char *p;\n\n    n = 0;\n    p = s + strlen(s);\n    for (i = 0; s != p; s++)\n        if (strchr(\"2357BD\", *s))\n            n++;\n    return n;\n}\n\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 78, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n;\n    for (i = n = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            n++;\n    return n;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, n;\n    for (i = n = 0; i < strlen(s); i++)\n        if (strchr(\"2357BD\", s[i]))\n            n++;\n    return n;\n}\n\n\nint main() {\n    assert(func0(\"AB\") == 1);\n    assert(func0(\"1077E\") == 2);\n    assert(func0(\"ABED1A33\") == 4);\n    assert(func0(\"2020\") == 2);\n    assert(func0(\"123456789ABCDEF0\") == 6);\n    assert(func0(\"112233445566778899AABBCCDDEEFF00\") == 12);\n    assert(func0(\"\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 79, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (x == 0) {\n        s[62] = '0';\n        i = 61;\n    } else {\n        while (x > 0) {\n            s[i] = '0' + (x % 2);\n            x /= 2;\n            i--;\n        }\n    }\n    s[i] = 'b';\n    s[i - 1] = 'd';\n    char *t = malloc(64 - i + 1);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    t[strlen(t) + 1] = '\\0';\n    t[strlen(t)] = 'd';\n    t[strlen(t) + 1] = 'b';\n    t[strlen(t) + 2] = '\\0';\n    free(s);\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (x == 0) {\n        s[62] = '0';\n        i = 61;\n    } else {\n        while (x > 0) {\n            s[i] = '0' + (x % 2);\n            x /= 2;\n            i--;\n        }\n    }\n    s[i] = 'b';\n    s[i - 1] = 'd';\n    char *t = malloc(64 - i + 1);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    t[strlen(t) + 1] = '\\0';\n    t[strlen(t)] = 'd';\n    t[strlen(t) + 1] = 'b';\n    t[strlen(t) + 2] = '\\0';\n    free(s);\n    return t;\n}\n\n\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 79, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    while (n > 0) {\n        s[i--] = '0' + n % 2;\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i + 1);\n    t[strlen(t)] = 'b';\n    t[strlen(t) + 1] = '\\0';\n    free(s);\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    while (n > 0) {\n        s[i--] = '0' + n % 2;\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i + 1);\n    t[strlen(t)] = 'b';\n    t[strlen(t) + 1] = '\\0';\n    free(s);\n    return t;\n}\n\n\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 79, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n  char *s = malloc(64);\n  if (!s)\n    return NULL;\n  s[63] = 0;\n  int i = 63;\n  if (x == 0)\n    s[--i] = '0';\n  while (x)\n  {\n    s[--i] = (x & 1) + '0';\n    x >>= 1;\n  }\n  s[--i] = 'd';\n  s[--i] = 'b';\n  char *t = malloc(64 - i);\n  if (t)\n  {\n    char *p = stpcpy(t, s + i);\n    p[0] = 'd';\n    p[1] = 'b';\n    p[2] = 0;\n  }\n  free(s);\n  return t;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n  char *s = malloc(64);\n  if (!s)\n    return NULL;\n  s[63] = 0;\n  int i = 63;\n  if (x == 0)\n    s[--i] = '0';\n  while (x)\n  {\n    s[--i] = (x & 1) + '0';\n    x >>= 1;\n  }\n  s[--i] = 'd';\n  s[--i] = 'b';\n  char *t = malloc(64 - i);\n  if (t)\n  {\n    char *p = stpcpy(t, s + i);\n    p[0] = 'd';\n    p[1] = 'b';\n    p[2] = 0;\n  }\n  free(s);\n  return t;\n}\n\n\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 79, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n  char *s = malloc(64);\n  if (!s)\n    return NULL;\n  s[63] = 0;\n  int i = 63;\n  if (x == 0)\n    s[--i] = '0';\n  while (x)\n  {\n    s[--i] = (x & 1) + '0';\n    x >>= 1;\n  }\n  s[--i] = 'd';\n  s[--i] = 'b';\n  char *t = malloc(64 - i);\n  if (t)\n  {\n    char *p = stpcpy(t, s + i);\n    p[0] = 'd';\n    p[1] = 'b';\n    p[2] = 0;\n  }\n  free(s);\n  return t;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int x)\n{\n  char *s = malloc(64);\n  if (!s)\n    return NULL;\n  s[63] = 0;\n  int i = 63;\n  if (x == 0)\n    s[--i] = '0';\n  while (x)\n  {\n    s[--i] = (x & 1) + '0';\n    x >>= 1;\n  }\n  s[--i] = 'd';\n  s[--i] = 'b';\n  char *t = malloc(64 - i);\n  if (t)\n  {\n    char *p = stpcpy(t, s + i);\n    p[0] = 'd';\n    p[1] = 'b';\n    p[2] = 0;\n  }\n  free(s);\n  return t;\n}\n\n\n\nint main() {\n    char* binary;\n\n    binary = func0(0);\n    assert(strcmp(binary, \"db0db\") == 0);\n    free(binary);\n\n    binary = func0(32);\n    assert(strcmp(binary, \"db100000db\") == 0);\n    free(binary);\n\n    binary = func0(103);\n    assert(strcmp(binary, \"db1100111db\") == 0);\n    free(binary);\n\n    binary = func0(15);\n    assert(strcmp(binary, \"db1111db\") == 0);\n    free(binary);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 80, "type": "O0", "ground_truth_c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}", "model_prediction": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) < 3)\n        return 0;\n\n    for (int i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n\n    return 1;\n}", "executed_test": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) < 3)\n        return 0;\n\n    for (int i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n\n    return 1;\n}\n\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 80, "type": "O1", "ground_truth_c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}", "model_prediction": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *a) {\n  int i;\n  for (i = 0; i < strlen(a); i++) {\n    if (a[i] == a[i + 1] || a[i] == a[i + 2]) {\n      return 0;\n    }\n  }\n  return 1;\n}", "executed_test": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *a) {\n  int i;\n  for (i = 0; i < strlen(a); i++) {\n    if (a[i] == a[i + 1] || a[i] == a[i + 2]) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 80, "type": "O2", "ground_truth_c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}", "model_prediction": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  size_t len = strlen(s);\n  size_t i;\n\n  if (len < 3)\n    return 0;\n\n  for (i = 0; i < len - 2; i++)\n    if (s[i] != s[i + 1] && s[i] != s[i + 2])\n      return 0;\n\n  return 1;\n}", "executed_test": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  size_t len = strlen(s);\n  size_t i;\n\n  if (len < 3)\n    return 0;\n\n  for (i = 0; i < len - 2; i++)\n    if (s[i] != s[i + 1] && s[i] != s[i + 2])\n      return 0;\n\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 80, "type": "O3", "ground_truth_c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}", "model_prediction": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  size_t len = strlen(s);\n  if (len < 3)\n    return 0;\n  for (size_t i = 0; i < len - 2; i++)\n    if (s[i] != s[i + 1] && s[i] != s[i + 2])\n      return 0;\n  return 1;\n}", "executed_test": "#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  size_t len = strlen(s);\n  if (len < 3)\n    return 0;\n  for (size_t i = 0; i < len - 2; i++)\n    if (s[i] != s[i + 1] && s[i] != s[i + 2])\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"a\") == false);\n    assert(func0(\"aa\") == false);\n    assert(func0(\"abcd\") == true);\n    assert(func0(\"aabb\") == false);\n    assert(func0(\"adb\") == true);\n    assert(func0(\"xyy\") == false);\n    assert(func0(\"iopaxpoi\") == true);\n    assert(func0(\"iopaxioi\") == false);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 81, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar **func0(float *a, int n)\n{\n    char **b = malloc(n * sizeof(char *));\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] < 1.0)\n            b[i] = \"a\";\n        else if (a[i] < 2.0)\n            b[i] = \"b\";\n        else if (a[i] < 3.0)\n            b[i] = \"c\";\n        else if (a[i] < 4.0)\n            b[i] = \"d\";\n        else if (a[i] < 5.0)\n            b[i] = \"e\";\n        else if (a[i] < 6.0)\n            b[i] = \"f\";\n        else if (a[i] < 7.0)\n            b[i] = \"g\";\n        else if (a[i] < 8.0)\n            b[i] = \"h\";\n        else if (a[i] < 9.0)\n            b[i] = \"i\";\n        else if (a[i] < 10.0)\n            b[i] = \"j\";\n        else if (a[i] < 11.0)\n            b[i] = \"k\";\n        else if (a[i] < 12.0)\n            b[i] = \"l\";\n        else if (a[i] < 13.0)\n            b[i] = \"m\";\n        else if (a[i] < 14.0)\n            b[i] = \"n\";\n        else if (a[i] < 15.0)\n            b[i] = \"o\";\n        else if (a[i] < 16.0)\n            b[i] = \"p\";\n        else if (a[i] < 17.0)\n            b[i] = \"q\";\n        else if (a[i] < 18.0)\n            b[i] = \"r\";\n        else if (a[i] < 19.0)\n           ", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar **func0(float *a, int n)\n{\n    char **b = malloc(n * sizeof(char *));\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] < 1.0)\n            b[i] = \"a\";\n        else if (a[i] < 2.0)\n            b[i] = \"b\";\n        else if (a[i] < 3.0)\n            b[i] = \"c\";\n        else if (a[i] < 4.0)\n            b[i] = \"d\";\n        else if (a[i] < 5.0)\n            b[i] = \"e\";\n        else if (a[i] < 6.0)\n            b[i] = \"f\";\n        else if (a[i] < 7.0)\n            b[i] = \"g\";\n        else if (a[i] < 8.0)\n            b[i] = \"h\";\n        else if (a[i] < 9.0)\n            b[i] = \"i\";\n        else if (a[i] < 10.0)\n            b[i] = \"j\";\n        else if (a[i] < 11.0)\n            b[i] = \"k\";\n        else if (a[i] < 12.0)\n            b[i] = \"l\";\n        else if (a[i] < 13.0)\n            b[i] = \"m\";\n        else if (a[i] < 14.0)\n            b[i] = \"n\";\n        else if (a[i] < 15.0)\n            b[i] = \"o\";\n        else if (a[i] < 16.0)\n            b[i] = \"p\";\n        else if (a[i] < 17.0)\n            b[i] = \"q\";\n        else if (a[i] < 18.0)\n            b[i] = \"r\";\n        else if (a[i] < 19.0)\n           \n\n\n\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 81, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar **func0(float *a, int n)\n{\n    char **b = malloc(n * sizeof(char *));\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0.0)\n            b[i] = \"<0\";\n        else if (a[i] > 0.0)\n            b[i] = \">0\";\n        else if (a[i] == 0.0)\n            b[i] = \"=0\";\n        else if (a[i] < 1.0)\n            b[i] = \"<1\";\n        else if (a[i] > 1.0)\n            b[i] = \">1\";\n        else if (a[i] == 1.0)\n            b[i] = \"=1\";\n        else if (a[i] < 2.0)\n            b[i] = \"<2\";\n        else if (a[i] > 2.0)\n            b[i] = \">2\";\n        else if (a[i] == 2.0)\n            b[i] = \"=2\";\n        else if (a[i] < 3.0)\n            b[i] = \"<3\";\n        else if (a[i] > 3.0)\n            b[i] = \">3\";\n        else if (a[i] == 3.0)\n            b[i] = \"=3\";\n        else if (a[i] < 4.0)\n            b[i] = \"<4\";\n        else if (a[i] > 4.0)\n            b[i] = \">4\";\n        else if (a[i] == 4.0)\n            b[i] = \"=4\";\n        else if (a[i] < 5.0)\n            b[i] = \"<5\";\n        else if (a[i] > 5.0)\n            b[i] = \">5\";\n        else if (a[i] == 5.0)\n            b[i] = \"=5\";\n        else if (a[i] < 6", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar **func0(float *a, int n)\n{\n    char **b = malloc(n * sizeof(char *));\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0.0)\n            b[i] = \"<0\";\n        else if (a[i] > 0.0)\n            b[i] = \">0\";\n        else if (a[i] == 0.0)\n            b[i] = \"=0\";\n        else if (a[i] < 1.0)\n            b[i] = \"<1\";\n        else if (a[i] > 1.0)\n            b[i] = \">1\";\n        else if (a[i] == 1.0)\n            b[i] = \"=1\";\n        else if (a[i] < 2.0)\n            b[i] = \"<2\";\n        else if (a[i] > 2.0)\n            b[i] = \">2\";\n        else if (a[i] == 2.0)\n            b[i] = \"=2\";\n        else if (a[i] < 3.0)\n            b[i] = \"<3\";\n        else if (a[i] > 3.0)\n            b[i] = \">3\";\n        else if (a[i] == 3.0)\n            b[i] = \"=3\";\n        else if (a[i] < 4.0)\n            b[i] = \"<4\";\n        else if (a[i] > 4.0)\n            b[i] = \">4\";\n        else if (a[i] == 4.0)\n            b[i] = \"=4\";\n        else if (a[i] < 5.0)\n            b[i] = \"<5\";\n        else if (a[i] > 5.0)\n            b[i] = \">5\";\n        else if (a[i] == 5.0)\n            b[i] = \"=5\";\n        else if (a[i] < 6\n\n\n\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 81, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n)\n{\n  int i;\n  char **b = malloc(n * sizeof(char *));\n  for (i = 0; i < n; i++) {\n    if (a[i] >= 0.0) {\n      b[i] = \"0\";\n    } else if (a[i] >= -1.0) {\n      b[i] = \"1\";\n    } else if (a[i] >= -2.0) {\n      b[i] = \"2\";\n    } else if (a[i] >= -3.0) {\n      b[i] = \"3\";\n    } else if (a[i] >= -4.0) {\n      b[i] = \"4\";\n    } else if (a[i] >= -5.0) {\n      b[i] = \"5\";\n    } else if (a[i] >= -6.0) {\n      b[i] = \"6\";\n    } else if (a[i] >= -7.0) {\n      b[i] = \"7\";\n    } else if (a[i] >= -8.0) {\n      b[i] = \"8\";\n    } else if (a[i] >= -9.0) {\n      b[i] = \"9\";\n    } else {\n      b[i] = \"10\";\n    }\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nvoid func0(float *a, int n)\n{\n  int i;\n  char **b = malloc(n * sizeof(char *));\n  for (i = 0; i < n; i++) {\n    if (a[i] >= 0.0) {\n      b[i] = \"0\";\n    } else if (a[i] >= -1.0) {\n      b[i] = \"1\";\n    } else if (a[i] >= -2.0) {\n      b[i] = \"2\";\n    } else if (a[i] >= -3.0) {\n      b[i] = \"3\";\n    } else if (a[i] >= -4.0) {\n      b[i] = \"4\";\n    } else if (a[i] >= -5.0) {\n      b[i] = \"5\";\n    } else if (a[i] >= -6.0) {\n      b[i] = \"6\";\n    } else if (a[i] >= -7.0) {\n      b[i] = \"7\";\n    } else if (a[i] >= -8.0) {\n      b[i] = \"8\";\n    } else if (a[i] >= -9.0) {\n      b[i] = \"9\";\n    } else {\n      b[i] = \"10\";\n    }\n  }\n}\n\n\n\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 81, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar** func0(float* a, int n) {\n  char** b = malloc(n * sizeof(char*));\n  for (int i = 0; i < n; i++) {\n    if (a[i] >= 0.0) {\n      b[i] = \"0\";\n    } else if (a[i] > -1.0) {\n      b[i] = \"1\";\n    } else if (a[i] > -2.0) {\n      b[i] = \"2\";\n    } else if (a[i] > -3.0) {\n      b[i] = \"3\";\n    } else if (a[i] > -4.0) {\n      b[i] = \"4\";\n    } else if (a[i] > -5.0) {\n      b[i] = \"5\";\n    } else if (a[i] > -6.0) {\n      b[i] = \"6\";\n    } else if (a[i] > -7.0) {\n      b[i] = \"7\";\n    } else if (a[i] > -8.0) {\n      b[i] = \"8\";\n    } else if (a[i] > -9.0) {\n      b[i] = \"9\";\n    } else {\n      b[i] = \"10\";\n    }\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <string.h>\n\nchar** func0(float* a, int n) {\n  char** b = malloc(n * sizeof(char*));\n  for (int i = 0; i < n; i++) {\n    if (a[i] >= 0.0) {\n      b[i] = \"0\";\n    } else if (a[i] > -1.0) {\n      b[i] = \"1\";\n    } else if (a[i] > -2.0) {\n      b[i] = \"2\";\n    } else if (a[i] > -3.0) {\n      b[i] = \"3\";\n    } else if (a[i] > -4.0) {\n      b[i] = \"4\";\n    } else if (a[i] > -5.0) {\n      b[i] = \"5\";\n    } else if (a[i] > -6.0) {\n      b[i] = \"6\";\n    } else if (a[i] > -7.0) {\n      b[i] = \"7\";\n    } else if (a[i] > -8.0) {\n      b[i] = \"8\";\n    } else if (a[i] > -9.0) {\n      b[i] = \"9\";\n    } else {\n      b[i] = \"10\";\n    }\n  }\n}\n\n\n\n\nbool issame(char** a, char** b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    float grades1[] = {4.0, 3, 1.7, 2, 3.5};\n    char* expected1[] = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    char** result1 = func0(grades1, 5);\n    assert(issame(result1, expected1, 5));\n    free(result1);\n\n    float grades2[] = {1.2};\n    char* expected2[] = {\"D+\"};\n    char** result2 = func0(grades2, 1);\n    assert(issame(result2, expected2, 1));\n    free(result2);\n\n    float grades3[] = {0.5};\n    char* expected3[] = {\"D-\"};\n    char** result3 = func0(grades3, 1);\n    assert(issame(result3, expected3, 1));\n    free(result3);\n\n    float grades4[] = {0.0};\n    char* expected4[] = {\"E\"};\n    char** result4 = func0(grades4, 1);\n    assert(issame(result4, expected4, 1));\n    free(result4);\n\n    float grades5[] = {1, 0.3, 1.5, 2.8, 3.3};\n    char* expected5[] = {\"D\", \"D-\", \"C-\", \"B\", \"B+\"};\n    char** result5 = func0(grades5, 5);\n    assert(issame(result5, expected5, 5));\n    free(result5);\n\n    float grades6[] = {0, 0.7};\n    char* expected6[] = {\"E\", \"D-\"};\n    char** result6 = func0(grades6, 2);\n    assert(issame(result6, expected6, 2));\n    free(result6);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 82, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n\n  n = strlen(s);\n  if (n <= 1)\n    return 0;\n\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n\n  n = strlen(s);\n  if (n <= 1)\n    return 0;\n\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 82, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, j, k, l;\n  l = strlen(s);\n  if (l < 2)\n    return 0;\n  if (l < 4)\n    return 1;\n  if (l % 2 == 0)\n    return 0;\n  for (i = 2; i * i <= l; i++)\n    if (l % i == 0)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, j, k, l;\n  l = strlen(s);\n  if (l < 2)\n    return 0;\n  if (l < 4)\n    return 1;\n  if (l % 2 == 0)\n    return 0;\n  for (i = 2; i * i <= l; i++)\n    if (l % i == 0)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 82, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n  n = strlen(s);\n  if (n < 2)\n    return 0;\n  if (n > 3) {\n    if (n % 2 == 0)\n      return 0;\n    for (i = 2; i * i <= n; i++)\n      if (n % i == 0)\n        return 0;\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n  n = strlen(s);\n  if (n < 2)\n    return 0;\n  if (n > 3) {\n    if (n % 2 == 0)\n      return 0;\n    for (i = 2; i * i <= n; i++)\n      if (n % i == 0)\n        return 0;\n  }\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 82, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n  n = strlen(s);\n  if (n <= 1)\n    return 0;\n  if (n <= 3)\n    return 1;\n  if (n % 2 == 0)\n    return 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int i, n;\n  n = strlen(s);\n  if (n <= 1)\n    return 0;\n  if (n <= 3)\n    return 1;\n  if (n % 2 == 0)\n    return 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return 0;\n  return 1;\n}\n\n\nint main() {\n    assert(func0(\"Hello\") == true);\n    assert(func0(\"abcdcba\") == true);\n    assert(func0(\"kittens\") == true);\n    assert(func0(\"orange\") == false);\n    assert(func0(\"wow\") == true);\n    assert(func0(\"world\") == true);\n    assert(func0(\"MadaM\") == true);\n    assert(func0(\"Wow\") == true);\n    assert(func0(\"\") == false);\n    assert(func0(\"HI\") == true);\n    assert(func0(\"go\") == true);\n    assert(func0(\"gogo\") == false);\n    assert(func0(\"aaaaaaaaaaaaaaa\") == false);\n    assert(func0(\"Madam\") == true);\n    assert(func0(\"M\") == false);\n    assert(func0(\"0\") == false);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 83, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    r = 18;\n    for (i = 2; i < n; i++)\n        r *= 10;\n\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    r = 18;\n    for (i = 2; i < n; i++)\n        r *= 10;\n\n    return r;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 83, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r = 0;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n <= 2)\n        return 18;\n\n    r = 18;\n    for (i = 2; i < n; i++)\n        r *= 10;\n\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r = 0;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n <= 2)\n        return 18;\n\n    r = 18;\n    for (i = 2; i < n; i++)\n        r *= 10;\n\n    return r;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 83, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    r = 0;\n    if (n > 0)\n    {\n        r = 1;\n        for (i = 1; i < n; i++)\n        {\n            r *= 10;\n        }\n    }\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    r = 0;\n    if (n > 0)\n    {\n        r = 1;\n        for (i = 1; i < n; i++)\n        {\n            r *= 10;\n        }\n    }\n    return r;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 83, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    r = 0;\n    if (n > 0)\n    {\n        r = 1;\n        for (i = 1; i < n; i++)\n        {\n            r *= 10;\n        }\n    }\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, r;\n\n    r = 0;\n    if (n > 0)\n    {\n        r = 1;\n        for (i = 1; i < n; i++)\n        {\n            r *= 10;\n        }\n    }\n    return r;\n}\n\n\nint main() {\n    assert(func0(1) == 1);\n    assert(func0(2) == 18);\n    assert(func0(3) == 180);\n    assert(func0(4) == 1800);\n    assert(func0(5) == 18000);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 84, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int num)\n{\n    char str[6];\n    sprintf(str, \"%d\", num);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n    {\n        sum += str[i] - '0';\n    }\n    char *res = (char *)malloc(33);\n    int i = 0;\n    if (sum == 0)\n    {\n        res[i++] = '0';\n    }\n    else\n    {\n        while (sum > 0)\n        {\n            res[i++] = sum % 2 + '0';\n            sum /= 2;\n        }\n    }\n    res[i] = '\\0';\n    for (int j = 0; j < i / 2; j++)\n    {\n        char temp = res[j];\n        res[j] = res[i - j - 1];\n        res[i - j - 1] = temp;\n    }\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int num)\n{\n    char str[6];\n    sprintf(str, \"%d\", num);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n    {\n        sum += str[i] - '0';\n    }\n    char *res = (char *)malloc(33);\n    int i = 0;\n    if (sum == 0)\n    {\n        res[i++] = '0';\n    }\n    else\n    {\n        while (sum > 0)\n        {\n            res[i++] = sum % 2 + '0';\n            sum /= 2;\n        }\n    }\n    res[i] = '\\0';\n    for (int j = 0; j < i / 2; j++)\n    {\n        char temp = res[j];\n        res[j] = res[i - j - 1];\n        res[i - j - 1] = temp;\n    }\n    return res;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 84, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a)\n{\n    char buf[5];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0')\n    {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = malloc(33);\n    if (sum == 0)\n    {\n        ret[0] = '0';\n        ret[1] = '\\0';\n        return ret;\n    }\n    int j = 0;\n    while (sum > 0)\n    {\n        ret[j] = sum % 2 + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    for (int k = 0; k < j / 2; k++)\n    {\n        char tmp = ret[k];\n        ret[k] = ret[j - k - 1];\n        ret[j - k - 1] = tmp;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a)\n{\n    char buf[5];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0')\n    {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = malloc(33);\n    if (sum == 0)\n    {\n        ret[0] = '0';\n        ret[1] = '\\0';\n        return ret;\n    }\n    int j = 0;\n    while (sum > 0)\n    {\n        ret[j] = sum % 2 + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    for (int k = 0; k < j / 2; k++)\n    {\n        char tmp = ret[k];\n        ret[k] = ret[j - k - 1];\n        ret[j - k - 1] = tmp;\n    }\n    return ret;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 84, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a)\n{\n    char buf[5];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0')\n    {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = malloc(33);\n    if (sum == 0)\n    {\n        ret[0] = '0';\n        ret[1] = '\\0';\n        return ret;\n    }\n    int j = 0;\n    while (sum != 0)\n    {\n        ret[j] = (sum % 2) + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    int k = 0;\n    int l = j - 1;\n    while (k < l)\n    {\n        char tmp = ret[k];\n        ret[k] = ret[l];\n        ret[l] = tmp;\n        k++;\n        l--;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a)\n{\n    char buf[5];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0')\n    {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = malloc(33);\n    if (sum == 0)\n    {\n        ret[0] = '0';\n        ret[1] = '\\0';\n        return ret;\n    }\n    int j = 0;\n    while (sum != 0)\n    {\n        ret[j] = (sum % 2) + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    int k = 0;\n    int l = j - 1;\n    while (k < l)\n    {\n        char tmp = ret[k];\n        ret[k] = ret[l];\n        ret[l] = tmp;\n        k++;\n        l--;\n    }\n    return ret;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 84, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a)\n{\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i, j, k, l, m, n;\n    char *p;\n    i = buf[0] - '0';\n    j = buf[1] - '0';\n    k = buf[2] - '0';\n    l = buf[3] - '0';\n    m = buf[4] - '0';\n    n = buf[5] - '0';\n    int sum = i + j * 10 + k * 100 + l * 1000 + m * 10000 + n * 100000;\n    p = malloc(33);\n    if (sum == 0)\n    {\n        p[0] = '0';\n        p[1] = '\\0';\n        return p;\n    }\n    int len = 0;\n    while (sum)\n    {\n        p[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    p[len] = '\\0';\n    for (i = 0, j = len - 1; i < j; i++, j--)\n    {\n        char tmp = p[i];\n        p[i] = p[j];\n        p[j] = tmp;\n    }\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a)\n{\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", a);\n    int i, j, k, l, m, n;\n    char *p;\n    i = buf[0] - '0';\n    j = buf[1] - '0';\n    k = buf[2] - '0';\n    l = buf[3] - '0';\n    m = buf[4] - '0';\n    n = buf[5] - '0';\n    int sum = i + j * 10 + k * 100 + l * 1000 + m * 10000 + n * 100000;\n    p = malloc(33);\n    if (sum == 0)\n    {\n        p[0] = '0';\n        p[1] = '\\0';\n        return p;\n    }\n    int len = 0;\n    while (sum)\n    {\n        p[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    p[len] = '\\0';\n    for (i = 0, j = len - 1; i < j; i++, j--)\n    {\n        char tmp = p[i];\n        p[i] = p[j];\n        p[j] = tmp;\n    }\n    return p;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(1000);\n    assert(strcmp(result, \"1\") == 0);\n    free(result);\n\n    result = func0(150);\n    assert(strcmp(result, \"110\") == 0);\n    free(result);\n\n    result = func0(147);\n    assert(strcmp(result, \"1100\") == 0);\n    free(result);\n\n    result = func0(333);\n    assert(strcmp(result, \"1001\") == 0);\n    free(result);\n\n    result = func0(963);\n    assert(strcmp(result, \"10010\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 85, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i*2+1 < n; i++)\n    if (!(a[i*2+1] & 1))\n      sum += a[i*2+1];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i*2+1 < n; i++)\n    if (!(a[i*2+1] & 1))\n      sum += a[i*2+1];\n  return sum;\n}\n\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 85, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 85, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 85, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n - 1; i++)\n    sum += a[i] & (a[i + 1] & 1);\n\n  for (i = 0; i < n; i += 4)\n    sum += a[i] & (a[i + 1] & 1);\n\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n - 1; i++)\n    sum += a[i] & (a[i + 1] & 1);\n\n  for (i = 0; i < n; i += 4)\n    sum += a[i] & (a[i + 1] & 1);\n\n  return sum;\n}\n\n\nint main() {\n    int array1[] = {4, 88};\n    assert(func0(array1, sizeof(array1) / sizeof(array1[0])) == 88);\n\n    int array2[] = {4, 5, 6, 7, 2, 122};\n    assert(func0(array2, sizeof(array2) / sizeof(array2[0])) == 122);\n\n    int array3[] = {4, 0, 6, 7};\n    assert(func0(array3, sizeof(array3) / sizeof(array3[0])) == 0);\n\n    int array4[] = {4, 4, 6, 8};\n    assert(func0(array4, sizeof(array4) / sizeof(array4[0])) == 12);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 86, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s) {\n    int len = strlen(s);\n    char* res = (char*)malloc(len + 2);\n    int i, j, k, l, m;\n    char tmp;\n    int count = 0;\n    int count2 = 0;\n    char tmp2[50];\n    for (i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (j = 0; j < count2 - 1; j++) {\n                for (k = j + 1; k < count2; k++) {\n                    if (tmp2[j] > tmp2[k]) {\n                        tmp = tmp2[j];\n                        tmp2[j] = tmp2[k];\n                        tmp2[k] = tmp;\n                    }\n                }\n            }\n            if (count > 0) {\n                res[count] = ' ';\n                count++;\n            }\n            for (l = 0; l < count2; l++) {\n                res[count] = tmp2[l];\n                count++;\n            }\n            count2 = 0;\n        } else {\n            tmp2[count2] = s[i];\n            count2++;\n        }\n    }\n    res[count] = '\\0';\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s) {\n    int len = strlen(s);\n    char* res = (char*)malloc(len + 2);\n    int i, j, k, l, m;\n    char tmp;\n    int count = 0;\n    int count2 = 0;\n    char tmp2[50];\n    for (i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (j = 0; j < count2 - 1; j++) {\n                for (k = j + 1; k < count2; k++) {\n                    if (tmp2[j] > tmp2[k]) {\n                        tmp = tmp2[j];\n                        tmp2[j] = tmp2[k];\n                        tmp2[k] = tmp;\n                    }\n                }\n            }\n            if (count > 0) {\n                res[count] = ' ';\n                count++;\n            }\n            for (l = 0; l < count2; l++) {\n                res[count] = tmp2[l];\n                count++;\n            }\n            count2 = 0;\n        } else {\n            tmp2[count2] = s[i];\n            count2++;\n        }\n    }\n    res[count] = '\\0';\n    return res;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 86, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    int i, j, k, l;\n    char* p;\n    char t[50];\n    char* r;\n\n    p = s;\n    l = strlen(s);\n    r = (char*)malloc(l + 1);\n    i = j = k = 0;\n    while (*p)\n    {\n        if (*p == ' ' || *p == '\\t' || *p == '\\n')\n        {\n            for (j = 0; j < k - 1; j++)\n            {\n                for (i = 0; i < k - 1 - j; i++)\n                {\n                    if (t[i] > t[i + 1])\n                    {\n                        t[i] ^= t[i + 1];\n                        t[i + 1] ^= t[i];\n                        t[i] ^= t[i + 1];\n                    }\n                }\n            }\n            if (i > 0)\n            {\n                r[i++] = ' ';\n            }\n            for (j = 0; j < k; j++)\n            {\n                r[i++] = t[j];\n            }\n            k = 0;\n        }\n        else\n        {\n            t[k++] = *p;\n        }\n        p++;\n    }\n    r[i] = '\\0';\n    return r;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s)\n{\n    int i, j, k, l;\n    char* p;\n    char t[50];\n    char* r;\n\n    p = s;\n    l = strlen(s);\n    r = (char*)malloc(l + 1);\n    i = j = k = 0;\n    while (*p)\n    {\n        if (*p == ' ' || *p == '\\t' || *p == '\\n')\n        {\n            for (j = 0; j < k - 1; j++)\n            {\n                for (i = 0; i < k - 1 - j; i++)\n                {\n                    if (t[i] > t[i + 1])\n                    {\n                        t[i] ^= t[i + 1];\n                        t[i + 1] ^= t[i];\n                        t[i] ^= t[i + 1];\n                    }\n                }\n            }\n            if (i > 0)\n            {\n                r[i++] = ' ';\n            }\n            for (j = 0; j < k; j++)\n            {\n                r[i++] = t[j];\n            }\n            k = 0;\n        }\n        else\n        {\n            t[k++] = *p;\n        }\n        p++;\n    }\n    r[i] = '\\0';\n    return r;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 86, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count, index;\n    char *p, *q, temp;\n    char buf[50];\n\n    len = strlen(s);\n    p = (char *)malloc(len + 2);\n    q = p;\n    count = 0;\n    index = 0;\n    for (i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\t' || s[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (buf[j] > buf[k]) {\n                        temp = buf[j];\n                        buf[j] = buf[k];\n                        buf[k] = temp;\n                    }\n                }\n            }\n            if (index != 0) {\n                p[index++] = ' ';\n            }\n            for (j = 0; j < count; j++) {\n                p[index++] = buf[j];\n            }\n            count = 0;\n        } else {\n            buf[count++] = s[i];\n        }\n    }\n    p[index] = '\\0';\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, count, index;\n    char *p, *q, temp;\n    char buf[50];\n\n    len = strlen(s);\n    p = (char *)malloc(len + 2);\n    q = p;\n    count = 0;\n    index = 0;\n    for (i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\t' || s[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (buf[j] > buf[k]) {\n                        temp = buf[j];\n                        buf[j] = buf[k];\n                        buf[k] = temp;\n                    }\n                }\n            }\n            if (index != 0) {\n                p[index++] = ' ';\n            }\n            for (j = 0; j < count; j++) {\n                p[index++] = buf[j];\n            }\n            count = 0;\n        } else {\n            buf[count++] = s[i];\n        }\n    }\n    p[index] = '\\0';\n    return p;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 86, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, len_s, len_t;\n    char *t, *p, c;\n    char tmp[50];\n\n    len_s = strlen(s);\n    t = malloc(len_s + 2);\n    p = t;\n    len_t = 0;\n    for (i = 0; i <= len_s; i++) {\n        if (*s == ' ' || *s == '\\t' || *s == '\\n' || *s == '\\0') {\n            len = i - 1;\n            for (j = 0; j < len; j++) {\n                for (k = j + 1; k < len; k++) {\n                    if (tmp[j] > tmp[k]) {\n                        c = tmp[j];\n                        tmp[j] = tmp[k];\n                        tmp[k] = c;\n                    }\n                }\n            }\n            if (len_t) {\n                *p++ = ' ';\n                len_t++;\n            }\n            if (len) {\n                memcpy(p, tmp, len);\n                p += len;\n                len_t += len;\n            }\n            i++;\n            s = &s[i];\n        } else {\n            tmp[i] = *s;\n            s++;\n        }\n    }\n    *p = '\\0';\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, len, len_s, len_t;\n    char *t, *p, c;\n    char tmp[50];\n\n    len_s = strlen(s);\n    t = malloc(len_s + 2);\n    p = t;\n    len_t = 0;\n    for (i = 0; i <= len_s; i++) {\n        if (*s == ' ' || *s == '\\t' || *s == '\\n' || *s == '\\0') {\n            len = i - 1;\n            for (j = 0; j < len; j++) {\n                for (k = j + 1; k < len; k++) {\n                    if (tmp[j] > tmp[k]) {\n                        c = tmp[j];\n                        tmp[j] = tmp[k];\n                        tmp[k] = c;\n                    }\n                }\n            }\n            if (len_t) {\n                *p++ = ' ';\n                len_t++;\n            }\n            if (len) {\n                memcpy(p, tmp, len);\n                p += len;\n                len_t += len;\n            }\n            i++;\n            s = &s[i];\n        } else {\n            tmp[i] = *s;\n            s++;\n        }\n    }\n    *p = '\\0';\n    return t;\n}\n\n\n\nint main() {\n    char* result;\n\n    result = func0(\"Hi\");\n    assert(strcmp(result, \"Hi\") == 0);\n    free(result);\n\n    result = func0(\"hello\");\n    assert(strcmp(result, \"ehllo\") == 0);\n    free(result);\n\n    result = func0(\"number\");\n    assert(strcmp(result, \"bemnru\") == 0);\n    free(result);\n\n    result = func0(\"abcd\");\n    assert(strcmp(result, \"abcd\") == 0);\n    free(result);\n\n    result = func0(\"Hello World!!!\");\n    assert(strcmp(result, \"Hello !!!Wdlor\") == 0);\n    free(result);\n\n    result = func0(\"\");\n    assert(strcmp(result, \"\") == 0);\n    free(result);\n\n    result = func0(\"Hi. My name is Mister Robot. How are you?\");\n    assert(strcmp(result, \".Hi My aemn is Meirst .Rboot How aer ?ouy\") == 0);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 87, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct point **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct point **p = malloc(100 * sizeof(struct point *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++)\n        for (j = b[i] - 1; j >= 0; j--)\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct point));\n                p[k]->x = i;\n                p[k]->y = j;\n                k++;\n            }\n    *m = k;\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct point **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct point **p = malloc(100 * sizeof(struct point *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++)\n        for (j = b[i] - 1; j >= 0; j--)\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct point));\n                p[k]->x = i;\n                p[k]->y = j;\n                k++;\n            }\n    *m = k;\n    return p;\n}\n\n\n\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 87, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct pair **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct pair **p = malloc(100 * sizeof(struct pair *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++)\n        for (j = b[i] - 1; j >= 0; j--)\n            if (a[i][j] == c)\n            {\n                p[k] = malloc(sizeof(struct pair));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n    *m = k;\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct pair **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct pair **p = malloc(100 * sizeof(struct pair *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++)\n        for (j = b[i] - 1; j >= 0; j--)\n            if (a[i][j] == c)\n            {\n                p[k] = malloc(sizeof(struct pair));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n    *m = k;\n    return p;\n}\n\n\n\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 87, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct node **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct node **p = malloc(100 * sizeof(struct node *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = b[i] - 1; j >= 0; j--) {\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct node));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n        }\n    }\n    *m = k;\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct node **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct node **p = malloc(100 * sizeof(struct node *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = b[i] - 1; j >= 0; j--) {\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct node));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n        }\n    }\n    *m = k;\n    return p;\n}\n\n\n\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 87, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct node **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct node **p = malloc(100 * sizeof(struct node *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = b[i] - 1; j >= 0; j--) {\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct node));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n        }\n    }\n    *m = k;\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nstruct node **func0(int **a, int n, int *b, int c, int *m)\n{\n    struct node **p = malloc(100 * sizeof(struct node *));\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = b[i] - 1; j >= 0; j--) {\n            if (a[i][j] == c) {\n                p[k] = malloc(sizeof(struct node));\n                p[k]->i = i;\n                p[k]->j = j;\n                k++;\n            }\n        }\n    }\n    *m = k;\n    return p;\n}\n\n\n\n\nint issame(int **a, int aSize, int **b, int bSize) {\n    if (aSize != bSize) return 0;\n\n    for (int i = 0; i < aSize; i++) {\n        if (a[i][0] != b[i][0] || a[i][1] != b[i][1]) return 0;\n    }\n    return 1;\n}\n\nvoid free_result(int **result, int size) {\n    for (int i = 0; i < size; ++i) {\n        free(result[i]);\n    }\n    free(result);\n}\n\nint main() {\n    int rows, returnSize;\n    int **result;\n\n    // Test case 1\n    rows = 3;\n    int cols1[] = {6, 6, 6};\n    int *lst1[] = {(const int[]){1,2,3,4,5,6}, (const int[]){1,2,3,4,1,6}, (const int[]){1,2,3,4,5,1}};\n    int *expected1[] = {(const int[]){0, 0}, (const int[]){1, 4}, (const int[]){1, 0}, (const int[]){2, 5}, (const int[]){2, 0}};\n    result = func0(lst1, rows, cols1, 1, &returnSize);\n    assert(issame(result, returnSize, expected1, 5));\n    free_result(result, returnSize);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 88, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n    t = a[0] + a[n - 1];\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (t % 2 == 1) {\n                if ((*b)[i] < (*b)[j]) {\n                    k = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = k;\n                }\n            } else {\n                if ((*b)[i] > (*b)[j]) {\n                    k = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = k;\n                }\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n    t = a[0] + a[n - 1];\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (t % 2 == 1) {\n                if ((*b)[i] < (*b)[j]) {\n                    k = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = k;\n                }\n            } else {\n                if ((*b)[i] > (*b)[j]) {\n                    k = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = k;\n                }\n            }\n        }\n    }\n}\n\n\n\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 88, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n  int i, j, t;\n\n  *m = n;\n  if (n == 0) {\n    *b = NULL;\n    return;\n  }\n  *b = (int *) malloc(n * sizeof(int));\n  if (*b == NULL)\n    exit(1);\n  for (i = 0; i < n; i++)\n    (*b)[i] = a[i];\n  t = a[0] + a[n-1];\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (t % 2 == 1) {\n        if ((*b)[i] > (*b)[j]) {\n          t = (*b)[i];\n          (*b)[i] = (*b)[j];\n          (*b)[j] = t;\n        }\n      } else {\n        if ((*b)[i] < (*b)[j]) {\n          t = (*b)[i];\n          (*b)[i] = (*b)[j];\n          (*b)[j] = t;\n        }\n      }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n  int i, j, t;\n\n  *m = n;\n  if (n == 0) {\n    *b = NULL;\n    return;\n  }\n  *b = (int *) malloc(n * sizeof(int));\n  if (*b == NULL)\n    exit(1);\n  for (i = 0; i < n; i++)\n    (*b)[i] = a[i];\n  t = a[0] + a[n-1];\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (t % 2 == 1) {\n        if ((*b)[i] > (*b)[j]) {\n          t = (*b)[i];\n          (*b)[i] = (*b)[j];\n          (*b)[j] = t;\n        }\n      } else {\n        if ((*b)[i] < (*b)[j]) {\n          t = (*b)[i];\n          (*b)[i] = (*b)[j];\n          (*b)[j] = t;\n        }\n      }\n}\n\n\n\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 88, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0_part_0(int *a, int n, int **b)\n{\n  int i, j, t;\n  int sum;\n\n  *b = (int *) malloc(n * sizeof(int));\n  if (*b == NULL)\n    exit(1);\n\n  for (i = 0; i < n; i++)\n    (*b)[i] = a[i];\n\n  sum = a[0] + a[n - 1];\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (sum % 2 == 1)\n        if ((*b)[i] > (*b)[j])\n          { t = (*b)[i]; (*b)[i] = (*b)[j]; (*b)[j] = t; }\n        else\n          continue;\n      else\n        if ((*b)[i] < (*b)[j])\n          { t = (*b)[i]; (*b)[i] = (*b)[j]; (*b)[j] = t; }\n        else\n          continue;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0_part_0(int *a, int n, int **b)\n{\n  int i, j, t;\n  int sum;\n\n  *b = (int *) malloc(n * sizeof(int));\n  if (*b == NULL)\n    exit(1);\n\n  for (i = 0; i < n; i++)\n    (*b)[i] = a[i];\n\n  sum = a[0] + a[n - 1];\n\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (sum % 2 == 1)\n        if ((*b)[i] > (*b)[j])\n          { t = (*b)[i]; (*b)[i] = (*b)[j]; (*b)[j] = t; }\n        else\n          continue;\n      else\n        if ((*b)[i] < (*b)[j])\n          { t = (*b)[i]; (*b)[i] = (*b)[j]; (*b)[j] = t; }\n        else\n          continue;\n}\n\n\n\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 88, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0_part_0(int *a, int n, int **b)\n{\n    int i, j, t;\n    int sum;\n\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n\n    sum = a[0] + a[n - 1];\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (sum % 2 == 1) {\n                if ((*b)[i] < (*b)[j]) {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n            } else {\n                if ((*b)[i] > (*b)[j]) {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0_part_0(int *a, int n, int **b)\n{\n    int i, j, t;\n    int sum;\n\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n\n    sum = a[0] + a[n - 1];\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (sum % 2 == 1) {\n                if ((*b)[i] < (*b)[j]) {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n            } else {\n                if ((*b)[i] > (*b)[j]) {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n            }\n        }\n    }\n}\n\n\n\n\nint issame(int *a, int aSize, int *b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result, result_size;\n\n    func0((const int[]){}, 0, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){}, 0));\n    free(result);\n\n    func0((const int[]){5}, 1, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){5}, 1));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 1, 2, 3, 4, 5}, 6));\n    free(result);\n\n    func0((const int[]){2, 4, 3, 0, 1, 5, 6}, 7, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){6, 5, 4, 3, 2, 1, 0}, 7));\n    free(result);\n\n    func0((const int[]){2, 1}, 2, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){1, 2}, 2));\n    free(result);\n\n    func0((const int[]){15, 42, 87, 32, 11, 0}, 6, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){0, 11, 15, 32, 42, 87}, 6));\n    free(result);\n\n    func0((const int[]){21, 14, 23, 11}, 4, &result, &result_size);\n    assert(issame(result, result_size, (const int[]){23, 21, 14, 11}, 4));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 89, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *a, char *b)\n{\n  int i;\n  for (i = 0; a[i]; i++)\n    b[i] = 'a' + (a[i] - 'A' + 26) % 26;\n  b[i] = 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *a, char *b)\n{\n  int i;\n  for (i = 0; a[i]; i++)\n    b[i] = 'a' + (a[i] - 'A' + 26) % 26;\n  b[i] = 0;\n}\n\n\n\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 89, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = 'a' + (s[i] - 'A') % 26;\n    t[i] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = 'a' + (s[i] - 'A') % 26;\n    t[i] = '\\0';\n}\n\n\n\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 89, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i]; i++)\n        t[i] = 'a' + (s[i] - 'A' + 26) % 26;\n    t[i] = 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i]; i++)\n        t[i] = 'a' + (s[i] - 'A' + 26) % 26;\n    t[i] = 0;\n}\n\n\n\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 89, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *a, char *b)\n{\n    int i;\n    for (i = 0; a[i]; i++)\n        b[i] = 'a' + (a[i] - 'A' + 26) % 26;\n    b[i] = 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(char *a, char *b)\n{\n    int i;\n    for (i = 0; a[i]; i++)\n        b[i] = 'a' + (a[i] - 'A' + 26) % 26;\n    b[i] = 0;\n}\n\n\n\n\nint main() {\n    char encrypted[100]; // Buffer should be large enough to hold the encrypted string\n\n    func0(\"hi\", encrypted);\n    assert(strcmp(encrypted, \"lm\") == 0);\n\n    func0(\"asdfghjkl\", encrypted);\n    assert(strcmp(encrypted, \"ewhjklnop\") == 0);\n\n    func0(\"gf\", encrypted);\n    assert(strcmp(encrypted, \"kj\") == 0);\n\n    func0(\"et\", encrypted);\n    assert(strcmp(encrypted, \"ix\") == 0);\n\n    func0(\"faewfawefaewg\", encrypted);\n    assert(strcmp(encrypted, \"jeiajeaijeiak\") == 0);\n\n    func0(\"hellomyfriend\", encrypted);\n    assert(strcmp(encrypted, \"lippsqcjvmirh\") == 0);\n\n    func0(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\", encrypted);\n    assert(strcmp(encrypted, \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") == 0);\n\n    func0(\"a\", encrypted);\n    assert(strcmp(encrypted, \"e\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 90, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *arr, int n)\n{\n    int i, min, second_min;\n\n    if (n < 2)\n        return -1;\n\n    min = second_min = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (arr[i] < min) {\n            second_min = min;\n            min = arr[i];\n        } else if (arr[i] < second_min && arr[i] != min)\n            second_min = arr[i];\n    }\n\n    if (second_min == 0x7fffffff)\n        return -1;\n\n    return second_min;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *arr, int n)\n{\n    int i, min, second_min;\n\n    if (n < 2)\n        return -1;\n\n    min = second_min = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (arr[i] < min) {\n            second_min = min;\n            min = arr[i];\n        } else if (arr[i] < second_min && arr[i] != min)\n            second_min = arr[i];\n    }\n\n    if (second_min == 0x7fffffff)\n        return -1;\n\n    return second_min;\n}\n\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 90, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, min2;\n\n  if (n < 2)\n    return -1;\n\n  min = 0x7fffffff;\n  min2 = 0x7fffffff;\n\n  for (i = 0; i < n; i++)\n  {\n    if (a[i] < min)\n    {\n      min2 = min;\n      min = a[i];\n    }\n    else if (a[i] < min2 && a[i] != min)\n      min2 = a[i];\n  }\n\n  if (min2 == 0x7fffffff)\n    return -1;\n\n  return min2;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, min2;\n\n  if (n < 2)\n    return -1;\n\n  min = 0x7fffffff;\n  min2 = 0x7fffffff;\n\n  for (i = 0; i < n; i++)\n  {\n    if (a[i] < min)\n    {\n      min2 = min;\n      min = a[i];\n    }\n    else if (a[i] < min2 && a[i] != min)\n      min2 = a[i];\n  }\n\n  if (min2 == 0x7fffffff)\n    return -1;\n\n  return min2;\n}\n\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 90, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, min2;\n\n  if (n <= 1)\n    return -1;\n\n  min = 0x7fffffff;\n  min2 = 0x7fffffff;\n\n  for (i = 0; i < n; i++)\n  {\n    if (a[i] < min)\n    {\n      min2 = min;\n      min = a[i];\n    }\n    else if (a[i] < min2 && a[i] != min)\n      min2 = a[i];\n  }\n\n  if (min2 == 0x7fffffff)\n    return -1;\n\n  return min2;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, min2;\n\n  if (n <= 1)\n    return -1;\n\n  min = 0x7fffffff;\n  min2 = 0x7fffffff;\n\n  for (i = 0; i < n; i++)\n  {\n    if (a[i] < min)\n    {\n      min2 = min;\n      min = a[i];\n    }\n    else if (a[i] < min2 && a[i] != min)\n      min2 = a[i];\n  }\n\n  if (min2 == 0x7fffffff)\n    return -1;\n\n  return min2;\n}\n\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 90, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}", "model_prediction": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, second_min;\n\n  min = 0x7fffffff;\n  second_min = 0x7fffffff;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] < min) {\n      second_min = min;\n      min = a[i];\n    } else if (a[i] < second_min && a[i] != min) {\n      second_min = a[i];\n    }\n  }\n\n  if (second_min == 0x7fffffff)\n    return -1;\n  else\n    return second_min;\n}", "executed_test": "#include <stdio.h>\n#include <limits.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, second_min;\n\n  min = 0x7fffffff;\n  second_min = 0x7fffffff;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] < min) {\n      second_min = min;\n      min = a[i];\n    } else if (a[i] < second_min && a[i] != min) {\n      second_min = a[i];\n    }\n  }\n\n  if (second_min == 0x7fffffff)\n    return -1;\n  else\n    return second_min;\n}\n\n\nint main() {\n    int test1[] = {1, 2, 3, 4, 5};\n    assert(func0(test1, 5) == 2);\n\n    int test2[] = {5, 1, 4, 3, 2};\n    assert(func0(test2, 5) == 2);\n\n    assert(func0((const int[]){}, 0) == -1);\n\n    int test4[] = {1, 1};\n    assert(func0(test4, 2) == -1);\n\n    int test5[] = {1, 1, 1, 1, 0};\n    assert(func0(test5, 5) == 1);\n\n    int test6[] = {-35, 34, 12, -45};\n    assert(func0(test6, 4) == -35);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 91, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt, flag, flag1;\n    cnt = 0;\n    flag = 0;\n    flag1 = 1;\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (__ctype_b_loc()[(unsigned char)s[i]] & 0x2000 && flag) {\n            flag = 0;\n            cnt++;\n        }\n        if (s[i] == 'I' && flag1)\n            flag = 1;\n        else if (!(__ctype_b_loc()[(unsigned char)s[i]] & 0x2000))\n            flag = 0;\n        if (!(__ctype_b_loc()[(unsigned char)s[i]] & 0x2000))\n            flag1 = 0;\n        if (s[i] == '.' || s[i] == '?' || s[i] == '!')\n            flag1 = 1;\n    }\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt, flag, flag1;\n    cnt = 0;\n    flag = 0;\n    flag1 = 1;\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (__ctype_b_loc()[(unsigned char)s[i]] & 0x2000 && flag) {\n            flag = 0;\n            cnt++;\n        }\n        if (s[i] == 'I' && flag1)\n            flag = 1;\n        else if (!(__ctype_b_loc()[(unsigned char)s[i]] & 0x2000))\n            flag = 0;\n        if (!(__ctype_b_loc()[(unsigned char)s[i]] & 0x2000))\n            flag1 = 0;\n        if (s[i] == '.' || s[i] == '?' || s[i] == '!')\n            flag1 = 1;\n    }\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 91, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int count = 0;\n  int in_word = 0;\n  int in_I = 0;\n  char c;\n\n  while ((c = *s++) != '\\0') {\n    if (__ctype_b_loc()[(unsigned char)c] & 0x002000) {\n      in_word = 1;\n    } else {\n      in_word = 0;\n    }\n\n    if (c == 'I') {\n      in_I = 1;\n    }\n\n    if (in_I && in_word) {\n      count++;\n      in_I = 0;\n    }\n  }\n\n  return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int count = 0;\n  int in_word = 0;\n  int in_I = 0;\n  char c;\n\n  while ((c = *s++) != '\\0') {\n    if (__ctype_b_loc()[(unsigned char)c] & 0x002000) {\n      in_word = 1;\n    } else {\n      in_word = 0;\n    }\n\n    if (c == 'I') {\n      in_I = 1;\n    }\n\n    if (in_I && in_word) {\n      count++;\n      in_I = 0;\n    }\n  }\n\n  return count;\n}\n\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 91, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int count = 0;\n    int in_word = 0;\n    const unsigned char *p = (const unsigned char *)s;\n    const unsigned char *ctype = __ctype_b_loc();\n\n    while (*p) {\n        if (((*ctype)[(unsigned char)(*p)] & (1<<5)) && (*p != 'I')) {\n            in_word = 0;\n        }\n        if (((*ctype)[(unsigned char)(*p)] & (1<<5)) && (*p == 'I')) {\n            in_word = 1;\n        }\n        if (!((*ctype)[(unsigned char)(*p)] & (1<<5)) && in_word) {\n            count++;\n            in_word = 0;\n        }\n        if (!((*ctype)[(unsigned char)(*p)] & (1<<5)) && !in_word && (*p == ' ' || *p == '\\n' || *p == '\\t' || *p == '\\r')) {\n            in_word = 1;\n        }\n        p++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int count = 0;\n    int in_word = 0;\n    const unsigned char *p = (const unsigned char *)s;\n    const unsigned char *ctype = __ctype_b_loc();\n\n    while (*p) {\n        if (((*ctype)[(unsigned char)(*p)] & (1<<5)) && (*p != 'I')) {\n            in_word = 0;\n        }\n        if (((*ctype)[(unsigned char)(*p)] & (1<<5)) && (*p == 'I')) {\n            in_word = 1;\n        }\n        if (!((*ctype)[(unsigned char)(*p)] & (1<<5)) && in_word) {\n            count++;\n            in_word = 0;\n        }\n        if (!((*ctype)[(unsigned char)(*p)] & (1<<5)) && !in_word && (*p == ' ' || *p == '\\n' || *p == '\\t' || *p == '\\r')) {\n            in_word = 1;\n        }\n        p++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 91, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int count = 0;\n    int in_word = 0;\n    const unsigned char *p = (const unsigned char *)s;\n    const unsigned char *ctype = __ctype_b_loc();\n\n    while (*p) {\n        if (((*ctype)[(int)*p] & (1<<5)) && *p != 'I') {\n            in_word = 0;\n        }\n        if (((*ctype)[(int)*p] & (1<<5)) && *p == 'I') {\n            in_word = 1;\n        }\n        if (!in_word && (*p == ' ' || *p == '\\n' || *p == '\\t' || *p == '\\r')) {\n            in_word = 0;\n        }\n        if (!in_word && (*p != ' ' && *p != '\\n' && *p != '\\t' && *p != '\\r')) {\n            in_word = 1;\n            count++;\n        }\n        p++;\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int count = 0;\n    int in_word = 0;\n    const unsigned char *p = (const unsigned char *)s;\n    const unsigned char *ctype = __ctype_b_loc();\n\n    while (*p) {\n        if (((*ctype)[(int)*p] & (1<<5)) && *p != 'I') {\n            in_word = 0;\n        }\n        if (((*ctype)[(int)*p] & (1<<5)) && *p == 'I') {\n            in_word = 1;\n        }\n        if (!in_word && (*p == ' ' || *p == '\\n' || *p == '\\t' || *p == '\\r')) {\n            in_word = 0;\n        }\n        if (!in_word && (*p != ' ' && *p != '\\n' && *p != '\\t' && *p != '\\r')) {\n            in_word = 1;\n            count++;\n        }\n        p++;\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0(\"Hello world\") == 0);\n    assert(func0(\"Is the sky blue?\") == 0);\n    assert(func0(\"I love It !\") == 1);\n    assert(func0(\"bIt\") == 0);\n    assert(func0(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert(func0(\"You and I are going for a walk\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 92, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c &&\n         (a + b == c || a + c == b || b + c == a);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c &&\n         (a + b == c || a + c == b || b + c == a);\n}\n\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 92, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}\n\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 92, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}\n\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 92, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nbool func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nbool func0(float a, float b, float c) {\n  return roundf(a) == a && roundf(b) == b && roundf(c) == c && a == b + c;\n}\n\n\nint main() {\n    assert(func0(2, 3, 1) == 1);\n    assert(func0(2.5, 2, 3) == 0);\n    assert(func0(1.5, 5, 3.5) == 0);\n    assert(func0(2, 6, 2) == 0);\n    assert(func0(4, 2, 2) == 1);\n    assert(func0(2.2, 2.2, 2.2) == 0);\n    assert(func0(-4, 6, 2) == 1);\n    assert(func0(2, 1, 1) == 1);\n    assert(func0(3, 4, 7) == 1);\n    assert(func0(3.01, 4, 7) == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 93, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char c;\n\n    for (i = 0; s[i] != '\\0'; i++) {\n        c = s[i];\n        if (__ctype_b_loc()[(unsigned char)c] & 0x0200)\n            c = toupper(c);\n        else if (__ctype_b_loc()[(unsigned char)c] & 0x0100)\n            c = tolower(c);\n        for (j = 0; \"aeiouAEIOU\"[j] != '\\0'; j++) {\n            if (c == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    c += 2;\n                break;\n            }\n        }\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char c;\n\n    for (i = 0; s[i] != '\\0'; i++) {\n        c = s[i];\n        if (__ctype_b_loc()[(unsigned char)c] & 0x0200)\n            c = toupper(c);\n        else if (__ctype_b_loc()[(unsigned char)c] & 0x0100)\n            c = tolower(c);\n        for (j = 0; \"aeiouAEIOU\"[j] != '\\0'; j++) {\n            if (c == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    c += 2;\n                break;\n            }\n        }\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 93, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0, j = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0, j = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 93, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}", "executed_test": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 93, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}", "executed_test": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i]] & 0x0200)\n            s[i] = __ctype_toupper_loc()[s[i]];\n        else if (__ctype_b_loc()[s[i]] & 0x0100)\n            s[i] = __ctype_tolower_loc()[s[i]];\n        for (j = 0; \"aeiouAEIOU\"[j]; j++)\n            if (s[i] == \"aeiouAEIOU\"[j]) {\n                if (j < 10)\n                    s[i] += 2;\n                break;\n            }\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"TEST\", output);\n    assert(strcmp(output, \"tgst\") == 0);\n\n    func0(\"Mudasir\", output);\n    assert(strcmp(output, \"mWDCSKR\") == 0);\n\n    func0(\"YES\", output);\n    assert(strcmp(output, \"ygs\") == 0);\n\n    func0(\"This is a message\", output);\n    assert(strcmp(output, \"tHKS KS C MGSSCGG\") == 0);\n\n    func0(\"I DoNt KnOw WhAt tO WrItE\", output);\n    assert(strcmp(output, \"k dQnT kNqW wHcT Tq wRkTg\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 94, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    i = 0;\n    j = 0;\n    k = 0;\n    while (k < n) {\n        l = a[k];\n        if (l > 1) {\n            m = 2;\n            while (m * m <= l) {\n                if (l % m == 0) {\n                    break;\n                }\n                m++;\n            }\n            if (m * m > l) {\n                if (i < l) {\n                    i = l;\n                }\n            }\n        }\n        k++;\n    }\n    while (i > 0) {\n        j += i % 10;\n        i /= 10;\n    }\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    i = 0;\n    j = 0;\n    k = 0;\n    while (k < n) {\n        l = a[k];\n        if (l > 1) {\n            m = 2;\n            while (m * m <= l) {\n                if (l % m == 0) {\n                    break;\n                }\n                m++;\n            }\n            if (m * m > l) {\n                if (i < l) {\n                    i = l;\n                }\n            }\n        }\n        k++;\n    }\n    while (i > 0) {\n        j += i % 10;\n        i /= 10;\n    }\n    return j;\n}\n\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 94, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0, tmp;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j < a[i]; j++) {\n                if (a[i] % j == 0)\n                    break;\n            }\n            if (j >= a[i]) {\n                if (a[i] > max)\n                    max = a[i];\n            }\n        }\n    }\n\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0, tmp;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j < a[i]; j++) {\n                if (a[i] % j == 0)\n                    break;\n            }\n            if (j >= a[i]) {\n                if (a[i] > max)\n                    max = a[i];\n            }\n        }\n    }\n\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}\n\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 94, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            if (a[i] < 4) {\n                if (a[i] > max)\n                    max = a[i];\n            } else {\n                for (j = 2; j * j <= a[i]; j++) {\n                    if (a[i] % j == 0)\n                        break;\n                }\n                if (j * j > a[i]) {\n                    if (a[i] > max)\n                        max = a[i];\n                }\n            }\n        }\n    }\n\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            if (a[i] < 4) {\n                if (a[i] > max)\n                    max = a[i];\n            } else {\n                for (j = 2; j * j <= a[i]; j++) {\n                    if (a[i] % j == 0)\n                        break;\n                }\n                if (j * j > a[i]) {\n                    if (a[i] > max)\n                        max = a[i];\n                }\n            }\n        }\n    }\n\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}\n\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 94, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            if (a[i] < 4) {\n                if (a[i] > max)\n                    max = a[i];\n            } else {\n                for (j = 2; j * j <= a[i]; j++) {\n                    if (a[i] % j == 0)\n                        break;\n                }\n                if (j * j > a[i]) {\n                    if (a[i] > max)\n                        max = a[i];\n                }\n            }\n        }\n    }\n\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            if (a[i] < 4) {\n                if (a[i] > max)\n                    max = a[i];\n            } else {\n                for (j = 2; j * j <= a[i]; j++) {\n                    if (a[i] % j == 0)\n                        break;\n                }\n                if (j * j > a[i]) {\n                    if (a[i] > max)\n                        max = a[i];\n                }\n            }\n        }\n    }\n\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n\n    return sum;\n}\n\n\nint main() {\n    int lst1[] = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3};\n    assert(func0(lst1, sizeof(lst1)/sizeof(lst1[0])) == 10);\n\n    int lst2[] = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1};\n    assert(func0(lst2, sizeof(lst2)/sizeof(lst2[0])) == 25);\n\n    int lst3[] = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3};\n    assert(func0(lst3, sizeof(lst3)/sizeof(lst3[0])) == 13);\n\n    int lst4[] = {0,724,32,71,99,32,6,0,5,91,83,0,5,6};\n    assert(func0(lst4, sizeof(lst4)/sizeof(lst4[0])) == 11);\n\n    int lst5[] = {0,81,12,3,1,21};\n    assert(func0(lst5, sizeof(lst5)/sizeof(lst5[0])) == 3);\n\n    int lst6[] = {0,8,1,2,1,7};\n    assert(func0(lst6, sizeof(lst6)/sizeof(lst6[0])) == 7);\n\n    int lst7[] = {8191};\n    assert(func0(lst7, sizeof(lst7)/sizeof(lst7[0])) == 19);\n\n    int lst8[] = {8191, 123456, 127, 7};\n    assert(func0(lst8, sizeof(lst8)/sizeof(lst8[0])) == 19);\n\n    int lst9[] = {127, 97, 8192};\n    assert(func0(lst9, sizeof(lst9)/sizeof(lst9[0])) == 10);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 95, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n    int i, j, upper = 0, lower = 0;\n\n    if (argc == 0)\n        return 0;\n\n    for (i = 0; i < argc; i++) {\n        for (j = 0; argv[i][j]; j++) {\n            if (!(__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0400))\n                return 0;\n            if (__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0100)\n                lower = 1;\n            if (__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0200)\n                upper = 1;\n            if (upper + lower == 2)\n                return 0;\n        }\n    }\n\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n    int i, j, upper = 0, lower = 0;\n\n    if (argc == 0)\n        return 0;\n\n    for (i = 0; i < argc; i++) {\n        for (j = 0; argv[i][j]; j++) {\n            if (!(__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0400))\n                return 0;\n            if (__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0100)\n                lower = 1;\n            if (__ctype_b_loc()[(unsigned char)argv[i][j]] & 0x0200)\n                upper = 1;\n            if (upper + lower == 2)\n                return 0;\n        }\n    }\n\n    return 1;\n}\n\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 95, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const struct testcase_t *testcases, int n)\n{\n  int i;\n  int has_lower = 0;\n  int has_upper = 0;\n\n  for (i = 0; i < n; i++) {\n    const char *s = testcases[i].s;\n    while (*s) {\n      unsigned short ctype = __ctype_b_loc()[*s];\n      if (ctype & (1 << 10)) {\n        if (ctype & (1 << 8)) {\n          if (ctype & (1 << 9)) {\n            return 0;\n          }\n          has_upper = 1;\n        } else {\n          has_lower = 1;\n        }\n      } else {\n        return 0;\n      }\n      if (has_lower + has_upper == 2) {\n        return 0;\n      }\n      s++;\n    }\n  }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const struct testcase_t *testcases, int n)\n{\n  int i;\n  int has_lower = 0;\n  int has_upper = 0;\n\n  for (i = 0; i < n; i++) {\n    const char *s = testcases[i].s;\n    while (*s) {\n      unsigned short ctype = __ctype_b_loc()[*s];\n      if (ctype & (1 << 10)) {\n        if (ctype & (1 << 8)) {\n          if (ctype & (1 << 9)) {\n            return 0;\n          }\n          has_upper = 1;\n        } else {\n          has_lower = 1;\n        }\n      } else {\n        return 0;\n      }\n      if (has_lower + has_upper == 2) {\n        return 0;\n      }\n      s++;\n    }\n  }\n  return 1;\n}\n\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 95, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n  int i, j;\n  int c, d;\n  int s, t;\n\n  if (argc == 0)\n    return 0;\n\n  s = 0;\n  t = 0;\n\n  for (i = 0; i < argc; i++)\n    {\n      for (j = 0; argv[i][j] != '\\0'; j++)\n {\n   c = argv[i][j];\n   d = __ctype_b_loc ()[c];\n\n   if (d & 0x0400)\n     {\n       if (d & 0x0100)\n  {\n    if (d & 0x0200)\n      return 0;\n    s = 1;\n  }\n       else\n  {\n    if (d & 0x0200)\n      t = 1;\n  }\n\n       if (s + t == 2)\n  return 0;\n     }\n   else\n     return 0;\n }\n    }\n\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n  int i, j;\n  int c, d;\n  int s, t;\n\n  if (argc == 0)\n    return 0;\n\n  s = 0;\n  t = 0;\n\n  for (i = 0; i < argc; i++)\n    {\n      for (j = 0; argv[i][j] != '\\0'; j++)\n {\n   c = argv[i][j];\n   d = __ctype_b_loc ()[c];\n\n   if (d & 0x0400)\n     {\n       if (d & 0x0100)\n  {\n    if (d & 0x0200)\n      return 0;\n    s = 1;\n  }\n       else\n  {\n    if (d & 0x0200)\n      t = 1;\n  }\n\n       if (s + t == 2)\n  return 0;\n     }\n   else\n     return 0;\n }\n    }\n\n  return 1;\n}\n\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 95, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n  int i, j, k, l;\n  char *p;\n  unsigned short *ct;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++)\n    {\n      p = argv[i];\n      while (*p)\n {\n   ct = __ctype_b_loc();\n   j = ct[(unsigned char)*p];\n   if (!(j & 0x0400))\n     return 0;\n   if (j & 0x0100)\n     {\n       if (j & 0x0200)\n  return 0;\n       k = 1;\n     }\n   else\n     {\n       if (j & 0x0200)\n  k = 1;\n       else\n  k = 0;\n     }\n   if (k + l == 2)\n     return 0;\n   p++;\n }\n    }\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char **argv, int argc)\n{\n  int i, j, k, l;\n  char *p;\n  unsigned short *ct;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++)\n    {\n      p = argv[i];\n      while (*p)\n {\n   ct = __ctype_b_loc();\n   j = ct[(unsigned char)*p];\n   if (!(j & 0x0400))\n     return 0;\n   if (j & 0x0100)\n     {\n       if (j & 0x0200)\n  return 0;\n       k = 1;\n     }\n   else\n     {\n       if (j & 0x0200)\n  k = 1;\n       else\n  k = 0;\n     }\n   if (k + l == 2)\n     return 0;\n   p++;\n }\n    }\n  return 1;\n}\n\n\nint main() {\n    char* test1[][2] = {{\"p\",\"pineapple\"}, {\"b\",\"banana\"}};\n    assert(func0(test1, 2) == 1);\n\n    char* test2[][2] = {{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}};\n    assert(func0(test2, 3) == 0);\n\n    char* test3[][2] = {{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}};\n    assert(func0(test3, 3) == 0);\n\n    char* test4[][2] = {{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}};\n    assert(func0(test4, 3) == 0);\n\n    char* test5[][2] = {{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"}};\n    assert(func0(test5, 2) == 1);\n\n    char* test6[][2] = {{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"}};\n    assert(func0(test6, 2) == 1);\n\n    assert(func0(NULL, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 96, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, isprime;\n    int *a = malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        isprime = 1;\n        for (j = 0; j < *m; j++) {\n            if (a[j] * a[j] > i)\n                break;\n            if (i % a[j] == 0) {\n                isprime = 0;\n                break;\n            }\n        }\n        if (isprime) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, isprime;\n    int *a = malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        isprime = 1;\n        for (j = 0; j < *m; j++) {\n            if (a[j] * a[j] > i)\n                break;\n            if (i % a[j] == 0) {\n                isprime = 0;\n                break;\n            }\n        }\n        if (isprime) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}\n\n\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 96, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            k = p[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\nnext:\n        ;\n    }\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            k = p[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\nnext:\n        ;\n    }\n    return p;\n}\n\n\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 96, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i <= n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i * i <= p[j])\n                break;\n            if (i % p[j] == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\n    next:;\n    }\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i <= n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i * i <= p[j])\n                break;\n            if (i % p[j] == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\n    next:;\n    }\n    return p;\n}\n\n\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 96, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            k = p[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\nnext:\n        ;\n    }\n    return p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            k = p[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0)\n                goto next;\n        }\n        p[*m] = i;\n        (*m)++;\nnext:\n        ;\n    }\n    return p;\n}\n\n\n\nint issame(int *a, int a_count, int *b, int b_count) {\n    if (a_count != b_count) return 0;\n    for (int i = 0; i < a_count; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int count;\n    int expected[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n    int *result = func0(5, &count);\n    assert(issame(result, count, (const int[]){2, 3}, 2));\n    free(result);\n\n    result = func0(6, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(7, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5}, 3));\n    free(result);\n\n    result = func0(10, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7}, 4));\n    free(result);\n\n    result = func0(0, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(22, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19}, 8));\n    free(result);\n\n    result = func0(1, &count);\n    assert(count == 0);\n    free(result);\n\n    result = func0(18, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17}, 7));\n    free(result);\n\n    result = func0(47, &count);\n    assert(issame(result, count, (const int[]){2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}, 14));\n    free(result);\n\n    result = func0(101, &count);\n    assert(issame(result, count, expected, 25));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 97, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  return (abs(a) % 10) * (abs(b) % 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b) {\n  return (abs(a) % 10) * (abs(b) % 10);\n}\n\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 97, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 97, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}\n\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 97, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}\n\n\nint main() {\n    assert(func0(148, 412) == 16);\n    assert(func0(19, 28) == 72);\n    assert(func0(2020, 1851) == 0);\n    assert(func0(14, -15) == 20);\n    assert(func0(76, 67) == 42);\n    assert(func0(17, 27) == 49);\n    assert(func0(0, 1) == 0);\n    assert(func0(0, 0) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 98, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt;\n\n    cnt = 0;\n    for (i = 0; s[i]; i++) {\n        if (strlen(s) <= 2 * i)\n            break;\n        if (strchr(\"AEIOU\", s[2 * i]))\n            cnt++;\n    }\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt;\n\n    cnt = 0;\n    for (i = 0; s[i]; i++) {\n        if (strlen(s) <= 2 * i)\n            break;\n        if (strchr(\"AEIOU\", s[2 * i]))\n            cnt++;\n    }\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 98, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++)\n        if (strchr(\"AEIOU\", s[i * 2]))\n            cnt++;\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++)\n        if (strchr(\"AEIOU\", s[i * 2]))\n            cnt++;\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 98, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++)\n        if (i < strlen(s) / 2 + 1)\n            if (strchr(\"AEIOU\", s[i * 2]))\n                cnt++;\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++)\n        if (i < strlen(s) / 2 + 1)\n            if (strchr(\"AEIOU\", s[i * 2]))\n                cnt++;\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 98, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++) {\n        if (i > strlen(s) / 2)\n            break;\n        if (strchr(\"AEIOU\", s[i * 2]))\n            cnt++;\n    }\n    return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, cnt = 0;\n    for (i = 0; s[i]; i++) {\n        if (i > strlen(s) / 2)\n            break;\n        if (strchr(\"AEIOU\", s[i * 2]))\n            cnt++;\n    }\n    return cnt;\n}\n\n\nint main() {\n    assert(func0(\"aBCdEf\") == 1);\n    assert(func0(\"abcdefg\") == 0);\n    assert(func0(\"dBBE\") == 0);\n    assert(func0(\"B\") == 0);\n    assert(func0(\"U\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"EEEE\") == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 99, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    double d = atof(s);\n    if (d >= 0.0)\n        return (int)floor(d + 0.5);\n    else\n        return (int)ceil(d - 0.5);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    double d = atof(s);\n    if (d >= 0.0)\n        return (int)floor(d + 0.5);\n    else\n        return (int)ceil(d - 0.5);\n}\n\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 99, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    double d = strtod(s, 0);\n    if (d < 0)\n        return (int)(d - 0.5);\n    else\n        return (int)(d + 0.5);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    double d = strtod(s, 0);\n    if (d < 0)\n        return (int)(d - 0.5);\n    else\n        return (int)(d + 0.5);\n}\n\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 99, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  double d;\n  d = strtod(s, 0);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  double d;\n  d = strtod(s, 0);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}\n\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 99, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  double d;\n  d = strtod(s, 0);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  double d;\n  d = strtod(s, 0);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}\n\n\nint main() {\n    assert(func0(\"10\") == 10);\n    assert(func0(\"14.5\") == 15);\n    assert(func0(\"-15.5\") == -16);\n    assert(func0(\"15.3\") == 15);\n    assert(func0(\"0\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 100, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint *func0(int n)\n{\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (int i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint *func0(int n)\n{\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (int i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n  return a;\n}\n\n\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 100, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n}\n\n\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 100, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint *func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = n + i;\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint *func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = n + i;\n  return a;\n}\n\n\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 100, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = i * 2 + 2;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdbool.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = i * 2 + 2;\n}\n\n\n\nint main() {\n    int* result;\n    int test1[] = {3, 5, 7};\n    int test2[] = {4, 6, 8, 10};\n    int test3[] = {5, 7, 9, 11, 13};\n    int test4[] = {6, 8, 10, 12, 14, 16};\n    int test5[] = {8, 10, 12, 14, 16, 18, 20, 22};\n\n    result = func0(3);\n    for (int i = 0; i < 3; i++) assert(result[i] == test1[i]);\n    free(result);\n\n    result = func0(4);\n    for (int i = 0; i < 4; i++) assert(result[i] == test2[i]);\n    free(result);\n\n    result = func0(5);\n    for (int i = 0; i < 5; i++) assert(result[i] == test3[i]);\n    free(result);\n\n    result = func0(6);\n    for (int i = 0; i < 6; i++) assert(result[i] == test4[i]);\n    free(result);\n\n    result = func0(8);\n    for (int i = 0; i < 8; i++) assert(result[i] == test5[i]);\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 101, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar ** func0(char * str, int * n)\n{\n    int i, j, k, n_max = 10;\n    char ** ret = (char **) malloc(n_max * sizeof(char *));\n    char * tmp = (char *) malloc(strlen(str) + 1);\n    int n_ret = 0;\n    for (i = j = 0; str[i]; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[n_ret++] = strdup(tmp);\n                j = 0;\n                if (n_ret >= n_max) {\n                    n_max *= 2;\n                    ret = (char **) realloc(ret, n_max * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[n_ret++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = n_ret;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar ** func0(char * str, int * n)\n{\n    int i, j, k, n_max = 10;\n    char ** ret = (char **) malloc(n_max * sizeof(char *));\n    char * tmp = (char *) malloc(strlen(str) + 1);\n    int n_ret = 0;\n    for (i = j = 0; str[i]; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[n_ret++] = strdup(tmp);\n                j = 0;\n                if (n_ret >= n_max) {\n                    n_max *= 2;\n                    ret = (char **) realloc(ret, n_max * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[n_ret++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = n_ret;\n    return ret;\n}\n\n\n\n\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 101, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, n_ret = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= n_ret) {\n                    n_ret *= 2;\n                    ret = realloc(ret, n_ret * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, n_ret = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= n_ret) {\n                    n_ret *= 2;\n                    ret = realloc(ret, n_ret * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}\n\n\n\n\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 101, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, n_ret = 0, n_ret_max = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[n_ret++] = strdup(tmp);\n                j = 0;\n                if (n_ret >= n_ret_max) {\n                    n_ret_max *= 2;\n                    ret = realloc(ret, n_ret_max * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[n_ret++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = n_ret;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, n_ret = 0, n_ret_max = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[n_ret++] = strdup(tmp);\n                j = 0;\n                if (n_ret >= n_ret_max) {\n                    n_ret_max *= 2;\n                    ret = realloc(ret, n_ret_max * sizeof(char *));\n                }\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[n_ret++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = n_ret;\n    return ret;\n}\n\n\n\n\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 101, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, len = 10;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= len) {\n                    len *= 2;\n                    ret = realloc(ret, len * sizeof(char *));\n                }\n            }\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, len = 10;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= len) {\n                    len *= 2;\n                    ret = realloc(ret, len * sizeof(char *));\n                }\n            }\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}\n\n\n\n\n\nbool issame(char** a, int a_count, char** b, int b_count) {\n    if (a_count != b_count) return false;\n    for (int i = 0; i < a_count; i++) {\n        if (strcmp(a[i], b[i]) != 0) return false;\n    }\n    return true;\n}\n\nvoid free_words(char** words, int count) {\n    for (int i = 0; i < count; i++)\n        free(words[i]);\n    free(words);\n}\n\nint main() {\n    int count;\n    char** result;\n\n    char* expected1[] = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    result = func0(\"Hi, my name is John\", &count);\n    assert(issame(result, count, expected1, 5));\n    free_words(result, count);\n\n    char* expected2[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One, two, three, four, five, six\", &count);\n    assert(issame(result, count, expected2, 6));\n    free_words(result, count);\n\n    char* expected3[] = {\"Hi\", \"my\", \"name\"};\n    result = func0(\"Hi, my name\", &count);\n    assert(issame(result, count, expected3, 3));\n    free_words(result, count);\n\n    char* expected4[] = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    result = func0(\"One,, two, three, four, five, six,\", &count);\n    assert(issame(result, count, expected4, 6));\n    free_words(result, count);\n\n    char* expected5[] = {};\n    result = func0(\"\", &count);\n    assert(issame(result, count, expected5, 0));\n    free_words(result, count);\n\n    char* expected6[] = {\"ahmed\", \"gamal\"};\n    result = func0(\"ahmed     , gamal\", &count);\n    assert(issame(result, count, expected6, 2));\n    free_words(result, count);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 102, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (b < a)\n    return -1;\n  if (b == a && b % 2 == 1)\n    return -1;\n  if (b % 2 == 1)\n    b--;\n  return b;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (b < a)\n    return -1;\n  if (b == a && b % 2 == 1)\n    return -1;\n  if (b % 2 == 1)\n    b--;\n  return b;\n}\n\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 102, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}\n\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 102, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}\n\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 102, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b)\n{\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}\n\n\nint main() {\n    assert(func0(12, 15) == 14);\n    assert(func0(13, 12) == -1);\n    assert(func0(33, 12354) == 12354);\n    assert(func0(5234, 5233) == -1);\n    assert(func0(6, 29) == 28);\n    assert(func0(27, 10) == -1);\n    assert(func0(7, 7) == -1);\n    assert(func0(546, 546) == 546);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 103, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i--] = c % 2 + '0';\n        c /= 2;\n    }\n    return s + i + 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i--] = c % 2 + '0';\n        c /= 2;\n    }\n    return s + i + 1;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 103, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    int c = a + b;\n    char* s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 30;\n    while (c > 1)\n    {\n        s[i] = (c % 2) + '0';\n        c /= 2;\n        i--;\n    }\n    return s + i + 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    int c = a + b;\n    char* s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 30;\n    while (c > 1)\n    {\n        s[i] = (c % 2) + '0';\n        c /= 2;\n        i--;\n    }\n    return s + i + 1;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 103, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar * func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    return func0_part_0(a, b);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar * func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    return func0_part_0(a, b);\n}\n\n\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 103, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar * func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    int c = a + b;\n    char * s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 30;\n    while (c > 1)\n    {\n        s[i--] = c % 2 + '0';\n        c /= 2;\n    }\n    return s + i + 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nchar * func0(int a, int b)\n{\n    if (a > b)\n        return \"\";\n\n    int c = a + b;\n    char * s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 30;\n    while (c > 1)\n    {\n        s[i--] = c % 2 + '0';\n        c /= 2;\n    }\n    return s + i + 1;\n}\n\n\n\nint main() {\n    assert(strcmp(func0(1, 5), \"11\") == 0);\n    assert(strcmp(func0(7, 13), \"1010\") == 0);\n    assert(strcmp(func0(964, 977), \"1111001010\") == 0);\n    assert(strcmp(func0(996, 997), \"1111100100\") == 0);\n    assert(strcmp(func0(560, 851), \"1011000001\") == 0);\n    assert(strcmp(func0(185, 546), \"101101101\") == 0);\n    assert(strcmp(func0(362, 496), \"110101101\") == 0);\n    assert(strcmp(func0(350, 902), \"1001110010\") == 0);\n    assert(strcmp(func0(197, 233), \"11010111\") == 0);\n    assert(strcmp(func0(7, 5), \"-1\") == 0);\n    assert(strcmp(func0(5, 1), \"-1\") == 0);\n    assert(strcmp(func0(5, 5), \"101\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 104, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    int i, j, k, flag, temp;\n    for (i = 0; i < n; i++)\n    {\n        flag = 0;\n        k = a[i];\n        if (k == 0)\n            flag = 1;\n        while (k > 0)\n        {\n            if (k % 10 == 0)\n                flag = 1;\n            k /= 10;\n        }\n        if (flag == 0)\n        {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n    {\n        for (j = 0; j < *m - i - 1; j++)\n        {\n            if ((*b)[j] > (*b)[j + 1])\n            {\n                temp = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = temp;\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    int i, j, k, flag, temp;\n    for (i = 0; i < n; i++)\n    {\n        flag = 0;\n        k = a[i];\n        if (k == 0)\n            flag = 1;\n        while (k > 0)\n        {\n            if (k % 10 == 0)\n                flag = 1;\n            k /= 10;\n        }\n        if (flag == 0)\n        {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n    {\n        for (j = 0; j < *m - i - 1; j++)\n        {\n            if ((*b)[j] > (*b)[j + 1])\n            {\n                temp = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = temp;\n            }\n        }\n    }\n}\n\n\n\n\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 104, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        if (t > 0) {\n            while (t > 0) {\n                if (t % 10 == 0)\n                    break;\n                t /= 10;\n            }\n            if (t == 0)\n                (*b)[(*m)++] = a[i];\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        if (t > 0) {\n            while (t > 0) {\n                if (t % 10 == 0)\n                    break;\n                t /= 10;\n            }\n            if (t == 0)\n                (*b)[(*m)++] = a[i];\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}\n\n\n\n\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 104, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (t = a[i]; t > 0; t /= 10) {\n            if (t % 10 == 0)\n                break;\n        }\n        if (t > 0)\n            continue;\n        (*b)[(*m)++] = a[i];\n    }\n    for (i = *m - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (t = a[i]; t > 0; t /= 10) {\n            if (t % 10 == 0)\n                break;\n        }\n        if (t > 0)\n            continue;\n        (*b)[(*m)++] = a[i];\n    }\n    for (i = *m - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}\n\n\n\n\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 104, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n        {\n            t = a[i];\n            while (t > 0)\n            {\n                if (t % 10 == 0)\n                    break;\n                t /= 10;\n            }\n            if (t == 0)\n                (*b)[(*m)++] = a[i];\n        }\n    for (i = *m - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if ((*b)[j] > (*b)[j + 1])\n            {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n        {\n            t = a[i];\n            while (t > 0)\n            {\n                if (t % 10 == 0)\n                    break;\n                t /= 10;\n            }\n            if (t == 0)\n                (*b)[(*m)++] = a[i];\n        }\n    for (i = *m - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if ((*b)[j] > (*b)[j + 1])\n            {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}\n\n\n\n\n\nbool issame(int *a, int a_size, int *b, int b_size) {\n    if (a_size != b_size) return false;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    // Test cases\n    int test1[] = {15, 33, 1422, 1};\n    int expected1[] = {1, 15, 33};\n    int *out1;\n    int out1_size;\n    func0(test1, 4, &out1, &out1_size);\n    assert(issame(out1, out1_size, expected1, 3));\n    free(out1);\n\n    int test2[] = {152, 323, 1422, 10};\n    int *out2;\n    int out2_size;\n    func0(test2, 4, &out2, &out2_size);\n    assert(issame(out2, out2_size, NULL, 0));\n    free(out2);\n\n    int test3[] = {12345, 2033, 111, 151};\n    int expected3[] = {111, 151};\n    int *out3;\n    int out3_size;\n    func0(test3, 4, &out3, &out3_size);\n    assert(issame(out3, out3_size, expected3, 2));\n    free(out3);\n\n    int test4[] = {135, 103, 31};\n    int expected4[] = {31, 135};\n    int *out4;\n    int out4_size;\n    func0(test4, 3, &out4, &out4_size);\n    assert(issame(out4, out4_size, expected4, 2));\n    free(out4);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 105, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    char *b[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **)malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = b[a[i]];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    char *b[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **)malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = b[a[i]];\n}\n\n\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 105, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    char *str[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, tmp;\n\n    for (i = n - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (a[j] > a[j + 1]) {\n                tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n\n    *c = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(sizeof(char *) * (*c));\n    for (i = 0, j = 0; i < n; i++)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = str[a[i]];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    char *str[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, tmp;\n\n    for (i = n - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (a[j] > a[j + 1]) {\n                tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n\n    *c = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(sizeof(char *) * (*c));\n    for (i = 0, j = 0; i < n; i++)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = str[a[i]];\n}\n\n\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 105, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    int i, j, t;\n    char *s[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(*c * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = s[a[i]];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    int i, j, t;\n    char *s[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(*c * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = s[a[i]];\n}\n\n\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 105, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    char *str[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, k;\n\n    for (i = n - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (a[j] > a[j + 1]) {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(*c * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = str[a[i]];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    char *str[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j, k;\n\n    for (i = n - 1; i > 0; i--)\n        for (j = 0; j < i; j++)\n            if (a[j] > a[j + 1]) {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*c)++;\n\n    *b = (char **)malloc(*c * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0; i--)\n        if (a[i] >= 1 && a[i] <= 9)\n            (*b)[j++] = str[a[i]];\n}\n\n\n\n\n\nint issame(char **a, int a_size, char **b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char **out;\n    int out_size;\n\n    int test1[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    char *expected1[] = {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"};\n    func0(test1, 8, &out, &out_size);\n    assert(issame(out, out_size, expected1, 8));\n    free(out);\n\n    int test2[] = {};\n    func0(test2, 0, &out, &out_size);\n    assert(issame(out, out_size, NULL, 0));\n    free(out);\n\n    int test3[] = {1, -1, 55};\n    char *expected3[] = {\"One\"};\n    func0(test3, 3, &out, &out_size);\n    assert(issame(out, out_size, expected3, 1));\n    free(out);\n\n    int test4[] = {1, -1, 3, 2};\n    char *expected4[] = {\"Three\", \"Two\", \"One\"};\n    func0(test4, 4, &out, &out_size);\n    assert(issame(out, out_size, expected4, 3));\n    free(out);\n\n    int test5[] = {9, 4, 8};\n    char *expected5[] = {\"Nine\", \"Eight\", \"Four\"};\n    func0(test5, 3, &out, &out_size);\n    assert(issame(out, out_size, expected5, 3));\n    free(out);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 106, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint* func0(int n) {\n  int* arr = (int*)malloc(n * sizeof(int));\n  int sum = 0;\n  int fact = 1;\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n    fact *= i;\n    if (i % 2 == 0) {\n      arr[i - 1] = fact;\n    } else {\n      arr[i - 1] = sum;\n    }\n  }\n  return arr;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint* func0(int n) {\n  int* arr = (int*)malloc(n * sizeof(int));\n  int sum = 0;\n  int fact = 1;\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n    fact *= i;\n    if (i % 2 == 0) {\n      arr[i - 1] = fact;\n    } else {\n      arr[i - 1] = sum;\n    }\n  }\n  return arr;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 106, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n  int *a = malloc(n * sizeof(int));\n\n  for (i = 0; i < n; i++) {\n    sum += i + 1;\n    prod *= i + 1;\n    a[i] = (i % 2 == 0) ? sum : prod;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n  int i;\n  int sum = 0;\n  int prod = 1;\n  int *a = malloc(n * sizeof(int));\n\n  for (i = 0; i < n; i++) {\n    sum += i + 1;\n    prod *= i + 1;\n    a[i] = (i % 2 == 0) ? sum : prod;\n  }\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 106, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  int sum = 0;\n  int prod = 1;\n  for (i = 0; i < n; i++) {\n    prod *= i + 1;\n    sum += i + 1;\n    a[i] = (i + 1) % 2 ? sum : prod;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n  int i;\n  int *a = malloc(n * sizeof(int));\n  int sum = 0;\n  int prod = 1;\n  for (i = 0; i < n; i++) {\n    prod *= i + 1;\n    sum += i + 1;\n    a[i] = (i + 1) % 2 ? sum : prod;\n  }\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 106, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint *func0(int n)\n{\n  int *a;\n  int i;\n  int sum;\n  int prod;\n\n  a = (int *) malloc(n * sizeof(int));\n\n  sum = 0;\n  prod = 1;\n  for (i = 0; i < n; i++) {\n    prod *= (i + 1);\n    sum += (i + 1);\n    a[i] = (i % 2 == 0) ? prod : sum;\n  }\n\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint *func0(int n)\n{\n  int *a;\n  int i;\n  int sum;\n  int prod;\n\n  a = (int *) malloc(n * sizeof(int));\n\n  sum = 0;\n  prod = 1;\n  for (i = 0; i < n; i++) {\n    prod *= (i + 1);\n    sum += (i + 1);\n    a[i] = (i % 2 == 0) ? prod : sum;\n  }\n\n  return a;\n}\n\n\n\n\nint issame(int* a, int a_size, int* b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int *result;\n    int expected1[] = {1, 2, 6, 24, 15};\n    result = func0(5);\n    assert(issame(result, 5, expected1, 5));\n    free(result);\n\n    int expected2[] = {1, 2, 6, 24, 15, 720, 28};\n    result = func0(7);\n    assert(issame(result, 7, expected2, 7));\n    free(result);\n\n    int expected3[] = {1};\n    result = func0(1);\n    assert(issame(result, 1, expected3, 1));\n    free(result);\n\n    int expected4[] = {1, 2, 6};\n    result = func0(3);\n    assert(issame(result, 3, expected4, 3));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 107, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = i, k = 0;\n        while (j) {\n            k = k * 10 + j % 10;\n            j /= 10;\n        }\n        if (i == k) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = i, k = 0;\n        while (j) {\n            k = k * 10 + j % 10;\n            j /= 10;\n        }\n        if (i == k) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 107, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, sum;\n    int *res = (int *)malloc(sizeof(int) * 2);\n    res[0] = 0;\n    res[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        t = i;\n        while (t) {\n            sum = sum * 10 + t % 10;\n            t /= 10;\n        }\n        if (sum == i && i % 2)\n            res[1]++;\n        else if (sum == i)\n            res[0]++;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, sum;\n    int *res = (int *)malloc(sizeof(int) * 2);\n    res[0] = 0;\n    res[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        t = i;\n        while (t) {\n            sum = sum * 10 + t % 10;\n            t /= 10;\n        }\n        if (sum == i && i % 2)\n            res[1]++;\n        else if (sum == i)\n            res[0]++;\n    }\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 107, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, m;\n    int *p = (int *)malloc(2 * sizeof(int));\n    p[0] = 0;\n    p[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = i;\n        m = 0;\n        while (t) {\n            m = m * 10 + t % 10;\n            t /= 10;\n        }\n        if (m == i) {\n            if (i % 2)\n                p[1]++;\n            else\n                p[0]++;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, m;\n    int *p = (int *)malloc(2 * sizeof(int));\n    p[0] = 0;\n    p[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = i;\n        m = 0;\n        while (t) {\n            m = m * 10 + t % 10;\n            t /= 10;\n        }\n        if (m == i) {\n            if (i % 2)\n                p[1]++;\n            else\n                p[0]++;\n        }\n    }\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 107, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, sum;\n    int *p = (int *)malloc(2 * sizeof(int));\n    p[0] = 0;\n    p[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = i;\n        sum = 0;\n        while (t) {\n            sum = sum * 10 + t % 10;\n            t /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0)\n                p[0]++;\n            else\n                p[1]++;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int n)\n{\n    int i, j, k, t, sum;\n    int *p = (int *)malloc(2 * sizeof(int));\n    p[0] = 0;\n    p[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = i;\n        sum = 0;\n        while (t) {\n            sum = sum * 10 + t % 10;\n            t /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0)\n                p[0]++;\n            else\n                p[1]++;\n        }\n    }\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int* result;\n\n    result = func0(123);\n    int expected1[] = {8, 13};\n    assert(issame(result, expected1, 2));\n    free(result);\n\n    result = func0(12);\n    int expected2[] = {4, 6};\n    assert(issame(result, expected2, 2));\n    free(result);\n\n    result = func0(3);\n    int expected3[] = {1, 2};\n    assert(issame(result, expected3, 2));\n    free(result);\n\n    result = func0(63);\n    int expected4[] = {6, 8};\n    assert(issame(result, expected4, 2));\n    free(result);\n\n    result = func0(25);\n    int expected5[] = {5, 6};\n    assert(issame(result, expected5, 2));\n    free(result);\n\n    result = func0(19);\n    int expected6[] = {4, 6};\n    assert(issame(result, expected6, 2));\n    free(result);\n\n    result = func0(9);\n    int expected7[] = {4, 5};\n    assert(issame(result, expected7, 2));\n    free(result);\n\n    result = func0(1);\n    int expected8[] = {0, 1};\n    assert(issame(result, expected8, 2));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 108, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            count++;\n        }\n        else\n        {\n            sum = 0;\n            k = abs(a[i]);\n            while (k > 9)\n            {\n                sum += k % 10;\n                k /= 10;\n            }\n            if (sum - k > 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            count++;\n        }\n        else\n        {\n            sum = 0;\n            k = abs(a[i]);\n            while (k > 9)\n            {\n                sum += k % 10;\n                k /= 10;\n            }\n            if (sum - k > 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 108, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            count++;\n        }\n        else\n        {\n            j = abs(a[i]);\n            sum = 0;\n            while (j > 0)\n            {\n                k = j % 10;\n                sum += k;\n                j /= 10;\n            }\n            if (sum % 10 > 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            count++;\n        }\n        else\n        {\n            j = abs(a[i]);\n            sum = 0;\n            while (j > 0)\n            {\n                k = j % 10;\n                sum += k;\n                j /= 10;\n            }\n            if (sum % 10 > 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 108, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, sum, count = 0;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0)\n      count++;\n    else if (a[i] < -9) {\n      j = -a[i];\n      sum = 0;\n      while (j > 0) {\n        k = j % 10;\n        sum += k;\n        j /= 10;\n      }\n      if (sum - j > 0)\n        count++;\n    }\n  }\n  return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, sum, count = 0;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0)\n      count++;\n    else if (a[i] < -9) {\n      j = -a[i];\n      sum = 0;\n      while (j > 0) {\n        k = j % 10;\n        sum += k;\n        j /= 10;\n      }\n      if (sum - j > 0)\n        count++;\n    }\n  }\n  return count;\n}\n\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 108, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, sum, count = 0;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0)\n      count++;\n    else if (a[i] < -9) {\n      j = -a[i];\n      sum = 0;\n      while (j > 0) {\n        k = j % 10;\n        sum += k;\n        j /= 10;\n      }\n      if (sum - j > 0)\n        count++;\n    }\n  }\n  return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, sum, count = 0;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0)\n      count++;\n    else if (a[i] < -9) {\n      j = -a[i];\n      sum = 0;\n      while (j > 0) {\n        k = j % 10;\n        sum += k;\n        j /= 10;\n      }\n      if (sum - j > 0)\n        count++;\n    }\n  }\n  return count;\n}\n\n\nint main() {\n    assert(func0((const int[]){}, 0) == 0);\n    assert(func0((const int[]){-1, -2, 0}, 3) == 0);\n    assert(func0((const int[]){1, 1, 2, -2, 3, 4, 5}, 7) == 6);\n    assert(func0((const int[]){1, 6, 9, -6, 0, 1, 5}, 7) == 5);\n    assert(func0((const int[]){1, 100, 98, -7, 1, -1}, 6) == 4);\n    assert(func0((const int[]){12, 23, 34, -45, -56, 0}, 6) == 5);\n    assert(func0((const int[]){-0, 1}, 2) == 1);\n    assert(func0((const int[]){1}, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 109, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  j = 0;\n  if (n == 0)\n    return 1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i - 1])\n      j++;\n  if (a[0] < a[n - 1])\n    j++;\n  if (j > 1)\n    return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  j = 0;\n  if (n == 0)\n    return 1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i - 1])\n      j++;\n  if (a[0] < a[n - 1])\n    j++;\n  if (j > 1)\n    return 0;\n  return 1;\n}\n\n\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 109, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, c = 0;\n  if (n == 0)\n    return 1;\n  for (i = 0; i < n - 1; i++)\n    if (a[i] > a[i + 1])\n      c++;\n  if (a[0] > a[n - 1])\n    c++;\n  return c <= 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, c = 0;\n  if (n == 0)\n    return 1;\n  for (i = 0; i < n - 1; i++)\n    if (a[i] > a[i + 1])\n      c++;\n  if (a[0] > a[n - 1])\n    c++;\n  return c <= 1;\n}\n\n\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 109, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, cnt;\n\n  if (n == 0)\n    return 1;\n\n  cnt = 0;\n  for (i = 0; i < n - 1; i++)\n    if (a[i] > a[i + 1])\n      cnt++;\n\n  if (a[0] > a[n - 1])\n    cnt++;\n\n  return cnt <= 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, cnt;\n\n  if (n == 0)\n    return 1;\n\n  cnt = 0;\n  for (i = 0; i < n - 1; i++)\n    if (a[i] > a[i + 1])\n      cnt++;\n\n  if (a[0] > a[n - 1])\n    cnt++;\n\n  return cnt <= 1;\n}\n\n\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 109, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, c = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      c++;\n  return c <= 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i, c = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      c++;\n  return c <= 1;\n}\n\n\n\nint main() {\n    assert(func0((const int[]){3, 4, 5, 1, 2}, 5) == true);\n    assert(func0((const int[]){3, 5, 10, 1, 2}, 5) == true);\n    assert(func0((const int[]){4, 3, 1, 2}, 4) == false);\n    assert(func0((const int[]){3, 5, 4, 1, 2}, 5) == false);\n    assert(func0((const int[]){}, 0) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 110, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, j, k;\n  int n = 0;\n\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      n++;\n\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      n++;\n\n  if (n >= na)\n    return \"OK\";\n  else\n    return \"NOK\";\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, j, k;\n  int n = 0;\n\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      n++;\n\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      n++;\n\n  if (n >= na)\n    return \"OK\";\n  else\n    return \"NOK\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 110, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, c = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      c++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      c++;\n  return c >= na ? \"yes\" : \"no\";\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, c = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      c++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      c++;\n  return c >= na ? \"yes\" : \"no\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 110, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, c = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      c++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      c++;\n  return c >= na ? \"OK\" : \"NO\";\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, c = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      c++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      c++;\n  return c >= na ? \"OK\" : \"NO\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 110, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count;\n\n  count = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      count++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      count++;\n  if (count < na)\n    return \"NO\";\n  return \"YES\";\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int *a, int na, int *b, int nb)\n{\n  int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count;\n\n  count = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      count++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      count++;\n  if (count < na)\n    return \"NO\";\n  return \"YES\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 2, 3, 4}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){1, 5, 3, 4}, 4), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){1, 2, 3, 4}, 4, (const int[]){2, 1, 4, 3}, 4), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 4}, 3), \"YES\") == 0);\n    assert(strcmp(func0((const int[]){5, 7, 3}, 3, (const int[]){2, 6, 3}, 3), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){3, 2, 6, 1, 8, 9}, 6, (const int[]){3, 5, 5, 1, 1, 1}, 6), \"NO\") == 0);\n    assert(strcmp(func0((const int[]){100, 200}, 2, (const int[]){200, 200}, 2), \"YES\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 111, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *freq, int *max, char *max_chars)\n{\n    int i, j, max_freq, max_chars_i;\n    int freq_arr[26] = {0};\n\n    max_freq = 0;\n    max_chars_i = 0;\n\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (s[i] != ' ') {\n            j = s[i] - 'a';\n            freq_arr[j]++;\n            if (freq_arr[j] > max_freq) {\n                max_freq = freq_arr[j];\n            }\n        }\n    }\n\n    for (i = 0; i < 26; i++) {\n        freq[i] = freq_arr[i];\n        if (freq_arr[i] == max_freq) {\n            max_chars[max_chars_i] = i + 'a';\n            max_chars_i++;\n        }\n    }\n\n    *max = max_freq;\n    max_chars[max_chars_i] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *freq, int *max, char *max_chars)\n{\n    int i, j, max_freq, max_chars_i;\n    int freq_arr[26] = {0};\n\n    max_freq = 0;\n    max_chars_i = 0;\n\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (s[i] != ' ') {\n            j = s[i] - 'a';\n            freq_arr[j]++;\n            if (freq_arr[j] > max_freq) {\n                max_freq = freq_arr[j];\n            }\n        }\n    }\n\n    for (i = 0; i < 26; i++) {\n        freq[i] = freq_arr[i];\n        if (freq_arr[i] == max_freq) {\n            max_chars[max_chars_i] = i + 'a';\n            max_chars_i++;\n        }\n    }\n\n    *max = max_freq;\n    max_chars[max_chars_i] = '\\0';\n}\n\n\n\n\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 111, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *max, char *c)\n{\n    int i, j, k, m, n, t[26] = {0};\n    for (i = 0; s[i]; i++)\n        if (s[i] != ' ')\n            t[s[i] - 'a']++;\n    for (i = 0, m = 0; i < 26; i++)\n        if (t[i] > m)\n            m = t[i];\n    for (i = 0, j = 0; i < 26; i++)\n        a[i] = t[i], t[i] == m ? c[j++] = i + 'a' : 0;\n    c[j] = '\\0';\n    *max = m;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *max, char *c)\n{\n    int i, j, k, m, n, t[26] = {0};\n    for (i = 0; s[i]; i++)\n        if (s[i] != ' ')\n            t[s[i] - 'a']++;\n    for (i = 0, m = 0; i < 26; i++)\n        if (t[i] > m)\n            m = t[i];\n    for (i = 0, j = 0; i < 26; i++)\n        a[i] = t[i], t[i] == m ? c[j++] = i + 'a' : 0;\n    c[j] = '\\0';\n    *max = m;\n}\n\n\n\n\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 111, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *b, char *c)\n{\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    int aa[26] = {0};\n    int bb[26] = {0};\n    int cc[26] = {0};\n    int dd[26] = {0};\n    int ee[26] = {0};\n    int ff[26] = {0};\n    int gg[26] = {0};\n    int hh[26] = {0};\n    int ii[26] = {0};\n    int jj[26] = {0};\n    int kk[26] = {0};\n    int ll[26] = {0};\n    int mm[26] = {0};\n    int nn[26] = {0};\n    int oo[26] = {0};\n    int pp[26] = {0};\n    int qq[26] = {0};\n    int rr[26] = {0};\n    int ss[26] = {0};\n    int tt[26] = {0};\n    int uu[26] = {0};\n    int vv[26] = {0};\n    int ww[26] = {0};\n    int xx[26] = {0};\n    int yy[26] = {0};\n    int zz[26] = {0};\n    int max = 0;\n    int count = 0;\n    int index = 0;\n    int index2 = 0;\n    int index3 = 0;\n    int index4 = 0;\n    int index5 = 0;\n    int index6 = 0;\n    int index7 = 0;\n    int index8 = 0;\n    int index9 = 0;\n    int index10 = 0;\n    int index11 = 0;\n    int index12 = 0;\n    int index13 = 0;\n", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *b, char *c)\n{\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    int aa[26] = {0};\n    int bb[26] = {0};\n    int cc[26] = {0};\n    int dd[26] = {0};\n    int ee[26] = {0};\n    int ff[26] = {0};\n    int gg[26] = {0};\n    int hh[26] = {0};\n    int ii[26] = {0};\n    int jj[26] = {0};\n    int kk[26] = {0};\n    int ll[26] = {0};\n    int mm[26] = {0};\n    int nn[26] = {0};\n    int oo[26] = {0};\n    int pp[26] = {0};\n    int qq[26] = {0};\n    int rr[26] = {0};\n    int ss[26] = {0};\n    int tt[26] = {0};\n    int uu[26] = {0};\n    int vv[26] = {0};\n    int ww[26] = {0};\n    int xx[26] = {0};\n    int yy[26] = {0};\n    int zz[26] = {0};\n    int max = 0;\n    int count = 0;\n    int index = 0;\n    int index2 = 0;\n    int index3 = 0;\n    int index4 = 0;\n    int index5 = 0;\n    int index6 = 0;\n    int index7 = 0;\n    int index8 = 0;\n    int index9 = 0;\n    int index10 = 0;\n    int index11 = 0;\n    int index12 = 0;\n    int index13 = 0;\n\n\n\n\n\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 111, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *b, char *c)\n{\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    int aa[26] = {0};\n    int bb[26] = {0};\n    int cc[26] = {0};\n    int dd[26] = {0};\n    int ee[26] = {0};\n    int ff[26] = {0};\n    int gg[26] = {0};\n    int hh[26] = {0};\n    int ii[26] = {0};\n    int jj[26] = {0};\n    int kk[26] = {0};\n    int ll[26] = {0};\n    int mm[26] = {0};\n    int nn[26] = {0};\n    int oo[26] = {0};\n    int pp[26] = {0};\n    int qq[26] = {0};\n    int rr[26] = {0};\n    int ss[26] = {0};\n    int tt[26] = {0};\n    int uu[26] = {0};\n    int vv[26] = {0};\n    int ww[26] = {0};\n    int xx[26] = {0};\n    int yy[26] = {0};\n    int zz[26] = {0};\n    int max = 0;\n    int count = 0;\n    while (*s != '\\0')\n    {\n        if (*s == ' ')\n        {\n            s++;\n            continue;\n        }\n        aa[*s - 'a']++;\n        if (aa[*s - 'a'] > max)\n        {\n            max = aa[*s - 'a'];\n        }\n        s++;\n    }\n    for (i = 0; i < 26; i++)", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\nvoid func0(char *s, int *a, int *b, char *c)\n{\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    int aa[26] = {0};\n    int bb[26] = {0};\n    int cc[26] = {0};\n    int dd[26] = {0};\n    int ee[26] = {0};\n    int ff[26] = {0};\n    int gg[26] = {0};\n    int hh[26] = {0};\n    int ii[26] = {0};\n    int jj[26] = {0};\n    int kk[26] = {0};\n    int ll[26] = {0};\n    int mm[26] = {0};\n    int nn[26] = {0};\n    int oo[26] = {0};\n    int pp[26] = {0};\n    int qq[26] = {0};\n    int rr[26] = {0};\n    int ss[26] = {0};\n    int tt[26] = {0};\n    int uu[26] = {0};\n    int vv[26] = {0};\n    int ww[26] = {0};\n    int xx[26] = {0};\n    int yy[26] = {0};\n    int zz[26] = {0};\n    int max = 0;\n    int count = 0;\n    while (*s != '\\0')\n    {\n        if (*s == ' ')\n        {\n            s++;\n            continue;\n        }\n        aa[*s - 'a']++;\n        if (aa[*s - 'a'] > max)\n        {\n            max = aa[*s - 'a'];\n        }\n        s++;\n    }\n    for (i = 0; i < 26; i++)\n\n\n\n\n\nbool issame(int* freq1, const char* letters1, int max_count1, int* freq2, const char* letters2, int max_count2) {\n    if (max_count1 != max_count2) return false;\n    for (int i = 0; letters1[i] != '\\0'; i++) {\n        if (freq1[letters1[i] - 'a'] != freq2[letters1[i] - 'a']) return false;\n    }\n    for (int i = 0; letters2[i] != '\\0'; i++) {\n        if (freq2[letters2[i] - 'a'] != freq1[letters2[i] - 'a']) return false;\n    }\n    return true;\n}\n\nint main() {\n    int counts1[26], counts2[26];\n    int max_count1, max_count2;\n    char letters1[27], letters2[27];\n\n    func0(\"a b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c a b\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 2;\n    counts2['b' - 'a'] = 2;\n    assert(issame(counts1, letters1, max_count1, counts2, \"ab\", 2));\n\n    func0(\"a b c d g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = counts2['b' - 'a'] = counts2['c' - 'a'] = counts2['d' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"abcdg\", 1));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"b b b b a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['b' - 'a'] = 4;\n    assert(issame(counts1, letters1, max_count1, counts2, \"b\", 4));\n\n    func0(\"r t g\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['r' - 'a'] = counts2['t' - 'a'] = counts2['g' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"rtg\", 1));\n\n    func0(\"a\", counts1, &max_count1, letters1);\n    memset(counts2, 0, sizeof(counts2));\n    counts2['a' - 'a'] = 1;\n    assert(issame(counts1, letters1, max_count1, counts2, \"a\", 1));\n    \n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 112, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *delim, char *str1, char *str2)\n{\n    int i, j, k, len, flag;\n    char *temp;\n    temp = (char *)malloc(sizeof(char) * (strlen(str) + 1));\n    k = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        flag = 0;\n        for (j = 0; delim[j] != '\\0'; j++)\n        {\n            if (str[i] == delim[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0)\n        {\n            temp[k] = str[i];\n            k++;\n        }\n    }\n    temp[k] = '\\0';\n    len = strlen(temp);\n    flag = 1;\n    for (i = 0; i < len / 2; i++)\n    {\n        if (temp[i] != temp[len - 1 - i])\n        {\n            flag = 0;\n            break;\n        }\n    }\n    strcpy(str1, temp);\n    strcpy(str2, flag ? \"True\" : \"False\");\n    free(temp);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *delim, char *str1, char *str2)\n{\n    int i, j, k, len, flag;\n    char *temp;\n    temp = (char *)malloc(sizeof(char) * (strlen(str) + 1));\n    k = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        flag = 0;\n        for (j = 0; delim[j] != '\\0'; j++)\n        {\n            if (str[i] == delim[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0)\n        {\n            temp[k] = str[i];\n            k++;\n        }\n    }\n    temp[k] = '\\0';\n    len = strlen(temp);\n    flag = 1;\n    for (i = 0; i < len / 2; i++)\n    {\n        if (temp[i] != temp[len - 1 - i])\n        {\n            flag = 0;\n            break;\n        }\n    }\n    strcpy(str1, temp);\n    strcpy(str2, flag ? \"True\" : \"False\");\n    free(temp);\n}\n\n\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 112, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res1, char *res2)\n{\n    int i, j, k, len;\n    char *p;\n    char *rev;\n\n    p = s;\n    rev = (char *)malloc(strlen(s) + 1);\n    i = 0;\n    while (*p != '\\0') {\n        j = 0;\n        while (t[j] != '\\0') {\n            if (t[j] == *p) {\n                break;\n            }\n            j++;\n        }\n        if (t[j] == '\\0') {\n            rev[i] = *p;\n            i++;\n        }\n        p++;\n    }\n    rev[i] = '\\0';\n\n    len = strlen(rev);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (rev[i] != rev[j]) {\n            strcpy(res1, rev);\n            strcpy(res2, \"False\");\n            free(rev);\n            return;\n        }\n    }\n    strcpy(res1, rev);\n    strcpy(res2, \"True\");\n    free(rev);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res1, char *res2)\n{\n    int i, j, k, len;\n    char *p;\n    char *rev;\n\n    p = s;\n    rev = (char *)malloc(strlen(s) + 1);\n    i = 0;\n    while (*p != '\\0') {\n        j = 0;\n        while (t[j] != '\\0') {\n            if (t[j] == *p) {\n                break;\n            }\n            j++;\n        }\n        if (t[j] == '\\0') {\n            rev[i] = *p;\n            i++;\n        }\n        p++;\n    }\n    rev[i] = '\\0';\n\n    len = strlen(rev);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (rev[i] != rev[j]) {\n            strcpy(res1, rev);\n            strcpy(res2, \"False\");\n            free(rev);\n            return;\n        }\n    }\n    strcpy(res1, rev);\n    strcpy(res2, \"True\");\n    free(rev);\n}\n\n\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 112, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res, char *ans)\n{\n    int i, j, k, len;\n    char *p, *q, *r;\n\n    len = strlen(s);\n    p = (char *)malloc(sizeof(char) * (len + 1));\n    i = 0;\n    j = 0;\n    while (s[i] != '\\0') {\n        while (t[j] != '\\0' && s[i] != t[j]) {\n            j++;\n        }\n        if (s[i] == t[j]) {\n            p[i] = s[i];\n            i++;\n        }\n    }\n    p[i] = '\\0';\n    q = p;\n    r = p;\n    while (*q != '\\0') {\n        q++;\n    }\n    k = q - r;\n    for (i = 0; i < k / 2; i++) {\n        if (p[i] != p[k - i - 1]) {\n            memcpy(res, p, k + 1);\n            strcpy(ans, \"False\");\n            free(p);\n            return;\n        }\n    }\n    memcpy(res, p, k + 1);\n    strcpy(ans, \"True\");\n    free(p);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res, char *ans)\n{\n    int i, j, k, len;\n    char *p, *q, *r;\n\n    len = strlen(s);\n    p = (char *)malloc(sizeof(char) * (len + 1));\n    i = 0;\n    j = 0;\n    while (s[i] != '\\0') {\n        while (t[j] != '\\0' && s[i] != t[j]) {\n            j++;\n        }\n        if (s[i] == t[j]) {\n            p[i] = s[i];\n            i++;\n        }\n    }\n    p[i] = '\\0';\n    q = p;\n    r = p;\n    while (*q != '\\0') {\n        q++;\n    }\n    k = q - r;\n    for (i = 0; i < k / 2; i++) {\n        if (p[i] != p[k - i - 1]) {\n            memcpy(res, p, k + 1);\n            strcpy(ans, \"False\");\n            free(p);\n            return;\n        }\n    }\n    memcpy(res, p, k + 1);\n    strcpy(ans, \"True\");\n    free(p);\n}\n\n\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 112, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res, char *ans)\n{\n    int i, j, k, len;\n    char *p, *q, *r;\n\n    len = strlen(s);\n    p = (char *)malloc(sizeof(char) * (len + 1));\n    i = 0;\n    j = 0;\n    while (s[i] != '\\0') {\n        while (t[j] != '\\0' && s[i] != t[j]) {\n            j++;\n        }\n        if (s[i] == t[j]) {\n            p[i] = s[i];\n            i++;\n        }\n    }\n    p[i] = '\\0';\n    r = p;\n    while (*r != '\\0') {\n        r++;\n    }\n    q = p;\n    while (q < r) {\n        if (*q != *(r - 1)) {\n            memcpy(res, p, r - p + 1);\n            strcpy(ans, \"False\");\n            free(p);\n            return;\n        }\n        q++;\n        r--;\n    }\n    memcpy(res, p, r - p + 1);\n    strcpy(ans, \"True\");\n    free(p);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t, char *res, char *ans)\n{\n    int i, j, k, len;\n    char *p, *q, *r;\n\n    len = strlen(s);\n    p = (char *)malloc(sizeof(char) * (len + 1));\n    i = 0;\n    j = 0;\n    while (s[i] != '\\0') {\n        while (t[j] != '\\0' && s[i] != t[j]) {\n            j++;\n        }\n        if (s[i] == t[j]) {\n            p[i] = s[i];\n            i++;\n        }\n    }\n    p[i] = '\\0';\n    r = p;\n    while (*r != '\\0') {\n        r++;\n    }\n    q = p;\n    while (q < r) {\n        if (*q != *(r - 1)) {\n            memcpy(res, p, r - p + 1);\n            strcpy(ans, \"False\");\n            free(p);\n            return;\n        }\n        q++;\n        r--;\n    }\n    memcpy(res, p, r - p + 1);\n    strcpy(ans, \"True\");\n    free(p);\n}\n\n\n\nint main() {\n    char result[100];\n    char palindrome[6];\n\n    func0(\"abcde\", \"ae\", result, palindrome);\n    assert(strcmp(result, \"bcd\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdef\", \"b\", result, palindrome);\n    assert(strcmp(result, \"acdef\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"abcdedcba\", \"ab\", result, palindrome);\n    assert(strcmp(result, \"cdedc\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"dwik\", \"w\", result, palindrome);\n    assert(strcmp(result, \"dik\") == 0 && strcmp(palindrome, \"False\") == 0);\n\n    func0(\"a\", \"a\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"abcdedcba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abcdedcba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"vabba\", \"v\", result, palindrome);\n    assert(strcmp(result, \"abba\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    func0(\"mamma\", \"mia\", result, palindrome);\n    assert(strcmp(result, \"\") == 0 && strcmp(palindrome, \"True\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 113, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** strs, int strsSize){\n    char** result = (char**)malloc(sizeof(char*)*strsSize);\n    for(int i = 0; i < strsSize; i++){\n        int count = 0;\n        for(int j = 0; strs[i][j] != '\\0'; j++){\n            if(strs[i][j] >= '0' && strs[i][j] <= '9'){\n                if((strs[i][j] - '0') % 2 == 1){\n                    count++;\n                }\n            }\n        }\n        result[i] = (char*)malloc(sizeof(char)*100);\n        sprintf(result[i], \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** strs, int strsSize){\n    char** result = (char**)malloc(sizeof(char*)*strsSize);\n    for(int i = 0; i < strsSize; i++){\n        int count = 0;\n        for(int j = 0; strs[i][j] != '\\0'; j++){\n            if(strs[i][j] >= '0' && strs[i][j] <= '9'){\n                if((strs[i][j] - '0') % 2 == 1){\n                    count++;\n                }\n            }\n        }\n        result[i] = (char*)malloc(sizeof(char)*100);\n        sprintf(result[i], \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}\n\n\n\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 113, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        int count = 0;\n        char* str = argv[i];\n        while (*str != '\\0') {\n            if (*str >= '0' && *str <= '9') {\n                if ((*str - '0') % 2 == 1) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        int count = 0;\n        char* str = argv[i];\n        while (*str != '\\0') {\n            if (*str >= '0' && *str <= '9') {\n                if ((*str - '0') % 2 == 1) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}\n\n\n\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 113, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        char* str = argv[i];\n        int count = 0;\n        while (*str) {\n            if (*str >= '0' && *str <= '9') {\n                if (*str % 2) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        char* str = argv[i];\n        int count = 0;\n        while (*str) {\n            if (*str >= '0' && *str <= '9') {\n                if (*str % 2) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}\n\n\n\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 113, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        char* str = argv[i];\n        int count = 0;\n        while (*str) {\n            if (*str >= '0' && *str <= '9') {\n                if (*str % 2) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(char** argv, int argc) {\n    char** result = (char**)malloc(argc * sizeof(char*));\n    for (int i = 0; i < argc; i++) {\n        char* str = argv[i];\n        int count = 0;\n        while (*str) {\n            if (*str >= '0' && *str <= '9') {\n                if (*str % 2) {\n                    count++;\n                }\n            }\n            str++;\n        }\n        result[i] = (char*)malloc(100 * sizeof(char));\n        __sprintf_chk(result[i], 1, 100, \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n    }\n    return result;\n}\n\n\n\n\nint issame(char **a, char **b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (strcmp(a[i], b[i]) != 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    char *input1[] = {\"1234567\"};\n    char *expected1[] = {\"the number of odd elements 4 in the string 4 of the 4 input.\"};\n    char **result1 = func0(input1, 1);\n    assert(issame(result1, expected1, 1));\n\n    char *input2[] = {\"3\", \"11111111\"};\n    char *expected2[] = {\n        \"the number of odd elements 1 in the string 1 of the 1 input.\",\n        \"the number of odd elements 8 in the string 8 of the 8 input.\"\n    };\n    char **result2 = func0(input2, 2);\n    assert(issame(result2, expected2, 2));\n\n    char *input3[] = {\"271\", \"137\", \"314\"};\n    char *expected3[] = {\n        \"the number of odd elements 2 in the string 2 of the 2 input.\",\n        \"the number of odd elements 3 in the string 3 of the 3 input.\",\n        \"the number of odd elements 2 in the string 2 of the 2 input.\"\n    };\n    char **result3 = func0(input3, 3);\n    assert(issame(result3, expected3, 3));\n\n    // Free the allocated memory\n    for (int i = 0; i < 1; i++) free(result1[i]);\n    free(result1);\n    for (int i = 0; i < 2; i++) free(result2[i]);\n    free(result2);\n    for (int i = 0; i < 3; i++) free(result3[i]);\n    free(result3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 114, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = a[0];\n  int min = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0) {\n      sum += a[i];\n    } else {\n      sum = a[i];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = a[0];\n  int min = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0) {\n      sum += a[i];\n    } else {\n      sum = a[i];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\n\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 114, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, sum;\n\n  min = a[0];\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      sum += a[i];\n    else\n      sum = a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, min, sum;\n\n  min = a[0];\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      sum += a[i];\n    else\n      sum = a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}\n\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 114, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(long *a, int n)\n{\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < min)\n      min = a[i];\n  }\n  return min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(long *a, int n)\n{\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < min)\n      min = a[i];\n  }\n  return min;\n}\n\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 114, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(long *a, int n)\n{\n  long min = a[0];\n  long sum = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    sum += a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(long *a, int n)\n{\n  long min = a[0];\n  long sum = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    sum += a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}\n\n\nint main() {\n    long long nums1[] = {2, 3, 4, 1, 2, 4};\n    assert(func0(nums1, 6) == 1);\n\n    long long nums2[] = {-1, -2, -3};\n    assert(func0(nums2, 3) == -6);\n\n    long long nums3[] = {-1, -2, -3, 2, -10};\n    assert(func0(nums3, 5) == -14);\n\n    long long nums4[] = {-9999999999999999};\n    assert(func0(nums4, 1) == -9999999999999999);\n\n    long long nums5[] = {0, 10, 20, 1000000};\n    assert(func0(nums5, 4) == 0);\n\n    long long nums6[] = {-1, -2, -3, 10, -5};\n    assert(func0(nums6, 5) == -6);\n\n    long long nums7[] = {100, -1, -2, -3, 10, -5};\n    assert(func0(nums7, 6) == -6);\n\n    long long nums8[] = {10, 11, 13, 8, 3, 4};\n    assert(func0(nums8, 6) == 3);\n\n    long long nums9[] = {100, -33, 32, -1, 0, -2};\n    assert(func0(nums9, 6) == -33);\n\n    long long nums10[] = {-10};\n    assert(func0(nums10, 1) == -10);\n\n    long long nums11[] = {7};\n    assert(func0(nums11, 1) == 7);\n\n    long long nums12[] = {1, -1};\n    assert(func0(nums12, 2) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 115, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, res = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            res += (sum + k - 1) / k;\n    }\n\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, res = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            res += (sum + k - 1) / k;\n    }\n\n    return res;\n}\n\n\n\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 115, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int p)\n{\n    int i, j, sum = 0;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n    }\n    return sum / p;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int p)\n{\n    int i, j, sum = 0;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n    }\n    return sum / p;\n}\n\n\n\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 115, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, res = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            res += (sum + k - 1) / k;\n    }\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, res = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            res += (sum + k - 1) / k;\n    }\n    return res;\n}\n\n\n\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 115, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, ans = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            ans += (sum + k - 1) / k;\n    }\n    return ans;\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, ans = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            ans += (sum + k - 1) / k;\n    }\n    return ans;\n}\n\n\n\n\nint main() {\n    int rows, cols, capacity;\n    int **grid;\n    \n    // Test case 1\n    rows = 3; cols = 4; capacity = 1;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid1_data[3][4] = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid1_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 6);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 2\n    rows = 4; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid2_data[4][4] = {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid2_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 5);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 3\n    rows = 2; cols = 3; capacity = 5;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid3_data[2][3] = {{0,0,0}, {0,0,0}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid3_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 0);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 4\n    rows = 2; cols = 4; capacity = 2;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid4_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid4_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 4);\n    for (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    // Test case 5\n    rows = 2; cols = 4; capacity = 9;\n    grid = (int **)malloc(rows * sizeof(int *));\n    int grid5_data[2][4] = {{1,1,1,1}, {1,1,1,1}};\n    for (int i = 0; i < rows; i++) {\n        grid[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j < cols; j++) {\n            grid[i][j] = grid5_data[i][j];\n        }\n    }\n    assert(func0(grid, rows, cols, capacity) == 2);\nfor (int i = 0; i < rows; i++) free(grid[i]);\n    free(grid);\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 116, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, s1, s2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            s1 = s2 = 0;\n            t = a[j];\n            for (s1 = 0; a[i] > 0; a[i] >>= 1)\n                s1 += a[i] & 1;\n            for (s2 = 0; t > 0; t >>= 1)\n                s2 += t & 1;\n            if (s1 > s2 || (s1 == s2 && a[j] < a[i])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, s1, s2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            s1 = s2 = 0;\n            t = a[j];\n            for (s1 = 0; a[i] > 0; a[i] >>= 1)\n                s1 += a[i] & 1;\n            for (s2 = 0; t > 0; t >>= 1)\n                s2 += t & 1;\n            if (s1 > s2 || (s1 == s2 && a[j] < a[i])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 116, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, c1, c2;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++) {\n            c1 = c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, c1, c2;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++) {\n            c1 = c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 116, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, c1, c2, flag;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++) {\n            c1 = c2 = 0;\n            flag = 1;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, t, c1, c2, flag;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++) {\n            c1 = c2 = 0;\n            flag = 1;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 116, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, k, l, m, t;\n    for (i = 0; i < n - 1; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            t = 0;\n            for (k = a[i], l = 0; k; k >>= 1)\n                l += k & 1;\n            for (k = a[j], m = 0; k; k >>= 1)\n                m += k & 1;\n            if (l > m || (l == m && a[i] > a[j]))\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n)\n{\n    int i, j, k, l, m, t;\n    for (i = 0; i < n - 1; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            t = 0;\n            for (k = a[i], l = 0; k; k >>= 1)\n                l += k & 1;\n            for (k = a[j], m = 0; k; k >>= 1)\n                m += k & 1;\n            if (l > m || (l == m && a[i] > a[j]))\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 5, 2, 3, 4};\n    int expected1[] = {1, 2, 4, 3, 5};\n    func0(test1, 5);\n    assert(issame(test1, 5, expected1, 5));\n\n    int test3[] = {1, 0, 2, 3, 4};\n    int expected3[] = {0, 1, 2, 4, 3};\n    func0(test3, 5);\n    assert(issame(test3, 5, expected3, 5));\n\n    int test4[] = {2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4};\n    int expected4[] = {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77};\n    func0(test4, 11);\n    assert(issame(test4, 11, expected4, 11));\n\n    int test5[] = {3, 6, 44, 12, 32, 5};\n    int expected5[] = {32, 3, 5, 6, 12, 44};\n    func0(test5, 6);\n    assert(issame(test5, 6, expected5, 6));\n\n    int test6[] = {2, 4, 8, 16, 32};\n    int expected6[] = {2, 4, 8, 16, 32};\n    func0(test6, 5);\n    assert(issame(test6, 5, expected6, 5));\n\n    printf(\"All tests passed!\\n\");\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 117, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar ** func0(char * str, int n, int * size)\n{\n    char ** result = NULL;\n    int i, j, k, count = 0, start = 0;\n    size_t len = strlen(str);\n    char * temp = (char *)malloc(len + 1);\n\n    for (i = 0; i <= len; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x2000 || str[i] == '\\0')\n        {\n            if (count == n)\n            {\n                temp[i - start] = '\\0';\n                result = (char **)realloc(result, (k + 1) * sizeof(char *));\n                result[k] = (char *)malloc(strlen(temp) + 1);\n                strcpy(result[k], temp);\n                k++;\n            }\n            start = i + 1;\n            count = 0;\n        }\n        else\n        {\n            temp[i - start] = str[i];\n            if (strchr(\"aeiouAEIOU\", str[i]) == NULL && __ctype_b_loc()[(unsigned char)str[i]] & 0x400)\n                count++;\n        }\n    }\n\n    free(temp);\n    *size = k;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar ** func0(char * str, int n, int * size)\n{\n    char ** result = NULL;\n    int i, j, k, count = 0, start = 0;\n    size_t len = strlen(str);\n    char * temp = (char *)malloc(len + 1);\n\n    for (i = 0; i <= len; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x2000 || str[i] == '\\0')\n        {\n            if (count == n)\n            {\n                temp[i - start] = '\\0';\n                result = (char **)realloc(result, (k + 1) * sizeof(char *));\n                result[k] = (char *)malloc(strlen(temp) + 1);\n                strcpy(result[k], temp);\n                k++;\n            }\n            start = i + 1;\n            count = 0;\n        }\n        else\n        {\n            temp[i - start] = str[i];\n            if (strchr(\"aeiouAEIOU\", str[i]) == NULL && __ctype_b_loc()[(unsigned char)str[i]] & 0x400)\n                count++;\n        }\n    }\n\n    free(temp);\n    *size = k;\n    return result;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 117, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char* str, int n, int* retSize)\n{\n    int i, j, k, count, len, num;\n    char **res, *tmp;\n    const char *p;\n    const struct _ctype_t *ct;\n\n    len = strlen(str);\n    tmp = (char *)malloc(len + 1);\n    ct = __ctype_b_loc();\n    count = num = 0;\n    res = NULL;\n    for (i = j = 0; i < len; i++) {\n        if (ct->_table[(unsigned char)str[i]] & 0x20) {\n            if (count == n) {\n                tmp[i - j] = '\\0';\n                res = (char **)realloc(res, ++num * sizeof(char *));\n                res[num - 1] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(res[num - 1], tmp);\n            }\n            count = 0;\n            j = i + 1;\n        } else {\n            if (str[i] != '\\0') {\n                tmp[i - j] = str[i];\n                if (!(ct->_table[(unsigned char)str[i]] & 0x400) &&\n                    strchr(\"aeiouAEIOU\", str[i]) == NULL)\n                    count++;\n            }\n        }\n    }\n    free(tmp);\n    *retSize = num;\n    return res;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char* str, int n, int* retSize)\n{\n    int i, j, k, count, len, num;\n    char **res, *tmp;\n    const char *p;\n    const struct _ctype_t *ct;\n\n    len = strlen(str);\n    tmp = (char *)malloc(len + 1);\n    ct = __ctype_b_loc();\n    count = num = 0;\n    res = NULL;\n    for (i = j = 0; i < len; i++) {\n        if (ct->_table[(unsigned char)str[i]] & 0x20) {\n            if (count == n) {\n                tmp[i - j] = '\\0';\n                res = (char **)realloc(res, ++num * sizeof(char *));\n                res[num - 1] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(res[num - 1], tmp);\n            }\n            count = 0;\n            j = i + 1;\n        } else {\n            if (str[i] != '\\0') {\n                tmp[i - j] = str[i];\n                if (!(ct->_table[(unsigned char)str[i]] & 0x400) &&\n                    strchr(\"aeiouAEIOU\", str[i]) == NULL)\n                    count++;\n            }\n        }\n    }\n    free(tmp);\n    *retSize = num;\n    return res;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 117, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, l, len, count, count2;\n    char **arr, *temp;\n    const char *p;\n    const int *ct;\n\n    len = strlen(str);\n    temp = (char *)malloc(len + 1);\n    ct = __ctype_b_loc();\n\n    count = count2 = j = 0;\n    arr = NULL;\n    for (i = 0; i <= len; i++)\n    {\n        if (!(ct[(unsigned char)str[i]] & 0x0020) && str[i] != '\\0' && !(ct[(unsigned char)str[i]] & 0x400) && !strchr(\"aeiouAEIOU\", str[i]))\n            count++;\n        else\n        {\n            if (count == n)\n            {\n                count2++;\n                temp[i - j] = '\\0';\n                arr = (char **)realloc(arr, count2 * sizeof(char *));\n                arr[count2 - 1] = (char *)malloc(strlen(temp) + 1);\n                memcpy(arr[count2 - 1], temp, strlen(temp) + 1);\n            }\n            count = 0;\n            j = i + 1;\n        }\n    }\n    free(temp);\n    *m = count2;\n    return arr;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, l, len, count, count2;\n    char **arr, *temp;\n    const char *p;\n    const int *ct;\n\n    len = strlen(str);\n    temp = (char *)malloc(len + 1);\n    ct = __ctype_b_loc();\n\n    count = count2 = j = 0;\n    arr = NULL;\n    for (i = 0; i <= len; i++)\n    {\n        if (!(ct[(unsigned char)str[i]] & 0x0020) && str[i] != '\\0' && !(ct[(unsigned char)str[i]] & 0x400) && !strchr(\"aeiouAEIOU\", str[i]))\n            count++;\n        else\n        {\n            if (count == n)\n            {\n                count2++;\n                temp[i - j] = '\\0';\n                arr = (char **)realloc(arr, count2 * sizeof(char *));\n                arr[count2 - 1] = (char *)malloc(strlen(temp) + 1);\n                memcpy(arr[count2 - 1], temp, strlen(temp) + 1);\n            }\n            count = 0;\n            j = i + 1;\n        }\n    }\n    free(temp);\n    *m = count2;\n    return arr;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 117, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, l, count, len, vowel;\n    char **arr, *temp;\n    const char *vowels = \"aeiouAEIOU\";\n    const char *p;\n    const int *ctype_b;\n\n    len = strlen(str);\n    temp = (char *)malloc(len + 1);\n    ctype_b = __ctype_b_loc();\n\n    count = vowel = j = k = 0;\n    for (i = 0; i <= len; i++) {\n        if (ctype_b[(unsigned char)str[i]] & 0x0020) {\n            if (n == vowel) {\n                count++;\n                temp[i - j] = '\\0';\n                arr = (char **)realloc(arr, count * sizeof(char *));\n                arr[count - 1] = (char *)malloc(strlen(temp) + 1);\n                memcpy(arr[count - 1], temp, strlen(temp) + 1);\n            }\n            vowel = 0;\n            j = i + 1;\n        } else if (str[i] != '\\0') {\n            temp[i - j] = str[i];\n            if (strchr(vowels, str[i]) == NULL) {\n                if (!(ctype_b[(unsigned char)str[i]] & 0x0400))\n                    vowel++;\n            }\n        }\n    }\n    free(temp);\n    *m = count;\n    return arr;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, l, count, len, vowel;\n    char **arr, *temp;\n    const char *vowels = \"aeiouAEIOU\";\n    const char *p;\n    const int *ctype_b;\n\n    len = strlen(str);\n    temp = (char *)malloc(len + 1);\n    ctype_b = __ctype_b_loc();\n\n    count = vowel = j = k = 0;\n    for (i = 0; i <= len; i++) {\n        if (ctype_b[(unsigned char)str[i]] & 0x0020) {\n            if (n == vowel) {\n                count++;\n                temp[i - j] = '\\0';\n                arr = (char **)realloc(arr, count * sizeof(char *));\n                arr[count - 1] = (char *)malloc(strlen(temp) + 1);\n                memcpy(arr[count - 1], temp, strlen(temp) + 1);\n            }\n            vowel = 0;\n            j = i + 1;\n        } else if (str[i] != '\\0') {\n            temp[i - j] = str[i];\n            if (strchr(vowels, str[i]) == NULL) {\n                if (!(ctype_b[(unsigned char)str[i]] & 0x0400))\n                    vowel++;\n            }\n        }\n    }\n    free(temp);\n    *m = count;\n    return arr;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int count) {\n    for (int i = 0; i < count; i++) {\n        free(words[i]);\n    }\n    free(words);\n}\n\nint main() {\n    int size;\n    char **words;\n    \n    words = func0(\"Mary had a little lamb\", 4, &size);\n    char *expected1[] = {\"little\"};\n    assert(issame(words, size, expected1, 1));\n    free_words(words, size);\n\n    words = func0(\"Mary had a little lamb\", 3, &size);\n    char *expected2[] = {\"Mary\", \"lamb\"};\n    assert(issame(words, size, expected2, 2));\n    free_words(words, size);\n\n    words = func0(\"simple white space\", 2, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"Hello world\", 4, &size);\n    char *expected3[] = {\"world\"};\n    assert(issame(words, size, expected3, 1));\n    free_words(words, size);\n\n    words = func0(\"Uncle sam\", 3, &size);\n    char *expected4[] = {\"Uncle\"};\n    assert(issame(words, size, expected4, 1));\n    free_words(words, size);\n\n    words = func0(\"\", 4, &size);\n    assert(size == 0);\n    free_words(words, size);\n\n    words = func0(\"a b c d e f\", 1, &size);\n    char *expected5[] = {\"b\", \"c\", \"d\", \"f\"};\n    assert(issame(words, size, expected5, 4));\n    free_words(words, size);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 118, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i = strlen(s) - 2;\n    while (i > 0) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n        i--;\n    }\n    out[0] = 0;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i = strlen(s) - 2;\n    while (i > 0) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n        i--;\n    }\n    out[0] = 0;\n    return out;\n}\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 118, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i;\n    for (i = strlen(s); i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) &&\n            !strchr(\"AEIOUaeiou\", s[i + 1]) &&\n            !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n    }\n    out[0] = 0;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i;\n    for (i = strlen(s); i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) &&\n            !strchr(\"AEIOUaeiou\", s[i + 1]) &&\n            !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n    }\n    out[0] = 0;\n    return out;\n}\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 118, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i, len;\n\n    len = strlen(s);\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n    }\n    out[0] = 0;\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    static char out[2] = {0};\n    int i, len;\n\n    len = strlen(s);\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            return out;\n        }\n    }\n    out[0] = 0;\n    return out;\n}\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 118, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s) {\n    static char out[2];\n    int len = strlen(s);\n    int i;\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            out[1] = '\\0';\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char* s) {\n    static char out[2];\n    int len = strlen(s);\n    int i;\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) && !strchr(\"AEIOUaeiou\", s[i - 1])) {\n            out[0] = s[i];\n            out[1] = '\\0';\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"yogurt\"), \"u\") == 0);\n    assert(strcmp(func0(\"full\"), \"u\") == 0);\n    assert(strcmp(func0(\"easy\"), \"\") == 0);\n    assert(strcmp(func0(\"eAsy\"), \"\") == 0);\n    assert(strcmp(func0(\"ali\"), \"\") == 0);\n    assert(strcmp(func0(\"bad\"), \"a\") == 0);\n    assert(strcmp(func0(\"most\"), \"o\") == 0);\n    assert(strcmp(func0(\"ab\"), \"\") == 0);\n    assert(strcmp(func0(\"ba\"), \"\") == 0);\n    assert(strcmp(func0(\"quick\"), \"\") == 0);\n    assert(strcmp(func0(\"anime\"), \"i\") == 0);\n    assert(strcmp(func0(\"Asia\"), \"\") == 0);\n    assert(strcmp(func0(\"Above\"), \"o\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 119, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    int i, cnt = 0, len1 = strlen(s1), len2 = strlen(s2), flag = 1;\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            cnt++;\n        if (s1[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            cnt++;\n        if (s2[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    if (cnt == 0 && flag)\n        return \"YES\";\n    cnt = 0, flag = 1;\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            cnt++;\n        if (s2[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            cnt++;\n        if (s1[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    if (cnt == 0 && flag)\n        return \"YES\";\n    return \"NO\";\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    int i, cnt = 0, len1 = strlen(s1), len2 = strlen(s2), flag = 1;\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            cnt++;\n        if (s1[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            cnt++;\n        if (s2[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    if (cnt == 0 && flag)\n        return \"YES\";\n    cnt = 0, flag = 1;\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            cnt++;\n        if (s2[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            cnt++;\n        if (s1[i] == ')')\n            cnt--;\n        if (cnt < 0)\n            flag = 0;\n    }\n    if (cnt == 0 && flag)\n        return \"YES\";\n    return \"NO\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 119, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = i;\n    l = j;\n    m = i;\n    n = j;\n    o = i;\n    p = j;\n    q = i;\n    r = j;\n    s = i;\n    t = j;\n    u = i;\n    v = j;\n    w = i;\n    x = j;\n    y = i;\n    z = j;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k =", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = i;\n    l = j;\n    m = i;\n    n = j;\n    o = i;\n    p = j;\n    q = i;\n    r = j;\n    s = i;\n    t = j;\n    u = i;\n    v = j;\n    w = i;\n    x = j;\n    y = i;\n    z = j;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k = l;\n    l = m;\n    m = n;\n    n = o;\n    o = p;\n    p = q;\n    q = r;\n    r = s;\n    s = t;\n    t = u;\n    u = v;\n    v = w;\n    w = x;\n    x = y;\n    y = z;\n    z = i;\n    i = j;\n    j = k;\n    k =\n\n\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 119, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    s = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        } else {\n            m = 1;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            n++;\n        } else if (s2[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            o = 0;\n        } else {\n            o = 1;\n        }\n    }\n    if (l == 0 && m == 1 && n == 0 && o == 1) {\n        return \"YES\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            p++;\n        } else if (s1[k] == ')') {\n            p--;\n        }\n        if (p < 0) {\n            q = 0;\n        } else {\n            q = 1;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            r++;\n", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    s = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        } else {\n            m = 1;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            n++;\n        } else if (s2[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            o = 0;\n        } else {\n            o = 1;\n        }\n    }\n    if (l == 0 && m == 1 && n == 0 && o == 1) {\n        return \"YES\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            p++;\n        } else if (s1[k] == ')') {\n            p--;\n        }\n        if (p < 0) {\n            q = 0;\n        } else {\n            q = 1;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            r++;\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 119, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    if (l == 0 && m == 1) {\n        return \"YES\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    if (l == 0 && m == 1) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nchar* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    if (l == 0 && m == 1) {\n        return \"YES\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            m = 0;\n        }\n    }\n    if (l == 0 && m == 1) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"()(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \")\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(())\", \"())())\"), \"No\") == 0);\n    assert(strcmp(func0(\")())\", \"(()()(\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"(())))\", \"(()())((\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"()\", \"())\"), \"No\") == 0);\n    assert(strcmp(func0(\"(()(\", \"()))()\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"((((\", \"((())\"), \"No\") == 0);\n    assert(strcmp(func0(\")(()\", \"(()(\"), \"No\") == 0);\n    assert(strcmp(func0(\")(\", \")(\"), \"No\") == 0);\n    assert(strcmp(func0(\"(\", \")\"), \"Yes\") == 0);\n    assert(strcmp(func0(\")\", \"(\"), \"Yes\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 120, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int m, int *b)\n{\n    int i, j, k;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[i + n - m];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int m, int *b)\n{\n    int i, j, k;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[i + n - m];\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 120, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int k, int *b)\n{\n  int i, j, t;\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n  for (i = 0; i < k; i++)\n    b[i] = a[n - k + i];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int k, int *b)\n{\n  int i, j, t;\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n  for (i = 0; i < k; i++)\n    b[i] = a[n - k + i];\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 120, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int k, int *b)\n{\n  int i, j, t;\n\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n\n  for (i = 0; i < k; i++)\n    b[i] = a[n - k + i];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int k, int *b)\n{\n  int i, j, t;\n\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n\n  for (i = 0; i < k; i++)\n    b[i] = a[n - k + i];\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 120, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int m, int *b)\n{\n  int i, j, t;\n\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n\n  for (i = 0; i < m; i++)\n    b[i] = a[n - m + i];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int m, int *b)\n{\n  int i, j, t;\n\n  for (i = n - 1; i > 0; i--)\n    for (j = 0; j < i; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n\n  for (i = 0; i < m; i++)\n    b[i] = a[n - m + i];\n}\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {-3, -4, 5};\n    int out1[3];\n    func0(arr1, 3, 3, out1);\n    int expected1[] = {-4, -3, 5};\n    assert(issame(out1, expected1, 3));\n\n    int arr2[] = {4, -4, 4};\n    int out2[2];\n    func0(arr2, 3, 2, out2);\n    int expected2[] = {4, 4};\n    assert(issame(out2, expected2, 2));\n\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int out3[1];\n    func0(arr3, 7, 1, out3);\n    int expected3[] = {2};\n    assert(issame(out3, expected3, 1));\n\n    int arr4[] = {123, -123, 20, 0, 1, 2, -3};\n    int out4[3];\n    func0(arr4, 7, 3, out4);\n    int expected4[] = {2, 20, 123};\n    assert(issame(out4, expected4, 3));\n\n    int arr5[] = {-123, 20, 0, 1, 2, -3};\n    int out5[4];\n    func0(arr5, 6, 4, out5);\n    int expected5[] = {0, 1, 2, 20};\n    assert(issame(out5, expected5, 4));\n\n    int arr6[] = {5, 15, 0, 3, -13, -8, 0};\n    int out6[7];\n    func0(arr6, 7, 7, out6);\n    int expected6[] = {-13, -8, 0, 0, 3, 5, 15};\n    assert(issame(out6, expected6, 7));\n\n    int arr7[] = {-1, 0, 2, 5, 3, -10};\n    int out7[2];\n    func0(arr7, 6, 2, out7);\n    int expected7[] = {3, 5};\n    assert(issame(out7, expected7, 2));\n\n    int arr8[] = {1, 0, 5, -7};\n    int out8[1];\n    func0(arr8, 4, 1, out8);\n    int expected8[] = {5};\n    assert(issame(out8, expected8, 1));\n\n    int arr9[] = {4, -4};\n    int out9[2];\n    func0(arr9, 2, 2, out9);\n    int expected9[] = {-4, 4};\n    assert(issame(out9, expected9, 2));\n\n    int arr10[] = {-10, 10};\n    int out10[2];\n    func0(arr10, 2, 2, out10);\n    int expected10[] = {-10, 10};\n    assert(issame(out10, expected10, 2));\n\n    int arr11[] = {1, 2, 3, -23, 243, -400, 0};\n    int out11[0];\n    func0(arr11, 7, 0, out11); // Empty output expected\n    int expected11[] = {}; // Empty array\n    assert(issame(out11, expected11, 0));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 121, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[2*i] % 2 == 1)\n      sum += a[2*i];\n\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n/2; i++)\n    if (a[2*i] % 2 == 1)\n      sum += a[2*i];\n\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 121, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 121, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 121, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {5, 8, 7, 1};\n    assert(func0(test1, 4) == 12);\n\n    int test2[] = {3, 3, 3, 3, 3};\n    assert(func0(test2, 5) == 9);\n\n    int test3[] = {30, 13, 24, 321};\n    assert(func0(test3, 4) == 0);\n\n    int test4[] = {5, 9};\n    assert(func0(test4, 2) == 5);\n\n    int test5[] = {2, 4, 8};\n    assert(func0(test5, 3) == 0);\n\n    int test6[] = {30, 13, 23, 32};\n    assert(func0(test6, 4) == 23);\n\n    int test7[] = {3, 13, 2, 9};\n    assert(func0(test7, 4) == 3);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 122, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > -100 && a[i] < 100)\n      sum += a[i];\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > -100 && a[i] < 100)\n      sum += a[i];\n  }\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 122, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] + 99 < 200)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] + 99 < 200)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 122, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] >= 100 && a[i] < 200)\n      sum += a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] >= 100 && a[i] < 200)\n      sum += a[i];\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 122, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++)\n    sum += (a[i] < 100) ? a[i] : 0;\n\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++)\n    sum += (a[i] < 100) ? a[i] : 0;\n\n  return sum;\n}\n\n\nint main() {\n    int test1[] = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    assert(func0(test1, 3) == -4);\n\n    int test2[] = {111, 121, 3, 4000, 5, 6};\n    assert(func0(test2, 2) == 0);\n\n    int test3[] = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    assert(func0(test3, 4) == 125);\n\n    int test4[] = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    assert(func0(test4, 4) == 24);\n    \n    int test5[] = {1};\n    assert(func0(test5, 1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 123, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    int *b;\n    int size = 10;\n\n    *len = 1;\n    a[0] = 1;\n    b = a;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                b = realloc(b, size * sizeof(int));\n            }\n            b[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = b[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (b[j] <= k) {\n                break;\n            }\n            b[j + 1] = b[j];\n        }\n        b[j + 1] = k;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    int *b;\n    int size = 10;\n\n    *len = 1;\n    a[0] = 1;\n    b = a;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                b = realloc(b, size * sizeof(int));\n            }\n            b[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = b[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (b[j] <= k) {\n                break;\n            }\n            b[j + 1] = b[j];\n        }\n        b[j + 1] = k;\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 123, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *arr, int *len)\n{\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len + 1 >= 10) {\n                arr = realloc(arr, (*len + 1) * 2 * sizeof(int));\n            }\n            arr[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (int i = 1; i < *len; i++) {\n        int j = i - 1;\n        int tmp = arr[i];\n        while (j >= 0 && arr[j] > tmp) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = tmp;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *arr, int *len)\n{\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len + 1 >= 10) {\n                arr = realloc(arr, (*len + 1) * 2 * sizeof(int));\n            }\n            arr[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (int i = 1; i < *len; i++) {\n        int j = i - 1;\n        int tmp = arr[i];\n        while (j >= 0 && arr[j] > tmp) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = tmp;\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 123, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            n = 3 * n + 1;\n            if (*len + 1 > 10) {\n                a = realloc(a, 2 * (*len + 1) * sizeof(int));\n            }\n            a[(*len)++] = n;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] <= t) {\n                break;\n            }\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = t;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            n = 3 * n + 1;\n            if (*len + 1 > 10) {\n                a = realloc(a, 2 * (*len + 1) * sizeof(int));\n            }\n            a[(*len)++] = n;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] <= t) {\n                break;\n            }\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = t;\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 123, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            n = 3 * n + 1;\n            if (*len + 1 > 10) {\n                a = realloc(a, 2 * (*len + 1) * sizeof(int));\n            }\n            a[(*len)++] = n;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] <= t) {\n                break;\n            }\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = t;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            n = 3 * n + 1;\n            if (*len + 1 > 10) {\n                a = realloc(a, 2 * (*len + 1) * sizeof(int));\n            }\n            a[(*len)++] = n;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] <= t) {\n                break;\n            }\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = t;\n    }\n}\n\n\n\nint issame(int *a, int size_a, int *b, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    int *result;\n\n    // Test 1\n    int expected1[] = {1, 5, 7, 11, 13, 17};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(14, result, &size);\n    assert(issame(result, size, expected1, 6));\n    free(result);\n\n    // Test 2\n    int expected2[] = {1, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(5, result, &size);\n    assert(issame(result, size, expected2, 2));\n    free(result);\n\n    // Test 3\n    int expected3[] = {1, 3, 5};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(12, result, &size);\n    assert(issame(result, size, expected3, 3));\n    free(result);\n\n    // Test 4\n    int expected4[] = {1};\n    result = (int*)malloc(100 * sizeof(int));\n    func0(1, result, &size);\n    assert(issame(result, size, expected4, 1));\n    free(result);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 124, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n\n    for (int i = 0; i < 10; i++)\n    {\n        if (i == 2 || i == 5)\n        {\n            if (str[i] != '-')\n                return 0;\n        }\n        else\n        {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    char year[3];\n    year[0] = str[0];\n    year[1] = str[1];\n    year[2] = '\\0';\n\n    char month[3];\n    month[0] = str[3];\n    month[1] = str[4];\n    month[2] = '\\0';\n\n    char day[3];\n    day[0] = str[6];\n    day[1] = str[7];\n    day[2] = str[8];\n    day[3] = str[9];\n    day[4] = '\\0';\n\n    int y = atoi(year);\n    int m = atoi(month);\n    int d = atoi(day);\n\n    if (y < 1 || y > 12)\n        return 0;\n\n    if (m < 1 || m > 31)\n        return 0;\n\n    if ((y == 4 || y == 6 || y == 9 || y == 11) && m == 31)\n        return 0;\n\n    if (y == 2 && m > 29)\n        return 0;\n\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n\n    for (int i = 0; i < 10; i++)\n    {\n        if (i == 2 || i == 5)\n        {\n            if (str[i] != '-')\n                return 0;\n        }\n        else\n        {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    char year[3];\n    year[0] = str[0];\n    year[1] = str[1];\n    year[2] = '\\0';\n\n    char month[3];\n    month[0] = str[3];\n    month[1] = str[4];\n    month[2] = '\\0';\n\n    char day[3];\n    day[0] = str[6];\n    day[1] = str[7];\n    day[2] = str[8];\n    day[3] = str[9];\n    day[4] = '\\0';\n\n    int y = atoi(year);\n    int m = atoi(month);\n    int d = atoi(day);\n\n    if (y < 1 || y > 12)\n        return 0;\n\n    if (m < 1 || m > 31)\n        return 0;\n\n    if ((y == 4 || y == 6 || y == 9 || y == 11) && m == 31)\n        return 0;\n\n    if (y == 2 && m > 29)\n        return 0;\n\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 124, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i;\n    int len = strlen(str);\n    if (len != 12)\n        return 0;\n    for (i = 0; i < 12; i++)\n    {\n        if ((i == 2 || i == 5) && str[i] != '-')\n            return 0;\n        if (str[i] < '0' || str[i] > '9')\n            return 0;\n    }\n    char month[3];\n    char day[3];\n    char year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n    int m = strtol(month, NULL, 10);\n    int d = strtol(day, NULL, 10);\n    int y = strtol(year, NULL, 10);\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2)\n    {\n        if (d > 29)\n            return 0;\n    }\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i;\n    int len = strlen(str);\n    if (len != 12)\n        return 0;\n    for (i = 0; i < 12; i++)\n    {\n        if ((i == 2 || i == 5) && str[i] != '-')\n            return 0;\n        if (str[i] < '0' || str[i] > '9')\n            return 0;\n    }\n    char month[3];\n    char day[3];\n    char year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n    int m = strtol(month, NULL, 10);\n    int d = strtol(day, NULL, 10);\n    int y = strtol(year, NULL, 10);\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2)\n    {\n        if (d > 29)\n            return 0;\n    }\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 124, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i;\n    int flag = 0;\n    char month[3];\n    char day[3];\n    char year[5];\n    int m, d, y;\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++)\n    {\n        if (i == 2 || i == 5)\n        {\n            if (str[i] != '-')\n                return 0;\n        }\n        else if (str[i] < '0' || str[i] > '9')\n            return 0;\n    }\n\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n\n    m = strtol(month, NULL, 10);\n    d = strtol(day, NULL, 10);\n    y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12 || d < 1 || d > 31 || y < 0 || y > 9999)\n        return 0;\n\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d > 30)\n        return 0;\n\n    if (m == 2)\n    {\n        if (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0))\n        {\n            if (d > 29)\n                return 0;\n        }\n        else\n        {\n            if (d > 28)\n                return 0;\n        }\n    }\n\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    int i;\n    int flag = 0;\n    char month[3];\n    char day[3];\n    char year[5];\n    int m, d, y;\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++)\n    {\n        if (i == 2 || i == 5)\n        {\n            if (str[i] != '-')\n                return 0;\n        }\n        else if (str[i] < '0' || str[i] > '9')\n            return 0;\n    }\n\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n\n    m = strtol(month, NULL, 10);\n    d = strtol(day, NULL, 10);\n    y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12 || d < 1 || d > 31 || y < 0 || y > 9999)\n        return 0;\n\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d > 30)\n        return 0;\n\n    if (m == 2)\n    {\n        if (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0))\n        {\n            if (d > 29)\n                return 0;\n        }\n        else\n        {\n            if (d > 28)\n                return 0;\n        }\n    }\n\n    return 1;\n}\n\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 124, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n    if (str[0] < '0' || str[0] > '9')\n        return 0;\n    if (str[1] < '0' || str[1] > '9')\n        return 0;\n    if (str[1] != '-')\n        return 0;\n    if (str[3] < '0' || str[3] > '9')\n        return 0;\n    if (str[4] < '0' || str[4] > '9')\n        return 0;\n    if (str[5] != '-')\n        return 0;\n    if (str[7] < '0' || str[7] > '9')\n        return 0;\n    if (str[8] < '0' || str[8] > '9')\n        return 0;\n    if (str[9] < '0' || str[9] > '9')\n        return 0;\n\n    char month[3];\n    char day[3];\n    char year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[7];\n    year[1] = str[8];\n    year[2] = str[9];\n    year[3] = '\\0';\n\n    int m = strtol(month, NULL, 10);\n    int d = strtol(day, NULL, 10);\n    int y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if (d > 30)\n            return", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n    if (str[0] < '0' || str[0] > '9')\n        return 0;\n    if (str[1] < '0' || str[1] > '9')\n        return 0;\n    if (str[1] != '-')\n        return 0;\n    if (str[3] < '0' || str[3] > '9')\n        return 0;\n    if (str[4] < '0' || str[4] > '9')\n        return 0;\n    if (str[5] != '-')\n        return 0;\n    if (str[7] < '0' || str[7] > '9')\n        return 0;\n    if (str[8] < '0' || str[8] > '9')\n        return 0;\n    if (str[9] < '0' || str[9] > '9')\n        return 0;\n\n    char month[3];\n    char day[3];\n    char year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[7];\n    year[1] = str[8];\n    year[2] = str[9];\n    year[3] = '\\0';\n\n    int m = strtol(month, NULL, 10);\n    int d = strtol(day, NULL, 10);\n    int y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if (d > 30)\n            return\n\n\n\nint main() {\n    assert(func0(\"03-11-2000\") == 1);\n    assert(func0(\"15-01-2012\") == 0);\n    assert(func0(\"04-0-2040\") == 0);\n    assert(func0(\"06-04-2020\") == 1);\n    assert(func0(\"01-01-2007\") == 1);\n    assert(func0(\"03-32-2011\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"04-31-3000\") == 0);\n    assert(func0(\"06-06-2005\") == 1);\n    assert(func0(\"21-31-2000\") == 0);\n    assert(func0(\"04-12-2003\") == 1);\n    assert(func0(\"04122003\") == 0);\n    assert(func0(\"20030412\") == 0);\n    assert(func0(\"2003-04\") == 0);\n    assert(func0(\"2003-04-12\") == 0);\n    assert(func0(\"04-2003\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 125, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar ** func0(char * str, int * size)\n{\n    int i, j, k, len, count = 0, num = 0;\n    char ** result, temp[12];\n\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x200 && (str[i] - 'a') % 2 == 1)\n            num++;\n    }\n\n    if (strchr(str, ' ') || strchr(str, ','))\n    {\n        result = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = 0, j = 0; i <= len; i++)\n        {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0')\n            {\n                if (count > 0)\n                {\n                    temp[count] = '\\0';\n                    result[j] = strdup(temp);\n                    j++;\n                    count = 0;\n                }\n            }\n            else\n            {\n                temp[count] = str[i];\n                count++;\n            }\n        }\n    }\n    else\n    {\n        result = (char **)malloc(sizeof(char *));\n        result[0] = (char *)malloc(sizeof(char) * 12);\n        sprintf(result[0], \"%d\", num);\n        j = 1;\n    }\n\n    *size = j;\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar ** func0(char * str, int * size)\n{\n    int i, j, k, len, count = 0, num = 0;\n    char ** result, temp[12];\n\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (__ctype_b_loc()[(unsigned char)str[i]] & 0x200 && (str[i] - 'a') % 2 == 1)\n            num++;\n    }\n\n    if (strchr(str, ' ') || strchr(str, ','))\n    {\n        result = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = 0, j = 0; i <= len; i++)\n        {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0')\n            {\n                if (count > 0)\n                {\n                    temp[count] = '\\0';\n                    result[j] = strdup(temp);\n                    j++;\n                    count = 0;\n                }\n            }\n            else\n            {\n                temp[count] = str[i];\n                count++;\n            }\n        }\n    }\n    else\n    {\n        result = (char **)malloc(sizeof(char *));\n        result[0] = (char *)malloc(sizeof(char) * 12);\n        sprintf(result[0], \"%d\", num);\n        j = 1;\n    }\n\n    *size = j;\n    return result;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 125, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 125, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret, tmp[12];\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (count > 0) {\n                tmp[count] = '\\0';\n                ret[i] = strdup(tmp);\n                count = 0;\n            }\n        } else {\n            tmp[count++] = str[i];\n        }\n    }\n    *n = i;\n    ret = malloc(sizeof(char *) * (*n));\n    ret[0] = malloc(sizeof(char) * 12);\n    __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret, tmp[12];\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (count > 0) {\n                tmp[count] = '\\0';\n                ret[i] = strdup(tmp);\n                count = 0;\n            }\n        } else {\n            tmp[count++] = str[i];\n        }\n    }\n    *n = i;\n    ret = malloc(sizeof(char *) * (*n));\n    ret[0] = malloc(sizeof(char) * 12);\n    __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 125, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len = strlen(str);\n    char **ret, tmp[12];\n\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = malloc(sizeof(char *) * (len + 1));\n        for (i = j = 0; i < len; i++) {\n            if (str[i] == ' ' || str[i] == ',') {\n                if (j) {\n                    tmp[j] = '\\0';\n                    ret[i] = strdup(tmp);\n                    j = 0;\n                }\n            } else {\n                tmp[j++] = str[i];\n            }\n        }\n        *n = i;\n    } else {\n        int vowels = 0;\n        const unsigned char *map = __ctype_b_loc();\n        for (i = 0; i < len; i++) {\n            if (map[(unsigned char)str[i]] & (1 << 1) && (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u')) {\n                vowels++;\n            }\n        }\n        ret = malloc(sizeof(char *));\n        ret[0] = malloc(sizeof(char) * 12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", vowels);\n        i = 1;\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len = strlen(str);\n    char **ret, tmp[12];\n\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = malloc(sizeof(char *) * (len + 1));\n        for (i = j = 0; i < len; i++) {\n            if (str[i] == ' ' || str[i] == ',') {\n                if (j) {\n                    tmp[j] = '\\0';\n                    ret[i] = strdup(tmp);\n                    j = 0;\n                }\n            } else {\n                tmp[j++] = str[i];\n            }\n        }\n        *n = i;\n    } else {\n        int vowels = 0;\n        const unsigned char *map = __ctype_b_loc();\n        for (i = 0; i < len; i++) {\n            if (map[(unsigned char)str[i]] & (1 << 1) && (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u')) {\n                vowels++;\n            }\n        }\n        ret = malloc(sizeof(char *));\n        ret[0] = malloc(sizeof(char) * 12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", vowels);\n        i = 1;\n    }\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, int aSize, char **b, int bSize) {\n    if (aSize != bSize) return 0;\n    for (int i = 0; i < aSize; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nvoid free_words(char **words, int size) {\n    for (int i = 0; i < size; i++) free(words[i]);\n    free(words);\n}\n\nint main() {\n    int size;\n    char *expected[3];\n    char **result;\n\n    result = func0(\"Hello world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size)); \n    free_words(result, size);\n\n    result = func0(\"Hello,world!\", &size);\n    expected[0] = \"Hello\";\n    expected[1] = \"world!\";\n    assert(issame(expected, 2,result, size));\n    free_words(result, size);\n\n    result = func0(\"abcdef\", &size);\n    expected[0] = \"3\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaabb\", &size);\n    expected[0] = \"2\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"aaaBb\", &size);\n    expected[0] = \"1\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    result = func0(\"\", &size);\n    expected[0] = \"0\";\n    assert(issame(expected, 1,result, size));\n    free_words(result, size);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 126, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n    int i;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n    return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n    int i;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n    return 1;\n}\n\n\n\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 126, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n      return 0;\n  return 1;\n}\n\n\n\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 126, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int ret = 1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2])) {\n      ret = 0;\n      break;\n    }\n  }\n  return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int ret = 1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2])) {\n      ret = 0;\n      break;\n    }\n  }\n  return ret;\n}\n\n\n\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 126, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}", "model_prediction": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]))\n      return 0;\n  return 1;\n}", "executed_test": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]))\n      return 0;\n  return 1;\n}\n\n\n\n\nint main() {\n    int list1[] = {5};\n    assert(func0(list1, 1) == true);\n\n    int list2[] = {1, 2, 3, 4, 5};\n    assert(func0(list2, 5) == true);\n\n    int list3[] = {1, 3, 2, 4, 5};\n    assert(func0(list3, 5) == false);\n\n    int list4[] = {1, 2, 3, 4, 5, 6};\n    assert(func0(list4, 6) == true);\n\n    int list5[] = {1, 2, 3, 4, 5, 6, 7};\n    assert(func0(list5, 7) == true);\n\n    int list6[] = {1, 3, 2, 4, 5, 6, 7};\n    assert(func0(list6, 7) == false);\n\n    assert(func0(NULL, 0) == true);\n\n    int list7[] = {1};\n    assert(func0(list7, 1) == true);\n\n    int list8[] = {3, 2, 1};\n    assert(func0(list8, 3) == false);\n\n    int list9[] = {1, 2, 2, 2, 3, 4};\n    assert(func0(list9, 6) == false);\n\n    int list10[] = {1, 2, 3, 3, 3, 4};\n    assert(func0(list10, 6) == false);\n\n    int list11[] = {1, 2, 2, 3, 3, 4};\n    assert(func0(list11, 6) == true);\n\n    int list12[] = {1, 2, 3, 4};\n    assert(func0(list12, 4) == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 127, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    j = j - i;\n    if (j <= 1)\n        return \"YES\";\n    for (int k = 2; k * k <= j; k++)\n    {\n        if (j % k == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    j = j - i;\n    if (j <= 1)\n        return \"YES\";\n    for (int k = 2; k * k <= j; k++)\n    {\n        if (j % k == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n\n\n\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 127, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  int aa;\n  int bb;\n  int cc;\n  int dd;\n  int ee;\n  int ff;\n  int gg;\n  int hh;\n  int ii;\n  int jj;\n  int kk;\n  int ll;\n  int mm;\n  int nn;\n  int oo;\n  int pp;\n  int qq;\n  int rr;\n  int ss;\n  int tt;\n  int uu;\n  int vv;\n  int ww;\n  int xx;\n  int yy;\n  int zz;\n  int aaa;\n  int bbb;\n  int ccc;\n  int ddd;\n  int eee;\n  int fff;\n  int ggg;\n  int hhh;\n  int iii;\n  int jjj;\n  int kkk;\n  int lll;\n  int mmm;\n  int nnn;\n  int ooo;\n  int ppp;\n  int qqq;\n ", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  int aa;\n  int bb;\n  int cc;\n  int dd;\n  int ee;\n  int ff;\n  int gg;\n  int hh;\n  int ii;\n  int jj;\n  int kk;\n  int ll;\n  int mm;\n  int nn;\n  int oo;\n  int pp;\n  int qq;\n  int rr;\n  int ss;\n  int tt;\n  int uu;\n  int vv;\n  int ww;\n  int xx;\n  int yy;\n  int zz;\n  int aaa;\n  int bbb;\n  int ccc;\n  int ddd;\n  int eee;\n  int fff;\n  int ggg;\n  int hhh;\n  int iii;\n  int jjj;\n  int kkk;\n  int lll;\n  int mmm;\n  int nnn;\n  int ooo;\n  int ppp;\n  int qqq;\n \n\n\n\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 127, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  char *aa;\n  char *bb;\n  char *cc;\n  char *dd;\n  char *ee;\n  char *ff;\n  char *gg;\n  char *hh;\n  char *ii;\n  char *jj;\n  char *kk;\n  char *ll;\n  char *mm;\n  char *nn;\n  char *oo;\n  char *pp;\n  char *qq;\n  char *rr;\n  char *ss;\n  char *tt;\n  char *uu;\n  char *vv;\n  char *ww;\n  char *xx;\n  char *yy;\n  char *zz;\n  char *AA;\n  char *BB;\n  char *CC;\n  char *DD;\n  char *EE;\n  char *FF;\n  char *GG;\n  char *HH;\n  char *II;\n  char *JJ;\n  char *KK;\n  char *LL;\n  char *MM;\n  char *NN;\n  char *OO;\n  char", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  char *aa;\n  char *bb;\n  char *cc;\n  char *dd;\n  char *ee;\n  char *ff;\n  char *gg;\n  char *hh;\n  char *ii;\n  char *jj;\n  char *kk;\n  char *ll;\n  char *mm;\n  char *nn;\n  char *oo;\n  char *pp;\n  char *qq;\n  char *rr;\n  char *ss;\n  char *tt;\n  char *uu;\n  char *vv;\n  char *ww;\n  char *xx;\n  char *yy;\n  char *zz;\n  char *AA;\n  char *BB;\n  char *CC;\n  char *DD;\n  char *EE;\n  char *FF;\n  char *GG;\n  char *HH;\n  char *II;\n  char *JJ;\n  char *KK;\n  char *LL;\n  char *MM;\n  char *NN;\n  char *OO;\n  char\n\n\n\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 127, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  char *aa;\n  char *bb;\n  char *cc;\n  char *dd;\n  char *ee;\n  char *ff;\n  char *gg;\n  char *hh;\n  char *ii;\n  char *jj;\n  char *kk;\n  char *ll;\n  char *mm;\n  char *nn;\n  char *oo;\n  char *pp;\n  char *qq;\n  char *rr;\n  char *ss;\n  char *tt;\n  char *uu;\n  char *vv;\n  char *ww;\n  char *xx;\n  char *yy;\n  char *zz;\n  char *AA;\n  char *BB;\n  char *CC;\n  char *DD;\n  char *EE;\n  char *FF;\n  char *GG;\n  char *HH;\n  char *II;\n  char *JJ;\n  char *KK;\n  char *LL;\n  char *MM;\n  char *NN;\n  char *OO;\n  char", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(int a, int b, int c, int d)\n{\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  char *aa;\n  char *bb;\n  char *cc;\n  char *dd;\n  char *ee;\n  char *ff;\n  char *gg;\n  char *hh;\n  char *ii;\n  char *jj;\n  char *kk;\n  char *ll;\n  char *mm;\n  char *nn;\n  char *oo;\n  char *pp;\n  char *qq;\n  char *rr;\n  char *ss;\n  char *tt;\n  char *uu;\n  char *vv;\n  char *ww;\n  char *xx;\n  char *yy;\n  char *zz;\n  char *AA;\n  char *BB;\n  char *CC;\n  char *DD;\n  char *EE;\n  char *FF;\n  char *GG;\n  char *HH;\n  char *II;\n  char *JJ;\n  char *KK;\n  char *LL;\n  char *MM;\n  char *NN;\n  char *OO;\n  char\n\n\n\n\nint main() {\n    assert(strcmp(func0(1, 2, 2, 3), \"NO\") == 0);\n    assert(strcmp(func0(-1, 1, 0, 4), \"NO\") == 0);\n    assert(strcmp(func0(-3, -1, -5, 5), \"YES\") == 0);\n    assert(strcmp(func0(-2, 2, -4, 0), \"YES\") == 0);\n    assert(strcmp(func0(-11, 2, -1, -1), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 3, 5), \"NO\") == 0);\n    assert(strcmp(func0(1, 2, 1, 2), \"NO\") == 0);\n    assert(strcmp(func0(-2, -2, -3, -2), \"NO\") == 0);\n    \n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 128, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, sum, sign;\n\n    if (n == 0)\n        return -32768;\n\n    sum = 0;\n    sign = 1;\n    for (i = 0; i < n; i++) {\n        sum += abs(a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        if (a[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, sum, sign;\n\n    if (n == 0)\n        return -32768;\n\n    sum = 0;\n    sign = 1;\n    for (i = 0; i < n; i++) {\n        sum += abs(a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        if (a[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}\n\n\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 128, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s, p;\n\n  if (n == 0)\n    return -32768;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++)\n  {\n    s += abs(a[i]);\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n  }\n\n  return s * p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s, p;\n\n  if (n == 0)\n    return -32768;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++)\n  {\n    s += abs(a[i]);\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n  }\n\n  return s * p;\n}\n\n\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 128, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s, p;\n\n  if (n <= 0)\n    return 0;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n    s += abs(a[i]);\n  }\n\n  return s * p;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, s, p;\n\n  if (n <= 0)\n    return 0;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n    s += abs(a[i]);\n  }\n\n  return s * p;\n}\n\n\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 128, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(uint *a, int n)\n{\n  int i, s, p;\n\n  if (n == 0)\n    return -32768;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++)\n  {\n    s += abs(a[i]);\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n  }\n\n  return p * s;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint func0(uint *a, int n)\n{\n  int i, s, p;\n\n  if (n == 0)\n    return -32768;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++)\n  {\n    s += abs(a[i]);\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n  }\n\n  return p * s;\n}\n\n\n\nint main() {\n    int arr1[] = {1, 2, 2, -4};\n    assert(func0(arr1, 4) == -9);\n\n    int arr2[] = {0, 1};\n    assert(func0(arr2, 2) == 0);\n\n    int arr3[] = {1, 1, 1, 2, 3, -1, 1};\n    assert(func0(arr3, 7) == -10);\n\n    assert(func0(NULL, 0) == -32768);\n\n    int arr5[] = {2, 4, 1, 2, -1, -1, 9};\n    assert(func0(arr5, 7) == 20);\n\n    int arr6[] = {-1, 1, -1, 1};\n    assert(func0(arr6, 4) == 4);\n\n    int arr7[] = {-1, 1, 1, 1};\n    assert(func0(arr7, 4) == -4);\n\n    int arr8[] = {-1, 1, 1, 0};\n    assert(func0(arr8, 4) == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 129, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int** a, int n, int m, int* returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && a[x - 1][y] < min) {\n        min = a[x - 1][y];\n    }\n    if (x < n - 1 && a[x + 1][y] < min) {\n        min = a[x + 1][y];\n    }\n    if (y > 0 && a[x][y - 1] < min) {\n        min = a[x][y - 1];\n    }\n    if (y < n - 1 && a[x][y + 1] < min) {\n        min = a[x][y + 1];\n    }\n    *returnSize = m;\n    int* b = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int** a, int n, int m, int* returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && a[x - 1][y] < min) {\n        min = a[x - 1][y];\n    }\n    if (x < n - 1 && a[x + 1][y] < min) {\n        min = a[x + 1][y];\n    }\n    if (y > 0 && a[x][y - 1] < min) {\n        min = a[x][y - 1];\n    }\n    if (y < n - 1 && a[x][y + 1] < min) {\n        min = a[x][y + 1];\n    }\n    *returnSize = m;\n    int* b = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 129, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int x, int y) {\n    int i, j, min;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = j;\n                y = i;\n            }\n        }\n    }\n    min = n * n;\n    if (y > 0 && a[y - 1][x] < min) {\n        min = a[y - 1][x];\n    }\n    if (y < n - 1 && a[y + 1][x] < min) {\n        min = a[y + 1][x];\n    }\n    if (x > 0 && a[y][x - 1] < min) {\n        min = a[y][x - 1];\n    }\n    if (x < n - 1 && a[y][x + 1] < min) {\n        min = a[y][x + 1];\n    }\n    *b = m;\n    int *c = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        c[i] = i % 2 == 0 ? 1 : min;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int x, int y) {\n    int i, j, min;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = j;\n                y = i;\n            }\n        }\n    }\n    min = n * n;\n    if (y > 0 && a[y - 1][x] < min) {\n        min = a[y - 1][x];\n    }\n    if (y < n - 1 && a[y + 1][x] < min) {\n        min = a[y + 1][x];\n    }\n    if (x > 0 && a[y][x - 1] < min) {\n        min = a[y][x - 1];\n    }\n    if (x < n - 1 && a[y][x + 1] < min) {\n        min = a[y][x + 1];\n    }\n    *b = m;\n    int *c = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        c[i] = i % 2 == 0 ? 1 : min;\n    }\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 129, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int *c, int d) {\n  int i, j, k, l, min;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (a[i][j] == 1) {\n        d = j;\n        k = i;\n      }\n    }\n  }\n  min = n * n;\n  if (k > 0) {\n    if (a[k - 1][d] < min) {\n      min = a[k - 1][d];\n    }\n  }\n  if (k < n - 1) {\n    if (a[k + 1][d] < min) {\n      min = a[k + 1][d];\n    }\n  }\n  if (d > 0) {\n    if (a[k][d - 1] < min) {\n      min = a[k][d - 1];\n    }\n  }\n  if (d < n - 1) {\n    if (a[k][d + 1] < min) {\n      min = a[k][d + 1];\n    }\n  }\n  *b = m;\n  l = malloc(sizeof(int) * m);\n  for (i = 0; i < m; i++) {\n    l[i] = (i % 2 == 0) ? 1 : min;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int *c, int d) {\n  int i, j, k, l, min;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (a[i][j] == 1) {\n        d = j;\n        k = i;\n      }\n    }\n  }\n  min = n * n;\n  if (k > 0) {\n    if (a[k - 1][d] < min) {\n      min = a[k - 1][d];\n    }\n  }\n  if (k < n - 1) {\n    if (a[k + 1][d] < min) {\n      min = a[k + 1][d];\n    }\n  }\n  if (d > 0) {\n    if (a[k][d - 1] < min) {\n      min = a[k][d - 1];\n    }\n  }\n  if (d < n - 1) {\n    if (a[k][d + 1] < min) {\n      min = a[k][d + 1];\n    }\n  }\n  *b = m;\n  l = malloc(sizeof(int) * m);\n  for (i = 0; i < m; i++) {\n    l[i] = (i % 2 == 0) ? 1 : min;\n  }\n}\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 129, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int c)\n{\n    int i, j, k, l, min, min_i, min_j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (a[i][j] == 0)\n            {\n                min = n * n;\n                if (i > 0 && a[i - 1][j] < min)\n                {\n                    min = a[i - 1][j];\n                }\n                if (i < n - 1 && a[i + 1][j] < min)\n                {\n                    min = a[i + 1][j];\n                }\n                if (j > 0 && a[i][j - 1] < min)\n                {\n                    min = a[i][j - 1];\n                }\n                if (j < n - 1 && a[i][j + 1] < min)\n                {\n                    min = a[i][j + 1];\n                }\n                a[i][j] = min;\n            }\n        }\n    }\n\n    *b = m;\n    int *d = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n    {\n        d[i] = 0;\n    }\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (a[i][j] == 0)\n            {\n                min = n * n;\n                if (i > 0 && a[i - 1][j] < min)\n                {\n                    min = a[i - 1][j];\n                }\n                if (i < n - 1 && a[i + 1][j] < min)\n                {\n                    min = a[i + 1][j];\n                }\n                if (j > 0 && a[i][j - 1] < min)\n                {\n                    min = a[i][j -", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int **a, int n, int m, int *b, int c)\n{\n    int i, j, k, l, min, min_i, min_j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (a[i][j] == 0)\n            {\n                min = n * n;\n                if (i > 0 && a[i - 1][j] < min)\n                {\n                    min = a[i - 1][j];\n                }\n                if (i < n - 1 && a[i + 1][j] < min)\n                {\n                    min = a[i + 1][j];\n                }\n                if (j > 0 && a[i][j - 1] < min)\n                {\n                    min = a[i][j - 1];\n                }\n                if (j < n - 1 && a[i][j + 1] < min)\n                {\n                    min = a[i][j + 1];\n                }\n                a[i][j] = min;\n            }\n        }\n    }\n\n    *b = m;\n    int *d = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n    {\n        d[i] = 0;\n    }\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (a[i][j] == 0)\n            {\n                min = n * n;\n                if (i > 0 && a[i - 1][j] < min)\n                {\n                    min = a[i - 1][j];\n                }\n                if (i < n - 1 && a[i + 1][j] < min)\n                {\n                    min = a[i + 1][j];\n                }\n                if (j > 0 && a[i][j - 1] < min)\n                {\n                    min = a[i][j -\n\n\n\nint issame(int *a, int *b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    // Test case 1\n    int grid1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int *grid1_ptrs[] = {grid1[0], grid1[1], grid1[2]};\n    int result1[] = {1, 2, 1};\n    int *out1 = func0(grid1_ptrs, 3, 3, &size);\n    assert(issame(out1, result1, size));\n    free(out1);\n\n    // Test case 2\n    int grid2[3][3] = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    int *grid2_ptrs[] = {grid2[0], grid2[1], grid2[2]};\n    int result2[] = {1};\n    int *out2 = func0(grid2_ptrs, 3, 1, &size);\n    assert(issame(out2, result2, size));\n    free(out2);\n\n    // Test case 3\n    int grid3[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    int *grid3_ptrs[] = {grid3[0], grid3[1], grid3[2], grid3[3]};\n    int result3[] = {1, 2, 1, 2};\n    int *out3 = func0(grid3_ptrs, 4, 4, &size);\n    assert(issame(out3, result3, size));\n    free(out3);\n\n    // Test case 4\n    int grid4[4][4] = {{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}};\n    int *grid4_ptrs[] = {grid4[0], grid4[1], grid4[2], grid4[3]};\n    int result4[] = {1, 10, 1, 10, 1, 10, 1};\n    int *out4 = func0(grid4_ptrs, 4, 7, &size);\n    assert(issame(out4, result4, size));\n    free(out4);\n    \n    // Test case 5\n    int grid5[4][4] = {{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}};\n    int *grid5_ptrs[] = {grid5[0], grid5[1], grid5[2], grid5[3]};\n    int result5[] = {1, 7, 1, 7, 1};\n    int *out5 = func0(grid5_ptrs, 4, 5, &size);\n    assert(issame(out5, result5, size));\n    free(out5);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 130, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    a[0] = 1;\n    if (n == 0)\n        return a;\n    a[1] = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            a[i] = i / 2 + 1;\n        else\n            a[i] = a[i - 2] + a[i - 1] + 1 + (i + 1) / 2;\n    }\n    return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    a[0] = 1;\n    if (n == 0)\n        return a;\n    a[1] = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            a[i] = i / 2 + 1;\n        else\n            a[i] = a[i - 2] + a[i - 1] + 1 + (i + 1) / 2;\n    }\n    return a;\n}\n\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 130, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n  int i;\n  int* a = malloc(sizeof(int) * (n + 1));\n  a[0] = 1;\n  if (n > 0) {\n    a[1] = 3;\n    for (i = 2; i < n; i++) {\n      if (i % 2 == 0) {\n        a[i] = (i + 1) / 2 + 1;\n      } else {\n        a[i] = a[i - 2] + a[i - 1] + 1 + (i + 1) / 2;\n      }\n    }\n  }\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n  int i;\n  int* a = malloc(sizeof(int) * (n + 1));\n  a[0] = 1;\n  if (n > 0) {\n    a[1] = 3;\n    for (i = 2; i < n; i++) {\n      if (i % 2 == 0) {\n        a[i] = (i + 1) / 2 + 1;\n      } else {\n        a[i] = a[i - 2] + a[i - 1] + 1 + (i + 1) / 2;\n      }\n    }\n  }\n  return a;\n}\n\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 130, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n  int *a = malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  for (int i = 1; i < n; i++)\n    a[i] = (i%2 == 0) ? (i/2)+1 : a[i-1]+a[i-2]+1+(i+1)/2;\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n  int *a = malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  for (int i = 1; i < n; i++)\n    a[i] = (i%2 == 0) ? (i/2)+1 : a[i-1]+a[i-2]+1+(i+1)/2;\n  return a;\n}\n\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 130, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n  int i;\n  int *a;\n\n  a = (int *)malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  for (i = 1; i < n; i++)\n    if (i % 2 == 0)\n      a[i] = (i/2)+1;\n    else\n      a[i] = a[i-1] + a[i-2] + 1 + (i+1)/2;\n  return a;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n#include <stdlib.h>\n\nint *func0(int n)\n{\n  int i;\n  int *a;\n\n  a = (int *)malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  for (i = 1; i < n; i++)\n    if (i % 2 == 0)\n      a[i] = (i/2)+1;\n    else\n      a[i] = a[i-1] + a[i-2] + 1 + (i+1)/2;\n  return a;\n}\n\n\n\n\n\nint issame(int* a, int* b, int size) {\n    for (int i = 0; i < size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n\n    int tri_3[] = {1, 3, 2, 8};\n    size = 4;\n    int* out3 = func0(3);\n    assert(issame(out3, tri_3, size));\n    free(out3);\n\n    int tri_4[] = {1, 3, 2, 8, 3};\n    size = 5;\n    int* out4 = func0(4);\n    assert(issame(out4, tri_4, size));\n    free(out4);\n\n    int tri_5[] = {1, 3, 2, 8, 3, 15};\n    size = 6;\n    int* out5 = func0(5);\n    assert(issame(out5, tri_5, size));\n    free(out5);\n\n    int tri_6[] = {1, 3, 2, 8, 3, 15, 4};\n    size = 7;\n    int* out6 = func0(6);\n    assert(issame(out6, tri_6, size));\n    free(out6);\n\n    int tri_7[] = {1, 3, 2, 8, 3, 15, 4, 24};\n    size = 8;\n    int* out7 = func0(7);\n    assert(issame(out7, tri_7, size));\n    free(out7);\n\n    int tri_8[] = {1, 3, 2, 8, 3, 15, 4, 24, 5};\n    size = 9;\n    int* out8 = func0(8);\n    assert(issame(out8, tri_8, size));\n    free(out8);\n\n    int tri_9[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35};\n    size = 10;\n    int* out9 = func0(9);\n    assert(issame(out9, tri_9, size));\n    free(out9);\n\n    int tri_20[] = {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11};\n    size = 21;\n    int* out20 = func0(20);\n    assert(issame(out20, tri_20, size));\n    free(out20);\n\n    int tri_0[] = {1};\n    size = 1;\n    int* out0 = func0(0);\n    assert(issame(out0, tri_0, size));\n    free(out0);\n\n    int tri_1[] = {1, 3};\n    size = 2;\n    int* out1 = func0(1);\n    assert(issame(out1, tri_1, size));\n    free(out1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 131, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 1;\n    int flag = 0;\n    while (n > 0)\n    {\n        if (n % 10 % 2 == 1)\n        {\n            m *= n % 10;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0)\n        m = 0;\n    return m;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 1;\n    int flag = 0;\n    while (n > 0)\n    {\n        if (n % 10 % 2 == 1)\n        {\n            m *= n % 10;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0)\n        m = 0;\n    return m;\n}\n\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 131, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 1;\n    int flag = 0;\n    while (n > 0)\n    {\n        if (n % 10 % 2 == 1)\n        {\n            m *= n % 10;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0)\n        return 0;\n    else\n        return m;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 1;\n    int flag = 0;\n    while (n > 0)\n    {\n        if (n % 10 % 2 == 1)\n        {\n            m *= n % 10;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0)\n        return 0;\n    else\n        return m;\n}\n\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 131, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 0;\n    int p = 1;\n    while (n > 0) {\n        if (n % 2) {\n            p *= n % 10;\n            m = 1;\n        }\n        if (n < 10)\n            break;\n        n /= 10;\n    }\n    return m ? p : 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 0;\n    int p = 1;\n    while (n > 0) {\n        if (n % 2) {\n            p *= n % 10;\n            m = 1;\n        }\n        if (n < 10)\n            break;\n        n /= 10;\n    }\n    return m ? p : 0;\n}\n\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 131, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 0;\n    int p = 1;\n    if (n > 0)\n    {\n        while (n > 0)\n        {\n            if (n % 2 == 1)\n            {\n                m = m + (n % 10);\n                p = p * (n % 10);\n            }\n            n = n / 10;\n        }\n    }\n    if (m == 0)\n    {\n        return 0;\n    }\n    else\n    {\n        return p;\n    }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int m = 0;\n    int p = 1;\n    if (n > 0)\n    {\n        while (n > 0)\n        {\n            if (n % 2 == 1)\n            {\n                m = m + (n % 10);\n                p = p * (n % 10);\n            }\n            n = n / 10;\n        }\n    }\n    if (m == 0)\n    {\n        return 0;\n    }\n    else\n    {\n        return p;\n    }\n}\n\n\nint main(){\n    assert(func0(5) == 5);\n    assert(func0(54) == 5);\n    assert(func0(120) == 1);\n    assert(func0(5014) == 5);\n    assert(func0(98765) == 315);\n    assert(func0(5576543) == 2625);\n    assert(func0(2468) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 132, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, max, cur;\n\n    cur = max = 0;\n    for (i = 0; i < strlen(s); i++) {\n        if (s[i] == '[')\n            cur++;\n        if (s[i] == ']')\n            cur--;\n        if (cur < 0)\n            cur = 0;\n        if (cur > max)\n            max = cur;\n        if (cur < max - 1)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, max, cur;\n\n    cur = max = 0;\n    for (i = 0; i < strlen(s); i++) {\n        if (s[i] == '[')\n            cur++;\n        if (s[i] == ']')\n            cur--;\n        if (cur < 0)\n            cur = 0;\n        if (cur > max)\n            max = cur;\n        if (cur < max - 1)\n            return 1;\n    }\n    return 0;\n}\n\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 132, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k;\n    for (i = 0; s[i] != '\\0'; i++);\n    for (j = k = 0; s != s + i; s++) {\n        if (*s == '[')\n            k++;\n        else if (*s == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > j)\n            j = k;\n        if (j - 1 <= k)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k;\n    for (i = 0; s[i] != '\\0'; i++);\n    for (j = k = 0; s != s + i; s++) {\n        if (*s == '[')\n            k++;\n        else if (*s == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > j)\n            j = k;\n        if (j - 1 <= k)\n            return 1;\n    }\n    return 0;\n}\n\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 132, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k;\n    i = j = k = 0;\n    for (i = 0, j = strlen(s); i < j; i++) {\n        if (s[i] == '[')\n            k++;\n        else if (s[i] == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > i)\n            i = k;\n    }\n    return k;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k;\n    i = j = k = 0;\n    for (i = 0, j = strlen(s); i < j; i++) {\n        if (s[i] == '[')\n            k++;\n        else if (s[i] == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > i)\n            i = k;\n    }\n    return k;\n}\n\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 132, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k, l;\n    i = j = k = l = 0;\n    for (i = 0, j = strlen(s); i < j; i++) {\n        if (s[i] == '[')\n            k++;\n        else if (s[i] == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > l)\n            l = k;\n        if (l - 1 <= k)\n            return 1;\n    }\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n    int i, j, k, l;\n    i = j = k = l = 0;\n    for (i = 0, j = strlen(s); i < j; i++) {\n        if (s[i] == '[')\n            k++;\n        else if (s[i] == ']')\n            k--;\n        if (k < 0)\n            k = 0;\n        if (k > l)\n            l = k;\n        if (l - 1 <= k)\n            return 1;\n    }\n    return 0;\n}\n\n\nint func0(const char *str);\n\nint main() {\n    assert(func0(\"[[]]\") == 1);\n    assert(func0(\"[]]]]]]][[[[[]\") == 0);\n    assert(func0(\"[][]\") == 0);\n    assert(func0(\"[]\") == 0);\n    assert(func0(\"[[[[]]]]\") == 1);\n    assert(func0(\"[]]]]]]]]]]\") == 0);\n    assert(func0(\"[][][[]]\") == 1);\n    assert(func0(\"[[]\") == 0);\n    assert(func0(\"[]]\") == 0);\n    assert(func0(\"[[]][[\") == 1);\n    assert(func0(\"[[][]]\") == 1);\n    assert(func0(\"\") == 0);\n    assert(func0(\"[[[[[[[[\") == 0);\n    assert(func0(\"]]]]]]]]\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 133, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)ceil(a[i]) * (int)ceil(a[i]);\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)ceil(a[i]) * (int)ceil(a[i]);\n  return sum;\n}\n\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 133, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int) (a[i] >= 0 ? a[i] : -a[i]);\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int) (a[i] >= 0 ? a[i] : -a[i]);\n  return sum;\n}\n\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 133, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)a[i] * (int)a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)a[i] * (int)a[i];\n  return sum;\n}\n\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 133, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)a[i] * (int)a[i];\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += (int)a[i] * (int)a[i];\n  return sum;\n}\n\n\n\nint main() {\n    float lst1[] = {1, 2, 3};\n    assert(func0(lst1, 3) == 14);\n\n    float lst2[] = {1.0, 2, 3};\n    assert(func0(lst2, 3) == 14);\n\n    float lst3[] = {1, 3, 5, 7};\n    assert(func0(lst3, 4) == 84);\n\n    float lst4[] = {1.4, 4.2, 0};\n    assert(func0(lst4, 3) == 29);\n\n    float lst5[] = {-2.4, 1, 1};\n    assert(func0(lst5, 3) == 6);\n\n    float lst6[] = {100, 1, 15, 2};\n    assert(func0(lst6, 4) == 10230);\n\n    float lst7[] = {10000, 10000};\n    assert(func0(lst7, 2) == 200000000);\n\n    float lst8[] = {-1.4, 4.6, 6.3};\n    assert(func0(lst8, 3) == 75);\n\n    float lst9[] = {-1.4, 17.9, 18.9, 19.9};\n    assert(func0(lst9, 4) == 1086);\n\n    float lst10[] = {0};\n    assert(func0(lst10, 1) == 0);\n\n    float lst11[] = {-1};\n    assert(func0(lst11, 1) == 1);\n\n    float lst12[] = {-1, 1, 0};\n    assert(func0(lst12, 3) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 134, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((__ctype_b_loc())->__b[(unsigned char)(s[len - 1])] & 0x0400))\n    return 0;\n  if (len == 1)\n    return 1;\n  if (!((__ctype_b_loc())->__b[(unsigned char)(s[len - 2])] & 0x0400))\n    return 1;\n  return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((__ctype_b_loc())->__b[(unsigned char)(s[len - 1])] & 0x0400))\n    return 0;\n  if (len == 1)\n    return 1;\n  if (!((__ctype_b_loc())->__b[(unsigned char)(s[len - 2])] & 0x0400))\n    return 1;\n  return 0;\n}\n\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 134, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *s)\n{\n    int i = strlen(s);\n    if (i == 0)\n        return -1;\n    if (__ctype_b_loc()->__b[((unsigned char)(s[i-1]))*2+1] & 4)\n        return i == 1 ? 0 : (__ctype_b_loc()->__b[((unsigned char)(s[i-2]))] & 0x400) != 0;\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *s)\n{\n    int i = strlen(s);\n    if (i == 0)\n        return -1;\n    if (__ctype_b_loc()->__b[((unsigned char)(s[i-1]))*2+1] & 4)\n        return i == 1 ? 0 : (__ctype_b_loc()->__b[((unsigned char)(s[i-2]))] & 0x400) != 0;\n    return 0;\n}\n\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 134, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *str)\n{\n    int len = strlen(str);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    if (!(ctype_b[2 * (unsigned char)str[len - 1] + 1] & 0x04))\n        return 0;\n    if (len == 1)\n        return 1;\n    return (ctype_b[2 * (unsigned char)str[len - 2]] & 0x400) ? 1 : 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *str)\n{\n    int len = strlen(str);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    if (!(ctype_b[2 * (unsigned char)str[len - 1] + 1] & 0x04))\n        return 0;\n    if (len == 1)\n        return 1;\n    return (ctype_b[2 * (unsigned char)str[len - 2]] & 0x400) ? 1 : 0;\n}\n\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 134, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *str)\n{\n    int len = strlen(str);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    if (!(ctype_b[2 * (unsigned char)str[len - 1] + 1] & 0x04))\n        return 0;\n    if (len == 1)\n        return 1;\n    return (ctype_b[2 * (unsigned char)str[len - 2]] & 0x400) ? 1 : 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n\nint func0(const char *str)\n{\n    int len = strlen(str);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype_b = __ctype_b_loc();\n    if (!(ctype_b[2 * (unsigned char)str[len - 1] + 1] & 0x04))\n        return 0;\n    if (len == 1)\n        return 1;\n    return (ctype_b[2 * (unsigned char)str[len - 2]] & 0x400) ? 1 : 0;\n}\n\n\nint main() {\n    assert(func0(\"apple\") == 0);\n    assert(func0(\"apple pi e\") == 1);\n    assert(func0(\"eeeee\") == 0);\n    assert(func0(\"A\") == 1);\n    assert(func0(\"Pumpkin pie \") == 0);\n    assert(func0(\"Pumpkin pie 1\") == 0);\n    assert(func0(\"\") == 0);\n    assert(func0(\"eeeee e \") == 0);\n    assert(func0(\"apple pie\") == 0);\n    assert(func0(\"apple pi e \") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 135, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  j = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1])\n      j = i;\n  }\n  return j;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j;\n  j = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1])\n      j = i;\n  }\n  return j;\n}\n\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 135, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int max = -1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      max = i;\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int max = -1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      max = i;\n  return max;\n}\n\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 135, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, max;\n\n  max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1])\n      max = i;\n  }\n  return max;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, max;\n\n  max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1])\n      max = i;\n  }\n  return max;\n}\n\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 135, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, t;\n  if (n < 2)\n    return -1;\n  for (i = 0, j = 1, k = 0, l = 0; i < n - 1; i += 4) {\n    k |= (a[i] < a[i + 1]) << j;\n    l |= (a[i + 2] < a[i + 3]) << j;\n    j++;\n  }\n  if (k == l)\n    return -1;\n  m = (k < l) ? k : l;\n  for (i = m; i < n - 1; i++)\n    if (a[i] < a[i + 1])\n      return i;\n  return n - 1;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, t;\n  if (n < 2)\n    return -1;\n  for (i = 0, j = 1, k = 0, l = 0; i < n - 1; i += 4) {\n    k |= (a[i] < a[i + 1]) << j;\n    l |= (a[i + 2] < a[i + 3]) << j;\n    j++;\n  }\n  if (k == l)\n    return -1;\n  m = (k < l) ? k : l;\n  for (i = m; i < n - 1; i++)\n    if (a[i] < a[i + 1])\n      return i;\n  return n - 1;\n}\n\n\nint main() {\n    int arr1[] = {1, 2, 4, 3, 5};\n    assert(func0(arr1, 5) == 3);\n\n    int arr2[] = {1, 2, 4, 5};\n    assert(func0(arr2, 4) == -1);\n\n    int arr3[] = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    assert(func0(arr3, 9) == 2);\n\n    int arr4[] = {4, 8, 5, 7, 3};\n    assert(func0(arr4, 5) == 4);\n\n    assert(func0(NULL, 0) == -1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 136, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int min = 0;\n  int max = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0 && (min == 0 || a[i] < min))\n      min = a[i];\n    if (a[i] > 0 && (max == 0 || a[i] > max))\n      max = a[i];\n  }\n  b[0] = min;\n  b[1] = max;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int min = 0;\n  int max = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0 && (min == 0 || a[i] < min))\n      min = a[i];\n    if (a[i] > 0 && (max == 0 || a[i] > max))\n      max = a[i];\n  }\n  b[0] = min;\n  b[1] = max;\n}\n\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 136, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (a[i] < min || min == 0) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (a[i] < min || min == 0) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}\n\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 136, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}\n\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 136, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int *a, int n, int *b)\n{\n  int i;\n  int max = 0;\n  int min = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] < 0) {\n      if (a[i] > max || max == 0) {\n        max = a[i];\n      }\n    } else if (a[i] > 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  b[0] = max;\n  b[1] = min;\n}\n\n\nint issame(const int a[2], const int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n    \n    func0((const int[]){2, 4, 1, 3, 5, 7}, 6, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){2, 4, 1, 3, 5, 7, 0}, 7, result);\n    assert(issame(result, (const int[]){0, 1}));\n\n    func0((const int[]){1, 3, 2, 4, 5, 6, -2}, 7, result);\n    assert(issame(result, (const int[]){-2, 1}));\n\n    func0((const int[]){4, 5, 3, 6, 2, 7, -7}, 7, result);\n    assert(issame(result, (const int[]){-7, 2}));\n\n    func0((const int[]){7, 3, 8, 4, 9, 2, 5, -9}, 8, result);\n    assert(issame(result, (const int[]){-9, 2}));\n\n    func0((const int[]){}, 0, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){0}, 1, result);\n    assert(issame(result, (const int[]){0, 0}));\n\n    func0((const int[]){-1, -3, -5, -6}, 4, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-1, -3, -5, -6, 0}, 5, result);\n    assert(issame(result, (const int[]){-1, 0}));\n\n    func0((const int[]){-6, -4, -4, -3, 1}, 5, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    func0((const int[]){-6, -4, -4, -3, -100, 1}, 6, result);\n    assert(issame(result, (const int[]){-3, 1}));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 137, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n    int i, j;\n\n    for (i = 0; s1_copy[i] != '\\0'; i++)\n        if (s1_copy[i] == ',')\n            s1_copy[i] = '.';\n\n    for (j = 0; s2_copy[j] != '\\0'; j++)\n        if (s2_copy[j] == ',')\n            s2_copy[j] = '.';\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"Invalid input\";\n    }\n\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"Invalid input\";\n    }\n\n    free(s1_copy);\n    free(s2_copy);\n\n    if (d1 == d2)\n        return \"None\";\n    else if (d1 > d2)\n        return s1;\n    else\n        return s2;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n    int i, j;\n\n    for (i = 0; s1_copy[i] != '\\0'; i++)\n        if (s1_copy[i] == ',')\n            s1_copy[i] = '.';\n\n    for (j = 0; s2_copy[j] != '\\0'; j++)\n        if (s2_copy[j] == ',')\n            s2_copy[j] = '.';\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"Invalid input\";\n    }\n\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"Invalid input\";\n    }\n\n    free(s1_copy);\n    free(s2_copy);\n\n    if (d1 == d2)\n        return \"None\";\n    else if (d1 > d2)\n        return s1;\n    else\n        return s2;\n}\n\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 137, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    char *a_copy = strdup(a);\n    char *b_copy = strdup(b);\n    char *p = a_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    p = b_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    char *endptr;\n    double a_val = strtod(a_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    double b_val = strtod(b_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    free(a_copy);\n    free(b_copy);\n    if (a_val > b_val)\n        return a;\n    else\n        return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    char *a_copy = strdup(a);\n    char *b_copy = strdup(b);\n    char *p = a_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    p = b_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    char *endptr;\n    double a_val = strtod(a_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    double b_val = strtod(b_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    free(a_copy);\n    free(b_copy);\n    if (a_val > b_val)\n        return a;\n    else\n        return b;\n}\n\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 137, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n\n    for (char *p = s1_copy; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (char *p = s2_copy; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0')\n        goto error;\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0')\n        goto error;\n\n    free(s1_copy);\n    free(s2_copy);\n\n    return d1 > d2 ? s1 : s2;\n\nerror:\n    free(s1_copy);\n    free(s2_copy);\n    return \"Invalid input\";\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *s1, char *s2)\n{\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n\n    for (char *p = s1_copy; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (char *p = s2_copy; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0')\n        goto error;\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0')\n        goto error;\n\n    free(s1_copy);\n    free(s2_copy);\n\n    return d1 > d2 ? s1 : s2;\n\nerror:\n    free(s1_copy);\n    free(s2_copy);\n    return \"Invalid input\";\n}\n\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 137, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    char *a_copy = strdup(a);\n    char *b_copy = strdup(b);\n    char *p = a_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    p = b_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    char *endptr;\n    double a_val = strtod(a_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    double b_val = strtod(b_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    free(a_copy);\n    free(b_copy);\n    if (a_val > b_val)\n        return a;\n    else\n        return b;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nchar *func0(char *a, char *b)\n{\n    char *a_copy = strdup(a);\n    char *b_copy = strdup(b);\n    char *p = a_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    p = b_copy;\n    while (*p)\n    {\n        if (*p == ',')\n            *p = '.';\n        p++;\n    }\n    char *endptr;\n    double a_val = strtod(a_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    double b_val = strtod(b_copy, &endptr);\n    if (*endptr != '\\0')\n    {\n        free(a_copy);\n        free(b_copy);\n        return \"Invalid input\";\n    }\n    free(a_copy);\n    free(b_copy);\n    if (a_val > b_val)\n        return a;\n    else\n        return b;\n}\n\n\n\n\n\nint main() {\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"2.5\"), \"2.5\") == 0);\n    assert(strcmp(func0(\"2\", \"3\"), \"3\") == 0);\n    assert(strcmp(func0(\"5\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2,3\"), \"2,3\") == 0);\n    assert(strcmp(func0(\"5,1\", \"6\"), \"6\") == 0);\n    assert(strcmp(func0(\"1\", \"2\"), \"2\") == 0);\n    assert(strcmp(func0(\"1\", \"1\"), \"None\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 138, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x % 2 == 0) && (x >= 8);\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x % 2 == 0) && (x >= 8);\n}\n\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 138, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) ? (x ^ 1) : 0;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) ? (x ^ 1) : 0;\n}\n\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 138, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) & ~x;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) & ~x;\n}\n\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 138, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) & ~x;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x) {\n  return (x > 7) & ~x;\n}\n\n\nint main() {\n    assert(func0(4) == 0);\n    assert(func0(6) == 0);\n    assert(func0(8) == 1);\n    assert(func0(10) == 1);\n    assert(func0(11) == 0);\n    assert(func0(12) == 1);\n    assert(func0(13) == 0);\n    assert(func0(16) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 139, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(int n)\n{\n    int i;\n    long f = 1;\n    long g = 1;\n    for (i = 1; i <= n; i++) {\n        f *= i;\n        g *= f;\n    }\n    return g;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nlong func0(int n)\n{\n    int i;\n    long f = 1;\n    long g = 1;\n    for (i = 1; i <= n; i++) {\n        f *= i;\n        g *= f;\n    }\n    return g;\n}\n\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 139, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++)\n    {\n        j = j * k;\n        k = k + 1;\n    }\n    return j;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++)\n    {\n        j = j * k;\n        k = k + 1;\n    }\n    return j;\n}\n\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 139, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++) {\n        j = j * i;\n        k = k * j;\n    }\n    return k;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++) {\n        j = j * i;\n        k = k * j;\n    }\n    return k;\n}\n\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 139, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++)\n    {\n        j = j * i;\n        k = k * j;\n    }\n    return k;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int i, j, k;\n    j = 1;\n    k = 1;\n    for (i = 1; i <= n; i++)\n    {\n        j = j * i;\n        k = k * j;\n    }\n    return k;\n}\n\n\nint main() {\n    assert(func0(4) == 288);\n    assert(func0(5) == 34560);\n    assert(func0(7) == 125411328000);\n    assert(func0(1) == 1);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 140, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n int i = 0, j = 0, k = 0, count = 0;\n\n while (k < strlen(str))\n {\n  if (str[k] == ' ')\n  {\n   count++;\n  }\n  else\n  {\n   if (count == 1)\n   {\n    out[i] = '_';\n    i++;\n   }\n   if (count == 2)\n   {\n    out[i] = '_';\n    i++;\n    out[i] = '_';\n    i++;\n   }\n   if (count > 2)\n   {\n    out[i] = '-';\n    i++;\n   }\n   count = 0;\n   out[i] = str[k];\n   i++;\n  }\n  k++;\n }\n if (count == 1)\n {\n  out[i] = '_';\n  i++;\n }\n if (count == 2)\n {\n  out[i] = '_';\n  i++;\n  out[i] = '_';\n  i++;\n }\n if (count > 2)\n {\n  out[i] = '-';\n  i++;\n }\n out[i] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n int i = 0, j = 0, k = 0, count = 0;\n\n while (k < strlen(str))\n {\n  if (str[k] == ' ')\n  {\n   count++;\n  }\n  else\n  {\n   if (count == 1)\n   {\n    out[i] = '_';\n    i++;\n   }\n   if (count == 2)\n   {\n    out[i] = '_';\n    i++;\n    out[i] = '_';\n    i++;\n   }\n   if (count > 2)\n   {\n    out[i] = '-';\n    i++;\n   }\n   count = 0;\n   out[i] = str[k];\n   i++;\n  }\n  k++;\n }\n if (count == 1)\n {\n  out[i] = '_';\n  i++;\n }\n if (count == 2)\n {\n  out[i] = '_';\n  i++;\n  out[i] = '_';\n  i++;\n }\n if (count > 2)\n {\n  out[i] = '-';\n  i++;\n }\n out[i] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 140, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n    int i, j, k, l;\n    for (i = 0, j = 0, k = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                out[j++] = '_';\n            } else if (k == 2) {\n                out[j++] = '_';\n                out[j++] = '_';\n            } else if (k > 2) {\n                out[j++] = '-';\n            }\n            out[j++] = str[i];\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        out[j++] = '_';\n    } else if (k == 2) {\n        out[j++] = '_';\n        out[j++] = '_';\n    } else if (k > 2) {\n        out[j++] = '-';\n    }\n    out[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n    int i, j, k, l;\n    for (i = 0, j = 0, k = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                out[j++] = '_';\n            } else if (k == 2) {\n                out[j++] = '_';\n                out[j++] = '_';\n            } else if (k > 2) {\n                out[j++] = '-';\n            }\n            out[j++] = str[i];\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        out[j++] = '_';\n    } else if (k == 2) {\n        out[j++] = '_';\n        out[j++] = '_';\n    } else if (k > 2) {\n        out[j++] = '-';\n    }\n    out[j] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 140, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                out[j] = '_';\n                j++;\n            }\n            else if (l == 2)\n            {\n                out[j] = '_';\n                j++;\n                out[j] = '_';\n                j++;\n            }\n            else if (l > 2)\n            {\n                out[j] = '-';\n                j++;\n            }\n            out[j] = str[i];\n            j++;\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        out[j] = '_';\n        j++;\n    }\n    else if (l == 2)\n    {\n        out[j] = '_';\n        j++;\n        out[j] = '_';\n        j++;\n    }\n    else if (l > 2)\n    {\n        out[j] = '-';\n        j++;\n    }\n    out[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *str, char *out)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                out[j] = '_';\n                j++;\n            }\n            else if (l == 2)\n            {\n                out[j] = '_';\n                j++;\n                out[j] = '_';\n                j++;\n            }\n            else if (l > 2)\n            {\n                out[j] = '-';\n                j++;\n            }\n            out[j] = str[i];\n            j++;\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        out[j] = '_';\n        j++;\n    }\n    else if (l == 2)\n    {\n        out[j] = '_';\n        j++;\n        out[j] = '_';\n        j++;\n    }\n    else if (l > 2)\n    {\n        out[j] = '-';\n        j++;\n    }\n    out[j] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 140, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    for (i = j = k = 0; i < strlen(s); i++) {\n        if (s[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                t[j++] = '_';\n            } else if (k == 2) {\n                t[j++] = '_';\n                t[j++] = '_';\n            } else if (k > 2) {\n                t[j++] = '-';\n            }\n            t[j++] = s[i];\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        t[j++] = '_';\n    } else if (k == 2) {\n        t[j++] = '_';\n        t[j++] = '_';\n    } else if (k > 2) {\n        t[j++] = '-';\n    }\n    t[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    for (i = j = k = 0; i < strlen(s); i++) {\n        if (s[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                t[j++] = '_';\n            } else if (k == 2) {\n                t[j++] = '_';\n                t[j++] = '_';\n            } else if (k > 2) {\n                t[j++] = '-';\n            }\n            t[j++] = s[i];\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        t[j++] = '_';\n    } else if (k == 2) {\n        t[j++] = '_';\n        t[j++] = '_';\n    } else if (k > 2) {\n        t[j++] = '-';\n    }\n    t[j] = '\\0';\n}\n\n\n\nint main() {\n    char output[100];\n\n    func0(\"Example\", output);\n    assert(strcmp(output, \"Example\") == 0);\n\n    func0(\"Mudasir Hanif \", output);\n    assert(strcmp(output, \"Mudasir_Hanif_\") == 0);\n\n    func0(\"Yellow Yellow  Dirty  Fellow\", output);\n    assert(strcmp(output, \"Yellow_Yellow__Dirty__Fellow\") == 0);\n\n    func0(\"Exa   mple\", output);\n    assert(strcmp(output, \"Exa-mple\") == 0);\n\n    func0(\"   Exa 1 2 2 mple\", output);\n    assert(strcmp(output, \"-Exa_1_2_2_mple\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 141, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n    int i, len, num_digits = 0, num_dots = 0;\n    char *p;\n\n    len = strlen(str);\n    if (len < 5)\n        return \"NO\";\n\n    if (!((str[0] >= 'A' && str[0] <= 'Z') || (str[0] >= 'a' && str[0] <= 'z')))\n        return \"NO\";\n\n    p = str + len - 4;\n    if (strcmp(p, \".txt\") && strcmp(p, \".exe\") && strcmp(p, \".dll\"))\n        return \"NO\";\n\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= '0' && str[i] <= '9')\n            num_digits++;\n        if (str[i] == '.')\n            num_dots++;\n    }\n\n    if (num_digits < 4 || num_dots != 1)\n        return \"NO\";\n\n    return \"YES\";\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n    int i, len, num_digits = 0, num_dots = 0;\n    char *p;\n\n    len = strlen(str);\n    if (len < 5)\n        return \"NO\";\n\n    if (!((str[0] >= 'A' && str[0] <= 'Z') || (str[0] >= 'a' && str[0] <= 'z')))\n        return \"NO\";\n\n    p = str + len - 4;\n    if (strcmp(p, \".txt\") && strcmp(p, \".exe\") && strcmp(p, \".dll\"))\n        return \"NO\";\n\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= '0' && str[i] <= '9')\n            num_digits++;\n        if (str[i] == '.')\n            num_dots++;\n    }\n\n    if (num_digits < 4 || num_dots != 1)\n        return \"NO\";\n\n    return \"YES\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 141, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(str);\n    if (i < 5)\n        return \"NO\";\n    if (str[0] != '0' && str[0] != '1' && str[0] != '2' && str[0] != '3' && str[0] != '4' && str[0] != '5' && str[0] != '6' && str[0] != '7' && str[0] != '8' && str[0] != '9')\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255.255\"))\n        return \"NO\";\n    j = k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] >= '0' && str[i] <= '", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(str);\n    if (i < 5)\n        return \"NO\";\n    if (str[0] != '0' && str[0] != '1' && str[0] != '2' && str[0] != '3' && str[0] != '4' && str[0] != '5' && str[0] != '6' && str[0] != '7' && str[0] != '8' && str[0] != '9')\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255.0\"))\n        return \"NO\";\n    if (!strcmp(str + i - 4, \"255.255.255.255\"))\n        return \"NO\";\n    j = k = l = m = n = o = p = q = r = s = t = u = v = w = x = y = z = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] >= '0' && str[i] <= '\n\n\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 141, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, l, m, n, o;\n    char *p;\n\n    p = s;\n    l = strlen(s);\n    if (l < 5)\n        return \"NO\";\n    if (s[0] != '0' && s[0] != '1' && s[0] != '2' && s[0] != '3' && s[0] != '4' && s[0] != '5' && s[0] != '6' && s[0] != '7' && s[0] != '8' && s[0] != '9')\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255.\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"2550\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"25500\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255000\"))\n        return \"NO\";\n    i = 0;\n    j = 0;\n    for (k = 0; k < l; k++)\n    {\n        if (s[k] == '.')\n            i++;\n        if (s[k] >= '0' && s[k] <= '9')\n            j++;\n    }\n    if (j < 4 || i != 1)\n        return \"NO\";\n    return \"YES\";\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n    int i, j, k, l, m, n, o;\n    char *p;\n\n    p = s;\n    l = strlen(s);\n    if (l < 5)\n        return \"NO\";\n    if (s[0] != '0' && s[0] != '1' && s[0] != '2' && s[0] != '3' && s[0] != '4' && s[0] != '5' && s[0] != '6' && s[0] != '7' && s[0] != '8' && s[0] != '9')\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255.\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"2550\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"25500\"))\n        return \"NO\";\n    if (!strcmp(s + l - 4, \"255000\"))\n        return \"NO\";\n    i = 0;\n    j = 0;\n    for (k = 0; k < l; k++)\n    {\n        if (s[k] == '.')\n            i++;\n        if (s[k] >= '0' && s[k] <= '9')\n            j++;\n    }\n    if (j < 4 || i != 1)\n        return \"NO\";\n    return \"YES\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 141, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nconst char *func0(const char *str)\n{\n    int len = strlen(str);\n    if (len < 5)\n        return \"0\";\n\n    if (str[0] != '+' && str[0] != '-' && (str[0] < '0' || str[0] > '9'))\n        return \"0\";\n\n    if (!strcmp(str + len - 4, \"e+00\") || !strcmp(str + len - 4, \"e-00\") || !strcmp(str + len - 4, \"e000\"))\n        return \"0\";\n\n    int i, dot = 0, exp = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '.')\n            dot++;\n        else if (str[i] == 'e' || str[i] == 'E')\n            exp++;\n        else if (str[i] < '0' || str[i] > '9')\n            return \"0\";\n    }\n\n    if (dot > 1 || exp > 1)\n        return \"0\";\n\n    return \"1\";\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nconst char *func0(const char *str)\n{\n    int len = strlen(str);\n    if (len < 5)\n        return \"0\";\n\n    if (str[0] != '+' && str[0] != '-' && (str[0] < '0' || str[0] > '9'))\n        return \"0\";\n\n    if (!strcmp(str + len - 4, \"e+00\") || !strcmp(str + len - 4, \"e-00\") || !strcmp(str + len - 4, \"e000\"))\n        return \"0\";\n\n    int i, dot = 0, exp = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '.')\n            dot++;\n        else if (str[i] == 'e' || str[i] == 'E')\n            exp++;\n        else if (str[i] < '0' || str[i] > '9')\n            return \"0\";\n    }\n\n    if (dot > 1 || exp > 1)\n        return \"0\";\n\n    return \"1\";\n}\n\n\n\nint main() {\n    assert(strcmp(func0(\"example.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1example.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"s1sdf3.asd\"), \"No\") == 0);\n    assert(strcmp(func0(\"K.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"MY16FILE3.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"His12FILE94.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"_Y.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"?aREYA.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"/this_is_valid.dll\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.wow\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"this_is_valid.txtexe\"), \"No\") == 0);\n    assert(strcmp(func0(\"#this2_i4s_5valid.ten\"), \"No\") == 0);\n    assert(strcmp(func0(\"@this1_is6_valid.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"this_is_12valid.6exe4.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"all.exe.txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_No.exe\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"Is3youfault.txt\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"no_one#knows.dll\"), \"Yes\") == 0);\n    assert(strcmp(func0(\"1I563_Yes3.exe\"), \"No\") == 0);\n    assert(strcmp(func0(\"I563_Yes3.txtt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final..txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"final132\"), \"No\") == 0);\n    assert(strcmp(func0(\"_f4indsartal132.\"), \"No\") == 0);\n    assert(strcmp(func0(\".txt\"), \"No\") == 0);\n    assert(strcmp(func0(\"s.\"), \"No\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 142, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}\n\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 142, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 3 == 1) {\n      sum += a[i];\n    } else {\n      sum += a[i] * a[i];\n    }\n  }\n\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 3 == 1) {\n      sum += a[i];\n    } else {\n      sum += a[i] * a[i];\n    }\n  }\n\n  return sum;\n}\n\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 142, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 2 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 2 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}\n\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 142, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 2 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 2 == 0)\n      sum += a[i] * a[i];\n    else if (i % 4 == 0)\n      sum += a[i] * a[i] * a[i];\n    else\n      sum += a[i];\n  }\n  return sum;\n}\n\n\nint main() {\n    {\n        int lst[] = {1, 2, 3};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 6);\n    }\n    {\n        int lst[] = {1, 4, 9};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 14);\n    }\n    {\n        int lst[] = {};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 9);\n    }\n    {\n        int lst[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -3);\n    }\n    {\n        int lst[] = {0};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-1, -5, 2, -1, -5};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -126);\n    }\n    {\n        int lst[] = {-56, -99, 1, 0, -2};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 3030);\n    }\n    {\n        int lst[] = {-1, 0, 0, 0, 0, 0, 0, 0, -1};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == 0);\n    }\n    {\n        int lst[] = {-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -14196);\n    }\n    {\n        int lst[] = {-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10};\n        assert(func0(lst, sizeof(lst)/sizeof(lst[0])) == -1448);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 143, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    for (i = j = k = 0; s[i]; i++) {\n        if (s[i] == ' ') {\n            l = 1;\n            for (j = 2; j * j <= k; j++)\n                if (k % j == 0) {\n                    l = 0;\n                    break;\n                }\n            if (l) {\n                if (j > 0)\n                    t[j++] = ' ';\n                memcpy(t + j, s + i - k, k);\n                j += k;\n            }\n            k = 0;\n        } else\n            k++;\n    }\n    l = 1;\n    for (j = 2; j * j <= k; j++)\n        if (k % j == 0) {\n            l = 0;\n            break;\n        }\n    if (l) {\n        if (j > 0)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    for (i = j = k = 0; s[i]; i++) {\n        if (s[i] == ' ') {\n            l = 1;\n            for (j = 2; j * j <= k; j++)\n                if (k % j == 0) {\n                    l = 0;\n                    break;\n                }\n            if (l) {\n                if (j > 0)\n                    t[j++] = ' ';\n                memcpy(t + j, s + i - k, k);\n                j += k;\n            }\n            k = 0;\n        } else\n            k++;\n    }\n    l = 1;\n    for (j = 2; j * j <= k; j++)\n        if (k % j == 0) {\n            l = 0;\n            break;\n        }\n    if (l) {\n        if (j > 0)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = '\\0';\n}\n\n\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 143, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    char c;\n\n    i = j = k = 0;\n    while ((c = s[i++]) != '\\0') {\n        if (c == ' ') {\n            if (k > 1) {\n                if (k > 3) {\n                    if (k % 2 == 0) {\n                        for (l = 2; l * l <= k; l++) {\n                            if (k % l == 0) {\n                                k = 0;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (k > 1) {\n                    if (j > 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                }\n                k = 0;\n            } else {\n                k = 0;\n            }\n        } else {\n            k++;\n        }\n    }\n    if (k > 1) {\n        if (k > 3) {\n            if (k % 2 == 0) {\n                for (l = 2; l * l <= k; l++) {\n                    if (k % l == 0) {\n                        k = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        if (k > 1) {\n            if (j > 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    char c;\n\n    i = j = k = 0;\n    while ((c = s[i++]) != '\\0') {\n        if (c == ' ') {\n            if (k > 1) {\n                if (k > 3) {\n                    if (k % 2 == 0) {\n                        for (l = 2; l * l <= k; l++) {\n                            if (k % l == 0) {\n                                k = 0;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (k > 1) {\n                    if (j > 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                }\n                k = 0;\n            } else {\n                k = 0;\n            }\n        } else {\n            k++;\n        }\n    }\n    if (k > 1) {\n        if (k > 3) {\n            if (k % 2 == 0) {\n                for (l = 2; l * l <= k; l++) {\n                    if (k % l == 0) {\n                        k = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        if (k > 1) {\n            if (j > 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}\n\n\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 143, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s, char *t)\n{\n    int i, j, k;\n    for (i = j = 0; s[i]; i++) {\n        if (s[i] != ' ') {\n            k++;\n            continue;\n        }\n        if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n            if (j)\n                t[j++] = ' ';\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n        k = 0;\n    }\n    if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n        if (j)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = 0;\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s, char *t)\n{\n    int i, j, k;\n    for (i = j = 0; s[i]; i++) {\n        if (s[i] != ' ') {\n            k++;\n            continue;\n        }\n        if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n            if (j)\n                t[j++] = ' ';\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n        k = 0;\n    }\n    if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n        if (j)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = 0;\n    return t;\n}\n\n\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 143, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s, char *t)\n{\n    int i, j, k;\n\n    for (i = j = 0; s[i]; i++) {\n        if (s[i] != ' ') {\n            k++;\n            continue;\n        }\n        if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n            if (j)\n                t[j++] = ' ';\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n        k = 0;\n    }\n    if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n        if (j)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = '\\0';\n    return t;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s, char *t)\n{\n    int i, j, k;\n\n    for (i = j = 0; s[i]; i++) {\n        if (s[i] != ' ') {\n            k++;\n            continue;\n        }\n        if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n            if (j)\n                t[j++] = ' ';\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n        k = 0;\n    }\n    if (k > 1 && (k < 4 || (k & 1) || k % 2 == 0)) {\n        if (j)\n            t[j++] = ' ';\n        memcpy(t + j, s + i - k, k);\n        j += k;\n    }\n    t[j] = '\\0';\n    return t;\n}\n\n\n\nint main() {\n    char output[101];\n\n    func0(\"This is a test\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    func0(\"lets go for swimming\", output);\n    assert(strcmp(output, \"go for\") == 0);\n\n    func0(\"there is no place available here\", output);\n    assert(strcmp(output, \"there is no place\") == 0);\n\n    func0(\"Hi I am Hussein\", output);\n    assert(strcmp(output, \"Hi am Hussein\") == 0);\n\n    func0(\"go for it\", output);\n    assert(strcmp(output, \"go for it\") == 0);\n\n    func0(\"here\", output);\n    assert(strcmp(output, \"\") == 0);\n\n    func0(\"here is\", output);\n    assert(strcmp(output, \"is\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 144, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char a[100], b[100];\n\n    for (i = 0; s1[i] != '/'; i++)\n        a[i] = s1[i];\n    a[i] = '\\0';\n    m = atoi(a);\n    j = 0;\n    for (i++; s1[i] != '\\0'; i++)\n        b[j++] = s1[i];\n    b[j] = '\\0';\n    n = atoi(b);\n\n    for (i = 0; s2[i] != '/'; i++)\n        a[i] = s2[i];\n    a[i] = '\\0';\n    o = atoi(a);\n    j = 0;\n    for (i++; s2[i] != '\\0'; i++)\n        b[j++] = s2[i];\n    b[j] = '\\0';\n    p = atoi(b);\n\n    return (m * o) % (n * p) == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char a[100], b[100];\n\n    for (i = 0; s1[i] != '/'; i++)\n        a[i] = s1[i];\n    a[i] = '\\0';\n    m = atoi(a);\n    j = 0;\n    for (i++; s1[i] != '\\0'; i++)\n        b[j++] = s1[i];\n    b[j] = '\\0';\n    n = atoi(b);\n\n    for (i = 0; s2[i] != '/'; i++)\n        a[i] = s2[i];\n    a[i] = '\\0';\n    o = atoi(a);\n    j = 0;\n    for (i++; s2[i] != '\\0'; i++)\n        b[j++] = s2[i];\n    b[j] = '\\0';\n    p = atoi(b);\n\n    return (m * o) % (n * p) == 0;\n}\n\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 144, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char s11[100], s21[100];\n    i = 0;\n    while (s1[i] != '/')\n    {\n        s11[i] = s1[i];\n        i++;\n    }\n    s11[i] = '\\0';\n    j = strtol(s11, NULL, 10);\n    k = 0;\n    i++;\n    while (s1[i] != '\\0')\n    {\n        s21[k] = s1[i];\n        k++;\n        i++;\n    }\n    s21[k] = '\\0';\n    l = strtol(s21 + 1, NULL, 10);\n    i = 0;\n    while (s2[i] != '/')\n    {\n        s11[i] = s2[i];\n        i++;\n    }\n    s11[i] = '\\0';\n    m = strtol(s11, NULL, 10);\n    k = 0;\n    i++;\n    while (s2[i] != '\\0')\n    {\n        s21[k] = s2[i];\n        k++;\n        i++;\n    }\n    s21[k] = '\\0';\n    n = strtol(s21 + 1, NULL, 10);\n    o = j * m;\n    p = l * n;\n    if (o % p == 0)\n        return 1;\n    else\n        return 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char s11[100], s21[100];\n    i = 0;\n    while (s1[i] != '/')\n    {\n        s11[i] = s1[i];\n        i++;\n    }\n    s11[i] = '\\0';\n    j = strtol(s11, NULL, 10);\n    k = 0;\n    i++;\n    while (s1[i] != '\\0')\n    {\n        s21[k] = s1[i];\n        k++;\n        i++;\n    }\n    s21[k] = '\\0';\n    l = strtol(s21 + 1, NULL, 10);\n    i = 0;\n    while (s2[i] != '/')\n    {\n        s11[i] = s2[i];\n        i++;\n    }\n    s11[i] = '\\0';\n    m = strtol(s11, NULL, 10);\n    k = 0;\n    i++;\n    while (s2[i] != '\\0')\n    {\n        s21[k] = s2[i];\n        k++;\n        i++;\n    }\n    s21[k] = '\\0';\n    n = strtol(s21 + 1, NULL, 10);\n    o = j * m;\n    p = l * n;\n    if (o % p == 0)\n        return 1;\n    else\n        return 0;\n}\n\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 144, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char buf1[100], buf2[100];\n\n    i = 0;\n    while (s1[i] != '/')\n        buf1[i++] = s1[i];\n    buf1[i] = '\\0';\n    j = strtol(buf1, NULL, 10);\n\n    k = 0;\n    while (s1[i + 1] != '\\0')\n        buf2[k++] = s1[i + 1];\n    buf2[k] = '\\0';\n    l = strtol(buf2 + 1, NULL, 10);\n\n    i = 0;\n    while (s2[i] != '/')\n        buf1[i++] = s2[i];\n    buf1[i] = '\\0';\n    m = strtol(buf1, NULL, 10);\n\n    k = 0;\n    while (s2[i + 1] != '\\0')\n        buf2[k++] = s2[i + 1];\n    buf2[k] = '\\0';\n    n = strtol(buf2 + 1, NULL, 10);\n\n    o = j * m;\n    p = l * n;\n\n    return o % p == 0;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m, n, o, p;\n    char buf1[100], buf2[100];\n\n    i = 0;\n    while (s1[i] != '/')\n        buf1[i++] = s1[i];\n    buf1[i] = '\\0';\n    j = strtol(buf1, NULL, 10);\n\n    k = 0;\n    while (s1[i + 1] != '\\0')\n        buf2[k++] = s1[i + 1];\n    buf2[k] = '\\0';\n    l = strtol(buf2 + 1, NULL, 10);\n\n    i = 0;\n    while (s2[i] != '/')\n        buf1[i++] = s2[i];\n    buf1[i] = '\\0';\n    m = strtol(buf1, NULL, 10);\n\n    k = 0;\n    while (s2[i + 1] != '\\0')\n        buf2[k++] = s2[i + 1];\n    buf2[k] = '\\0';\n    n = strtol(buf2 + 1, NULL, 10);\n\n    o = j * m;\n    p = l * n;\n\n    return o % p == 0;\n}\n\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 144, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    char buf1[100];\n    char buf2[100];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(char *s1, char *s2)\n{\n    char buf1[100];\n    char buf2[100];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n\n\n\nint main() {\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/6\", \"2/1\") == 0);\n    assert(func0(\"5/1\", \"3/1\") == 1);\n    assert(func0(\"7/10\", \"10/2\") == 0);\n    assert(func0(\"2/10\", \"50/10\") == 1);\n    assert(func0(\"7/2\", \"4/2\") == 1);\n    assert(func0(\"11/6\", \"6/1\") == 1);\n    assert(func0(\"2/3\", \"5/2\") == 0);\n    assert(func0(\"5/2\", \"3/5\") == 0);\n    assert(func0(\"2/4\", \"8/4\") == 1);\n    assert(func0(\"2/4\", \"4/2\") == 1);\n    assert(func0(\"1/5\", \"5/1\") == 1);\n    assert(func0(\"1/5\", \"1/5\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 145, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int* sum = (int*)malloc(sizeof(int) * numsSize);\n    char str[12];\n    for (int i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        int sum_tmp = 0;\n        for (int j = 1; j < strlen(str); j++) {\n            sum_tmp += str[j] - '0';\n        }\n        sum_tmp += nums[i] > 0 ? str[0] - '0' : -(str[0] - '0');\n        sum[i] = sum_tmp;\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = 1; j < numsSize; j++) {\n            if (sum[j] < sum[j - 1]) {\n                int tmp = sum[j];\n                sum[j] = sum[j - 1];\n                sum[j - 1] = tmp;\n                tmp = nums[j];\n                nums[j] = nums[j - 1];\n                nums[j - 1] = tmp;\n            }\n        }\n    }\n    free(sum);\n    return nums;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int* sum = (int*)malloc(sizeof(int) * numsSize);\n    char str[12];\n    for (int i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        int sum_tmp = 0;\n        for (int j = 1; j < strlen(str); j++) {\n            sum_tmp += str[j] - '0';\n        }\n        sum_tmp += nums[i] > 0 ? str[0] - '0' : -(str[0] - '0');\n        sum[i] = sum_tmp;\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = 1; j < numsSize; j++) {\n            if (sum[j] < sum[j - 1]) {\n                int tmp = sum[j];\n                sum[j] = sum[j - 1];\n                sum[j - 1] = tmp;\n                tmp = nums[j];\n                nums[j] = nums[j - 1];\n                nums[j - 1] = tmp;\n            }\n        }\n    }\n    free(sum);\n    return nums;\n}\n\n\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 145, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int i, j, temp, sum;\n    int *sums = (int*)malloc(numsSize * sizeof(int));\n    char str[10];\n    for (i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        sum = 0;\n        for (j = 0; j < strlen(str); j++) {\n            sum += str[j] - '0';\n        }\n        if (nums[i] > 0) {\n            sum -= str[0] - '0';\n        } else {\n            sum -= str[0] - '0';\n        }\n        sums[i] = sum;\n    }\n    for (i = 0; i < numsSize; i++) {\n        for (j = 1; j < numsSize; j++) {\n            if (sums[j] < sums[j - 1]) {\n                temp = sums[j];\n                sums[j] = sums[j - 1];\n                sums[j - 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j - 1];\n                nums[j - 1] = temp;\n            }\n        }\n    }\n    free(sums);\n    return nums;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int i, j, temp, sum;\n    int *sums = (int*)malloc(numsSize * sizeof(int));\n    char str[10];\n    for (i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        sum = 0;\n        for (j = 0; j < strlen(str); j++) {\n            sum += str[j] - '0';\n        }\n        if (nums[i] > 0) {\n            sum -= str[0] - '0';\n        } else {\n            sum -= str[0] - '0';\n        }\n        sums[i] = sum;\n    }\n    for (i = 0; i < numsSize; i++) {\n        for (j = 1; j < numsSize; j++) {\n            if (sums[j] < sums[j - 1]) {\n                temp = sums[j];\n                sums[j] = sums[j - 1];\n                sums[j - 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j - 1];\n                nums[j - 1] = temp;\n            }\n        }\n    }\n    free(sums);\n    return nums;\n}\n\n\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 145, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int i, j, k, sum, temp;\n    char str[10];\n    int* sum_arr = (int*)malloc(sizeof(int) * numsSize);\n    for (i = 0; i < numsSize; i++) {\n        sum = 0;\n        sprintf(str, \"%d\", abs(nums[i]));\n        for (j = 0; j < strlen(str); j++) {\n            sum += str[j] - '0';\n        }\n        if (nums[i] > 0) {\n            sum_arr[i] = sum;\n        } else {\n            sum_arr[i] = -sum;\n        }\n    }\n    for (i = 0; i < numsSize; i++) {\n        for (j = 0; j < numsSize - 1; j++) {\n            if (sum_arr[j] > sum_arr[j + 1]) {\n                temp = sum_arr[j];\n                sum_arr[j] = sum_arr[j + 1];\n                sum_arr[j + 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n    free(sum_arr);\n    return nums;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize) {\n    int i, j, k, sum, temp;\n    char str[10];\n    int* sum_arr = (int*)malloc(sizeof(int) * numsSize);\n    for (i = 0; i < numsSize; i++) {\n        sum = 0;\n        sprintf(str, \"%d\", abs(nums[i]));\n        for (j = 0; j < strlen(str); j++) {\n            sum += str[j] - '0';\n        }\n        if (nums[i] > 0) {\n            sum_arr[i] = sum;\n        } else {\n            sum_arr[i] = -sum;\n        }\n    }\n    for (i = 0; i < numsSize; i++) {\n        for (j = 0; j < numsSize - 1; j++) {\n            if (sum_arr[j] > sum_arr[j + 1]) {\n                temp = sum_arr[j];\n                sum_arr[j] = sum_arr[j + 1];\n                sum_arr[j + 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n    free(sum_arr);\n    return nums;\n}\n\n\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 145, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize, int* returnSize){\n    int i, j, k, temp;\n    int* result = (int*)malloc(sizeof(int) * numsSize);\n    char str[12];\n    for (i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        for (j = 0, k = 0; j < strlen(str); j++) {\n            k += str[j] - '0';\n        }\n        result[i] = k;\n    }\n    for (i = 0; i < numsSize - 1; i++) {\n        for (j = 0; j < numsSize - 1 - i; j++) {\n            if (result[j] > result[j + 1]) {\n                temp = result[j];\n                result[j] = result[j + 1];\n                result[j + 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n    free(result);\n    return nums;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n\nint* func0(int* nums, int numsSize, int* returnSize){\n    int i, j, k, temp;\n    int* result = (int*)malloc(sizeof(int) * numsSize);\n    char str[12];\n    for (i = 0; i < numsSize; i++) {\n        sprintf(str, \"%d\", abs(nums[i]));\n        for (j = 0, k = 0; j < strlen(str); j++) {\n            k += str[j] - '0';\n        }\n        result[i] = k;\n    }\n    for (i = 0; i < numsSize - 1; i++) {\n        for (j = 0; j < numsSize - 1 - i; j++) {\n            if (result[j] > result[j + 1]) {\n                temp = result[j];\n                result[j] = result[j + 1];\n                result[j + 1] = temp;\n                temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n    free(result);\n    return nums;\n}\n\n\n\nint issame(int* a, int* b, int size_a, int size_b) {\n    if (size_a != size_b) return 0;\n    for (int i = 0; i < size_a; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int test1[] = {1, 11, -1, -11, -12};\n    int expected1[] = {-1, -11, 1, -12, 11};\n    assert(issame(func0(test1, 5), expected1, 5, 5));\n\n    int test2[] = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    int expected2[] = {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457};\n    assert(issame(func0(test2, 15), expected2, 15, 15));\n\n    int test3[] = {};\n    int expected3[] = {};\n    assert(issame(func0(test3, 0), expected3, 0, 0));\n\n    int test4[] = {1, -11, -32, 43, 54, -98, 2, -3};\n    int expected4[] = {-3, -32, -98, -11, 1, 2, 43, 54};\n    assert(issame(func0(test4, 8), expected4, 8, 8));\n\n    int test5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int expected5[] = {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9};\n    assert(issame(func0(test5, 11), expected5, 11, 11));\n\n    int test6[] = {0, 6, 6, -76, -21, 23, 4};\n    int expected6[] = {-76, -21, 0, 4, 23, 6, 6};\n    assert(issame(func0(test6, 7), expected6, 7, 7));\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 146, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 10)\n        {\n            j = a[i];\n            while (j > 9)\n            {\n                j /= 10;\n            }\n            if (j % 2 == 1 && a[i] % 10 % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] > 10)\n        {\n            j = a[i];\n            while (j > 9)\n            {\n                j /= 10;\n            }\n            if (j % 2 == 1 && a[i] % 10 % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 146, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count;\n\n  count = 0;\n  for (i = 0; i < n; i++) {\n    j = a[i];\n    k = j;\n    while (k > 10) {\n      k = k / 10;\n    }\n    if (k % 2 == 1) {\n      if (j % 10 % 2 == 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count;\n\n  count = 0;\n  for (i = 0; i < n; i++) {\n    j = a[i];\n    k = j;\n    while (k > 10) {\n      k = k / 10;\n    }\n    if (k % 2 == 1) {\n      if (j % 10 % 2 == 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 146, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, cnt = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 10) {\n      j = a[i];\n      while (j > 99)\n        j /= 10;\n      if (j % 2 == 1) {\n        if (a[i] % 2 == 1)\n          cnt++;\n        else\n          cnt--;\n      }\n    }\n  }\n  return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, cnt = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 10) {\n      j = a[i];\n      while (j > 99)\n        j /= 10;\n      if (j % 2 == 1) {\n        if (a[i] % 2 == 1)\n          cnt++;\n        else\n          cnt--;\n      }\n    }\n  }\n  return cnt;\n}\n\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 146, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, cnt;\n\n  cnt = 0;\n  for (i = 0; i < n; i++) {\n    j = a[i];\n    if (j < 10)\n      continue;\n    while (j >= 10) {\n      k = j / 10;\n      j = k;\n    }\n    if (k % 2 == 1) {\n      if (a[i] % 2 == 1)\n        cnt++;\n      else\n        cnt--;\n    }\n  }\n  return cnt;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int *a, int n)\n{\n  int i, j, k, cnt;\n\n  cnt = 0;\n  for (i = 0; i < n; i++) {\n    j = a[i];\n    if (j < 10)\n      continue;\n    while (j >= 10) {\n      k = j / 10;\n      j = k;\n    }\n    if (k % 2 == 1) {\n      if (a[i] % 2 == 1)\n        cnt++;\n      else\n        cnt--;\n    }\n  }\n  return cnt;\n}\n\n\nint main() {\n    {\n        int nums[] = {5, -2, 1, -5};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {15, -73, 14, -15};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 1);\n    }\n\n    {\n        int nums[] = {33, -2, -3, 45, 21, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 2);\n    }\n\n    {\n        int nums[] = {43, -12, 93, 125, 121, 109};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 4);\n    }\n\n    {\n        int nums[] = {71, -2, -33, 75, 21, 19};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 3);\n    }\n\n    {\n        int nums[] = {1};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    {\n        int nums[] = {};\n        assert(func0(nums, sizeof(nums) / sizeof(nums[0])) == 0);\n    }\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 147, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 2));\n    int **c = malloc(sizeof(int *) * (n + 2));\n    int i, j, k, l, m, p;\n\n    for (i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n\n    for (i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (j = 0; j < 3; j++)\n            b[i][j] = b[i - 1][j];\n        b[i][a[i - 1]]++;\n    }\n\n    for (k = 1; k < 3; k++) {\n        for (i = 1; i <= n; i++) {\n            for (j = 0; j < 3; j++)\n                c[i][j] = c[i - 1][j];\n            if (i > 0) {\n                for (l = 0; l < 3; l++) {\n                    p = (a[i - 1] + l) % 3;\n                    c[i][p] += b[i - 1][l];\n                }\n            }\n        }\n        for (m = 0; m <= n; m++) {\n            for (p = 0; p < 3; p++) {\n                b[m][p] = c[m][p];\n                c[m][p] = 0;\n            }\n        }\n    }\n\n    int res = b[n][0];\n\n    for (i = 0; i <= n; i++) {", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 2));\n    int **c = malloc(sizeof(int *) * (n + 2));\n    int i, j, k, l, m, p;\n\n    for (i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n\n    for (i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (j = 0; j < 3; j++)\n            b[i][j] = b[i - 1][j];\n        b[i][a[i - 1]]++;\n    }\n\n    for (k = 1; k < 3; k++) {\n        for (i = 1; i <= n; i++) {\n            for (j = 0; j < 3; j++)\n                c[i][j] = c[i - 1][j];\n            if (i > 0) {\n                for (l = 0; l < 3; l++) {\n                    p = (a[i - 1] + l) % 3;\n                    c[i][p] += b[i - 1][l];\n                }\n            }\n        }\n        for (m = 0; m <= n; m++) {\n            for (p = 0; p < 3; p++) {\n                b[m][p] = c[m][p];\n                c[m][p] = 0;\n            }\n        }\n    }\n\n    int res = b[n][0];\n\n    for (i = 0; i <= n; i++) {\n\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 147, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 1));\n    int **c = malloc(sizeof(int *) * (n + 1));\n    for (int i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        b[i][0] = b[i - 1][0];\n        b[i][1] = b[i - 1][1];\n        b[i][2] = b[i - 1][2];\n        b[i][a[i - 1]]++;\n    }\n    for (int k = 0; k < 2; k++) {\n        for (int i = 1; i <= n; i++) {\n            c[i][0] = c[i - 1][0];\n            c[i][1] = c[i - 1][1];\n            c[i][2] = c[i - 1][2];\n            for (int j = 0; j < 3; j++) {\n                c[i][(a[i - 1] + j) % 3] += b[i - 1][j];\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            b[i][0] = c[i][0];\n            c[i][0] = 0;\n            b[i][1] = c[i][1];\n            c[i][1] = 0;\n            b[i][2] = c[i][2];\n           ", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 1));\n    int **c = malloc(sizeof(int *) * (n + 1));\n    for (int i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        b[i][0] = b[i - 1][0];\n        b[i][1] = b[i - 1][1];\n        b[i][2] = b[i - 1][2];\n        b[i][a[i - 1]]++;\n    }\n    for (int k = 0; k < 2; k++) {\n        for (int i = 1; i <= n; i++) {\n            c[i][0] = c[i - 1][0];\n            c[i][1] = c[i - 1][1];\n            c[i][2] = c[i - 1][2];\n            for (int j = 0; j < 3; j++) {\n                c[i][(a[i - 1] + j) % 3] += b[i - 1][j];\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            b[i][0] = c[i][0];\n            c[i][0] = 0;\n            b[i][1] = c[i][1];\n            c[i][1] = 0;\n            b[i][2] = c[i][2];\n           \n\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 147, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(n * sizeof(int));\n    int **b = malloc((n + 1) * sizeof(int *));\n    int **c = malloc((n + 1) * sizeof(int *));\n    int i, j, k, l;\n    for (i = 0; i < n + 1; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (i = 1; i < n + 1; i++) {\n        k = (i * i + i) % 3;\n        a[i - 1] = k;\n        b[i][0] = b[i - 1][0];\n        b[i][1] = b[i - 1][1];\n        b[i][2] = b[i - 1][2];\n        b[i][k]++;\n    }\n    for (j = 2; j > 0; j--) {\n        for (i = 1; i < n + 1; i++) {\n            k = a[i - 1];\n            c[i][0] = c[i - 1][0];\n            c[i][1] = c[i - 1][1];\n            c[i][2] = c[i - 1][2];\n            for (l = 0; l < 3; l++)\n                c[i][(k + l) % 3] += b[i - 1][l];\n        }\n        for (i = 0; i < n + 1; i++) {\n            b[i][0] = c[i][0];\n            b[i][1] = c[i][1];\n            b[i][2] = c[i][2];\n            c[i][0] = c[i][1] = c[", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(n * sizeof(int));\n    int **b = malloc((n + 1) * sizeof(int *));\n    int **c = malloc((n + 1) * sizeof(int *));\n    int i, j, k, l;\n    for (i = 0; i < n + 1; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (i = 1; i < n + 1; i++) {\n        k = (i * i + i) % 3;\n        a[i - 1] = k;\n        b[i][0] = b[i - 1][0];\n        b[i][1] = b[i - 1][1];\n        b[i][2] = b[i - 1][2];\n        b[i][k]++;\n    }\n    for (j = 2; j > 0; j--) {\n        for (i = 1; i < n + 1; i++) {\n            k = a[i - 1];\n            c[i][0] = c[i - 1][0];\n            c[i][1] = c[i - 1][1];\n            c[i][2] = c[i - 1][2];\n            for (l = 0; l < 3; l++)\n                c[i][(k + l) % 3] += b[i - 1][l];\n        }\n        for (i = 0; i < n + 1; i++) {\n            b[i][0] = c[i][0];\n            b[i][1] = c[i][1];\n            b[i][2] = c[i][2];\n            c[i][0] = c[i][1] = c[\n\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 147, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 1));\n    int **c = malloc(sizeof(int *) * (n + 1));\n    int i, j, k, l;\n    int flag = 2;\n\n    for (i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n\n    b[0][0] = 0;\n    b[0][1] = 0;\n    c[0][0] = 0;\n    c[0][1] = 0;\n\n    for (i = 0; i < n; i++) {\n        a[i] = (i + 1) * (i + 1) % 3;\n        c[i + 1][0] = b[i][0];\n        c[i + 1][1] = b[i][1];\n        c[i + 1][a[i]]++;\n    }\n\n    while (flag != 1) {\n        flag = 1;\n        for (i = 0; i < n; i++) {\n            c[i + 1][0] = b[i][0];\n            c[i + 1][1] = b[i][1];\n            k = a[i];\n            b[i][k] += b[i][0];\n            b[i][(k + 1) % 3] += b[i][1];\n            b[i][(k + 2) % 3] += b[i][2];\n        }\n        for (i = 0; i <= n; i++) {\n            l = b[i][1];\n            b[i][1] = 0;\n            b[i][0] = 0;\n            b[i][0] = l;\n        }\n    }\n\n    l = b[n][0];\n\n    for (i = 0; i <= n; i++) {\n        free(b[i", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint func0(int n)\n{\n    int *a = malloc(sizeof(int) * (n + 1));\n    int **b = malloc(sizeof(int *) * (n + 1));\n    int **c = malloc(sizeof(int *) * (n + 1));\n    int i, j, k, l;\n    int flag = 2;\n\n    for (i = 0; i <= n; i++) {\n        b[i] = calloc(3, sizeof(int));\n        c[i] = calloc(3, sizeof(int));\n    }\n\n    b[0][0] = 0;\n    b[0][1] = 0;\n    c[0][0] = 0;\n    c[0][1] = 0;\n\n    for (i = 0; i < n; i++) {\n        a[i] = (i + 1) * (i + 1) % 3;\n        c[i + 1][0] = b[i][0];\n        c[i + 1][1] = b[i][1];\n        c[i + 1][a[i]]++;\n    }\n\n    while (flag != 1) {\n        flag = 1;\n        for (i = 0; i < n; i++) {\n            c[i + 1][0] = b[i][0];\n            c[i + 1][1] = b[i][1];\n            k = a[i];\n            b[i][k] += b[i][0];\n            b[i][(k + 1) % 3] += b[i][1];\n            b[i][(k + 2) % 3] += b[i][2];\n        }\n        for (i = 0; i <= n; i++) {\n            l = b[i][1];\n            b[i][1] = 0;\n            b[i][0] = 0;\n            b[i][0] = l;\n        }\n    }\n\n    l = b[n][0];\n\n    for (i = 0; i <= n; i++) {\n        free(b[i\n\n\nint main() {\n    assert(func0(5) == 1);\n    assert(func0(6) == 4);\n    assert(func0(10) == 36);\n    assert(func0(100) == 53361);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 148, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *planet1, char *planet2, int *n)\n{\n    char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int i, p1 = -1, p2 = -1;\n    char **result;\n\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(planets[i], planet1))\n            p1 = i;\n        if (!strcmp(planets[i], planet2))\n            p2 = i;\n    }\n\n    if (p1 == -1 || p2 == -1 || p1 == p2) {\n        *n = 0;\n        return NULL;\n    }\n\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n    }\n\n    *n = p2 - p1 - 1;\n    if (*n <= 0) {\n        *n = 0;\n        return NULL;\n    }\n\n    result = malloc(*n * sizeof(char *));\n    for (i = p1 + 1; i < p2; i++)\n        result[i - p1 - 1] = planets[i];\n\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *planet1, char *planet2, int *n)\n{\n    char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int i, p1 = -1, p2 = -1;\n    char **result;\n\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(planets[i], planet1))\n            p1 = i;\n        if (!strcmp(planets[i], planet2))\n            p2 = i;\n    }\n\n    if (p1 == -1 || p2 == -1 || p1 == p2) {\n        *n = 0;\n        return NULL;\n    }\n\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n    }\n\n    *n = p2 - p1 - 1;\n    if (*n <= 0) {\n        *n = 0;\n        return NULL;\n    }\n\n    result = malloc(*n * sizeof(char *));\n    for (i = p1 + 1; i < p2; i++)\n        result[i - p1 - 1] = planets[i];\n\n    return result;\n}\n\n\n\n\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 148, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *a, char *b, int *c)\n{\n    char *planets[] = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n    int i, ai = -1, bi = -1;\n    char **ret;\n\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(planets[i], a))\n            ai = i;\n        if (!strcmp(planets[i], b))\n            bi = i;\n    }\n\n    if (ai == -1 || bi == -1 || ai == bi) {\n        *c = 0;\n        return NULL;\n    }\n\n    if (ai > bi) {\n        int tmp = ai;\n        ai = bi;\n        bi = tmp;\n    }\n\n    *c = bi - ai - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n\n    ret = malloc(*c * sizeof(char *));\n    for (i = 0; i < bi - ai - 1; i++)\n        ret[i] = planets[ai + i + 1];\n\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *a, char *b, int *c)\n{\n    char *planets[] = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n    int i, ai = -1, bi = -1;\n    char **ret;\n\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(planets[i], a))\n            ai = i;\n        if (!strcmp(planets[i], b))\n            bi = i;\n    }\n\n    if (ai == -1 || bi == -1 || ai == bi) {\n        *c = 0;\n        return NULL;\n    }\n\n    if (ai > bi) {\n        int tmp = ai;\n        ai = bi;\n        bi = tmp;\n    }\n\n    *c = bi - ai - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n\n    ret = malloc(*c * sizeof(char *));\n    for (i = 0; i < bi - ai - 1; i++)\n        ret[i] = planets[ai + i + 1];\n\n    return ret;\n}\n\n\n\n\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 148, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *a, char *b, int *c)\n{\n    char *planets[] = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n    int i, j, k, l, m, n, o, p;\n    char **q;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(planets[k], a))\n            i = k;\n        if (!strcmp(planets[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        m = i;\n        i = j;\n        j = m;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    q = malloc(*c * sizeof(char *));\n    for (n = i + 1; n < j; n++)\n        q[n - i - 1] = planets[n];\n    return q;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *a, char *b, int *c)\n{\n    char *planets[] = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n    int i, j, k, l, m, n, o, p;\n    char **q;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(planets[k], a))\n            i = k;\n        if (!strcmp(planets[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        m = i;\n        i = j;\n        j = m;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    q = malloc(*c * sizeof(char *));\n    for (n = i + 1; n < j; n++)\n        q[n - i - 1] = planets[n];\n    return q;\n}\n\n\n\n\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 148, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char* planet1, char* planet2, int* n) {\n    char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int n_planets = sizeof(planets) / sizeof(planets[0]);\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < n_planets; i++) {\n        if (strcmp(planets[i], planet1) == 0) {\n            i1 = i;\n        }\n        if (strcmp(planets[i], planet2) == 0) {\n            i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        *n = 0;\n        return NULL;\n    }\n    if (i1 == i2) {\n        *n = 0;\n        return NULL;\n    }\n    if (i1 > i2) {\n        int tmp = i1;\n        i1 = i2;\n        i2 = tmp;\n    }\n    *n = i2 - i1 - 1;\n    char** result = malloc(*n * sizeof(char*));\n    for (int i = i1 + 1; i < i2; i++) {\n        result[i - i1 - 1] = planets[i];\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char* planet1, char* planet2, int* n) {\n    char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int n_planets = sizeof(planets) / sizeof(planets[0]);\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < n_planets; i++) {\n        if (strcmp(planets[i], planet1) == 0) {\n            i1 = i;\n        }\n        if (strcmp(planets[i], planet2) == 0) {\n            i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        *n = 0;\n        return NULL;\n    }\n    if (i1 == i2) {\n        *n = 0;\n        return NULL;\n    }\n    if (i1 > i2) {\n        int tmp = i1;\n        i1 = i2;\n        i2 = tmp;\n    }\n    *n = i2 - i1 - 1;\n    char** result = malloc(*n * sizeof(char*));\n    for (int i = i1 + 1; i < i2; i++) {\n        result[i - i1 - 1] = planets[i];\n    }\n    return result;\n}\n\n\n\n\n\nint issame(char** a, const char** b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char** result;\n\n    const char* test1[] = {\"Saturn\", \"Uranus\"};\n    result = func0(\"Jupiter\", \"Neptune\", &size);\n    assert(issame(result, test1, size, 2));\n    free(result);\n\n    const char* test2[] = {\"Venus\"};\n    result = func0(\"Earth\", \"Mercury\", &size);\n    assert(issame(result, test2, size, 1));\n    free(result);\n\n    const char* test3[] = {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    result = func0(\"Mercury\", \"Uranus\", &size);\n    assert(issame(result, test3, size, 5));\n    free(result);\n\n    const char* test4[] = {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"};\n    result = func0(\"Neptune\", \"Venus\", &size);\n    assert(issame(result, test4, size, 5));\n    free(result);\n\n    result = func0(\"Earth\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Mars\", \"Earth\", &size);\n    assert(size == 0 && result == NULL);\n\n    result = func0(\"Jupiter\", \"Makemake\", &size);\n    assert(size == 0 && result == NULL);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 149, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** A, int ASize, int* returnSize)\n{\n    int i, j;\n    char* temp;\n    *returnSize = 0;\n    for (i = 0; i < ASize; i++)\n    {\n        if (strlen(A[i]) % 2 == 0)\n        {\n            A[*returnSize] = A[i];\n            (*returnSize)++;\n        }\n    }\n    for (i = 0; i < *returnSize - 1; i++)\n    {\n        for (j = 0; j < *returnSize - i - 1; j++)\n        {\n            if (strlen(A[j]) > strlen(A[j + 1]) ||\n                (strlen(A[j]) == strlen(A[j + 1]) && strcmp(A[j], A[j + 1]) > 0))\n            {\n                temp = A[j];\n                A[j] = A[j + 1];\n                A[j + 1] = temp;\n            }\n        }\n    }\n    char** ret = (char**)malloc(sizeof(char*) * (*returnSize));\n    for (i = 0; i < *returnSize; i++)\n    {\n        ret[i] = A[i];\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** A, int ASize, int* returnSize)\n{\n    int i, j;\n    char* temp;\n    *returnSize = 0;\n    for (i = 0; i < ASize; i++)\n    {\n        if (strlen(A[i]) % 2 == 0)\n        {\n            A[*returnSize] = A[i];\n            (*returnSize)++;\n        }\n    }\n    for (i = 0; i < *returnSize - 1; i++)\n    {\n        for (j = 0; j < *returnSize - i - 1; j++)\n        {\n            if (strlen(A[j]) > strlen(A[j + 1]) ||\n                (strlen(A[j]) == strlen(A[j + 1]) && strcmp(A[j], A[j + 1]) > 0))\n            {\n                temp = A[j];\n                A[j] = A[j + 1];\n                A[j + 1] = temp;\n            }\n        }\n    }\n    char** ret = (char**)malloc(sizeof(char*) * (*returnSize));\n    for (i = 0; i < *returnSize; i++)\n    {\n        ret[i] = A[i];\n    }\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 149, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** A, int ASize, int* returnSize)\n{\n    int i, j, k;\n    char *tmp;\n\n    *returnSize = 0;\n    for (i = 0; i < ASize; i++)\n    {\n        if (strlen(A[i]) % 2)\n            continue;\n        A[(*returnSize)++] = A[i];\n    }\n\n    for (i = 0; i < *returnSize - 1; i++)\n    {\n        for (j = 0; j < *returnSize - i - 1; j++)\n        {\n            if (strlen(A[j]) > strlen(A[j + 1]) ||\n                (strlen(A[j]) == strlen(A[j + 1]) && strcmp(A[j], A[j + 1]) > 0))\n            {\n                tmp = A[j];\n                A[j] = A[j + 1];\n                A[j + 1] = tmp;\n            }\n        }\n    }\n\n    char **ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++)\n        ret[i] = A[i];\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** A, int ASize, int* returnSize)\n{\n    int i, j, k;\n    char *tmp;\n\n    *returnSize = 0;\n    for (i = 0; i < ASize; i++)\n    {\n        if (strlen(A[i]) % 2)\n            continue;\n        A[(*returnSize)++] = A[i];\n    }\n\n    for (i = 0; i < *returnSize - 1; i++)\n    {\n        for (j = 0; j < *returnSize - i - 1; j++)\n        {\n            if (strlen(A[j]) > strlen(A[j + 1]) ||\n                (strlen(A[j]) == strlen(A[j + 1]) && strcmp(A[j], A[j + 1]) > 0))\n            {\n                tmp = A[j];\n                A[j] = A[j + 1];\n                A[j + 1] = tmp;\n            }\n        }\n    }\n\n    char **ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++)\n        ret[i] = A[i];\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 149, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, int *ret_argc) {\n  int i, j;\n  char *tmp;\n  *ret_argc = 0;\n  for (i = 0; i < argc; i++) {\n    if (strlen(argv[i]) % 2 == 0) {\n      argv[(*ret_argc)++] = argv[i];\n    }\n  }\n  for (i = *ret_argc - 1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (strlen(argv[j]) > strlen(argv[j + 1])) {\n        tmp = argv[j];\n        argv[j] = argv[j + 1];\n        argv[j + 1] = tmp;\n      } else if (strlen(argv[j]) == strlen(argv[j + 1]) &&\n                 strcmp(argv[j], argv[j + 1]) > 0) {\n        tmp = argv[j];\n        argv[j] = argv[j + 1];\n        argv[j + 1] = tmp;\n      }\n    }\n  }\n  char **ret = malloc(sizeof(char *) * *ret_argc);\n  for (i = 0; i < *ret_argc; i++) {\n    ret[i] = argv[i];\n  }\n  return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, int *ret_argc) {\n  int i, j;\n  char *tmp;\n  *ret_argc = 0;\n  for (i = 0; i < argc; i++) {\n    if (strlen(argv[i]) % 2 == 0) {\n      argv[(*ret_argc)++] = argv[i];\n    }\n  }\n  for (i = *ret_argc - 1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (strlen(argv[j]) > strlen(argv[j + 1])) {\n        tmp = argv[j];\n        argv[j] = argv[j + 1];\n        argv[j + 1] = tmp;\n      } else if (strlen(argv[j]) == strlen(argv[j + 1]) &&\n                 strcmp(argv[j], argv[j + 1]) > 0) {\n        tmp = argv[j];\n        argv[j] = argv[j + 1];\n        argv[j + 1] = tmp;\n      }\n    }\n  }\n  char **ret = malloc(sizeof(char *) * *ret_argc);\n  for (i = 0; i < *ret_argc; i++) {\n    ret[i] = argv[i];\n  }\n  return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 149, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, int *argc_out)\n{\n    int i, j;\n    char *tmp;\n\n    *argc_out = 0;\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) % 2 == 0) {\n            argv[(*argc_out)++] = argv[i];\n        }\n    }\n\n    for (i = *argc_out - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (strlen(argv[j]) > strlen(argv[j + 1]) ||\n                (strlen(argv[j]) == strlen(argv[j + 1]) &&\n                 strcmp(argv[j], argv[j + 1]) > 0)) {\n                tmp = argv[j];\n                argv[j] = argv[j + 1];\n                argv[j + 1] = tmp;\n            }\n        }\n    }\n\n    char **ret = malloc(*argc_out * sizeof(char *));\n    if (*argc_out > 0) {\n        ret = memcpy(ret, argv, (*argc_out - 1) * sizeof(char *));\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **argv, int argc, int *argc_out)\n{\n    int i, j;\n    char *tmp;\n\n    *argc_out = 0;\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) % 2 == 0) {\n            argv[(*argc_out)++] = argv[i];\n        }\n    }\n\n    for (i = *argc_out - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (strlen(argv[j]) > strlen(argv[j + 1]) ||\n                (strlen(argv[j]) == strlen(argv[j + 1]) &&\n                 strcmp(argv[j], argv[j + 1]) > 0)) {\n                tmp = argv[j];\n                argv[j] = argv[j + 1];\n                argv[j + 1] = tmp;\n            }\n        }\n    }\n\n    char **ret = malloc(*argc_out * sizeof(char *));\n    if (*argc_out > 0) {\n        ret = memcpy(ret, argv, (*argc_out - 1) * sizeof(char *));\n    }\n    return ret;\n}\n\n\n\n\n\nint issame(char **a, char **b, int a_size, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (strcmp(a[i], b[i]) != 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int size;\n    char **result;\n\n    char *test1[] = {\"aa\", \"a\", \"aaa\"};\n    char *expected1[] = {\"aa\"};\n    result = func0(test1, 3, &size);\n    assert(issame(result, expected1, size, 1));\n    free(result);\n\n    char *test2[] = {\"school\", \"AI\", \"asdf\", \"b\"};\n    char *expected2[] = {\"AI\", \"asdf\", \"school\"};\n    result = func0(test2, 4, &size);\n    assert(issame(result, expected2, size, 3));\n    free(result);\n\n    char *test3[] = {\"d\", \"b\", \"c\", \"a\"};\n    result = func0(test3, 4, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test4[] = {\"d\", \"dcba\", \"abcd\", \"a\"};\n    char *expected4[] = {\"abcd\", \"dcba\"};\n    result = func0(test4, 4, &size);\n    assert(issame(result, expected4, size, 2));\n    free(result);\n\n    char *test5[] = {\"AI\", \"ai\", \"au\"};\n    char *expected5[] = {\"AI\", \"ai\", \"au\"};\n    result = func0(test5, 3, &size);\n    assert(issame(result, expected5, size, 3));\n    free(result);\n\n    char *test6[] = {\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"};\n    result = func0(test6, 6, &size);\n    assert(size == 0);\n    free(result);\n\n    char *test7[] = {\"aaaa\", \"bbbb\", \"dd\", \"cc\"};\n    char *expected7[] = {\"cc\", \"dd\", \"aaaa\", \"bbbb\"};\n    result = func0(test7, 4, &size);\n    assert(issame(result, expected7, size, 4));\n    free(result);\n\n    printf(\"All tests passed!\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 150, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z) {\n  int i;\n  int is_prime = 1;\n\n  for (i = 2; i * i <= x; i++) {\n    if (x % i == 0) {\n      is_prime = 0;\n    }\n  }\n\n  if (is_prime) {\n    return y;\n  } else {\n    return z;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z) {\n  int i;\n  int is_prime = 1;\n\n  for (i = 2; i * i <= x; i++) {\n    if (x % i == 0) {\n      is_prime = 0;\n    }\n  }\n\n  if (is_prime) {\n    return y;\n  } else {\n    return z;\n  }\n}\n\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 150, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b, int c) {\n  int i;\n  int d = 1;\n  if (a > 1) {\n    d = 0;\n  }\n  for (i = 2; i * i <= a; i++) {\n    if (a % i == 0) {\n      d = 0;\n    }\n  }\n  if (d) {\n    return b;\n  } else {\n    return c;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int a, int b, int c) {\n  int i;\n  int d = 1;\n  if (a > 1) {\n    d = 0;\n  }\n  for (i = 2; i * i <= a; i++) {\n    if (a % i == 0) {\n      d = 0;\n    }\n  }\n  if (d) {\n    return b;\n  } else {\n    return c;\n  }\n}\n\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 150, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z)\n{\n  int i;\n  int is_prime = 1;\n\n  if (x <= 3)\n    is_prime = 1;\n  else\n    {\n      for (i = 2; i * i <= x; i++)\n {\n   if (x % i == 0)\n     {\n       is_prime = 0;\n       break;\n     }\n }\n    }\n\n  if (is_prime)\n    return y;\n  else\n    return z;\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z)\n{\n  int i;\n  int is_prime = 1;\n\n  if (x <= 3)\n    is_prime = 1;\n  else\n    {\n      for (i = 2; i * i <= x; i++)\n {\n   if (x % i == 0)\n     {\n       is_prime = 0;\n       break;\n     }\n }\n    }\n\n  if (is_prime)\n    return y;\n  else\n    return z;\n}\n\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 150, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z) {\n  int i;\n  int is_prime = 1;\n  if (x <= 1) {\n    is_prime = 0;\n  }\n  for (i = 2; i * i <= x; i++) {\n    if (x % i == 0) {\n      is_prime = 0;\n    }\n  }\n  if (is_prime) {\n    return y;\n  } else {\n    return z;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nint func0(int x, int y, int z) {\n  int i;\n  int is_prime = 1;\n  if (x <= 1) {\n    is_prime = 0;\n  }\n  for (i = 2; i * i <= x; i++) {\n    if (x % i == 0) {\n      is_prime = 0;\n    }\n  }\n  if (is_prime) {\n    return y;\n  } else {\n    return z;\n  }\n}\n\n\nint main() {\n    assert(func0(7, 34, 12) == 34);\n    assert(func0(15, 8, 5) == 5);\n    assert(func0(3, 33, 5212) == 33);\n    assert(func0(1259, 3, 52) == 3);\n    assert(func0(7919, -1, 12) == -1);\n    assert(func0(3609, 1245, 583) == 583);\n    assert(func0(91, 56, 129) == 129);\n    assert(func0(6, 34, 1234) == 1234);\n    assert(func0(1, 2, 0) == 0);\n    assert(func0(2, 2, 0) == 2);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 151, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (fabs(a[i] - round(a[i])) < 0.000001 && a[i] > 0 && round(a[i]) % 2 == 1)\n            sum += round(a[i]) * round(a[i]);\n    }\n    return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (fabs(a[i] - round(a[i])) < 0.000001 && a[i] > 0 && round(a[i]) % 2 == 1)\n            sum += round(a[i]) * round(a[i]);\n    }\n    return sum;\n}\n\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 151, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}\n\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 151, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}\n\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 151, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float *a, int n)\n{\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n  {\n    float x = a[i];\n    float y = roundf(x);\n    if (fabs(x - y) < 1e-5 && x > 0 && (int)y % 2 == 1)\n      sum += y * y;\n  }\n  return sum;\n}\n\n\nint main() {\n    assert(func0((const float[]){}, 0) == 0);\n    assert(func0((const float[]){5, 4}, 2) == 25);\n    assert(func0((const float[]){0.1, 0.2, 0.3}, 3) == 0);\n    assert(func0((const float[]){-10, -20, -30}, 3) == 0);\n    assert(func0((const float[]){-1, -2, 8}, 3) == 0);\n    assert(func0((const float[]){0.2, 3, 5}, 3) == 34);\n    \n    long long odd_sum = 0;\n    float lst[200];\n    int lst_size = 0;\n\n    for (int i = -99; i < 100; i += 2) {\n        lst[lst_size++] = i + 0.0f;\n        if (i > 0 && i % 2 == 1) odd_sum += i * i;\n    }\n\n    assert(func0(lst, lst_size) == odd_sum);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 152, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    c[i] = abs(a[i] - b[i]);\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    c[i] = abs(a[i] - b[i]);\n}\n\n\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 152, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = a[i] - b[i];\n    c[i] = (c[i] < 0) ? -c[i] : c[i];\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = a[i] - b[i];\n    c[i] = (c[i] < 0) ? -c[i] : c[i];\n  }\n}\n\n\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 152, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = a[i] - b[i];\n    c[i] = (c[i] < 0) ? -c[i] : c[i];\n  }\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = a[i] - b[i];\n    c[i] = (c[i] < 0) ? -c[i] : c[i];\n  }\n}\n\n\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 152, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int32_t *a, int32_t *b, int32_t *c, int32_t n)\n{\n  int32_t i;\n  for (i = 0; i < n; i++)\n    c[i] = a[i] - b[i];\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int32_t *a, int32_t *b, int32_t *c, int32_t n)\n{\n  int32_t i;\n  for (i = 0; i < n; i++)\n    c[i] = a[i] - b[i];\n}\n\n\n\nint issame(int* a, int* b, int length) {\n    for (int i = 0; i < length; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[6];\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,5,0,0,0,4}, (const int[]){4,1,1,0,0,-2}, result, 6);\n    assert(issame(result, (const int[]){4,4,1,0,0,6}, 6));\n\n    func0((const int[]){1,2,3,4,5,1}, (const int[]){1,2,3,4,2,-2}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,3,3}, 6));\n\n    func0((const int[]){0,0,0,0,0,0}, (const int[]){0,0,0,0,0,0}, result, 6);\n    assert(issame(result, (const int[]){0,0,0,0,0,0}, 6));\n\n    func0((const int[]){1,2,3}, (const int[]){-1,-2,-3}, result, 3);\n    assert(issame(result, (const int[]){2,4,6}, 3));\n\n    func0((const int[]){1,2,3,5}, (const int[]){-1,2,3,4}, result, 4);\n    assert(issame(result, (const int[]){2,0,0,1}, 4));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 153, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char **a, int n, char *t)\n{\n    int i, j, k, m = -1000, c;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; a[i][j]; j++) {\n            c = a[i][j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > m) {\n            m = k;\n            p = a[i];\n        }\n    }\n    sprintf(t, \"%s.%s\", s, p);\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s, char **a, int n, char *t)\n{\n    int i, j, k, m = -1000, c;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; a[i][j]; j++) {\n            c = a[i][j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > m) {\n            m = k;\n            p = a[i];\n        }\n    }\n    sprintf(t, \"%s.%s\", s, p);\n}\n\n\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 153, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n  int i, j, k, max, maxi;\n  char *p;\n\n  max = -1000;\n  for (i = 0; i < n; i++) {\n    p = s2[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n        k++;\n      else if (*p >= 'a' && *p <= 'z')\n        k--;\n      p++;\n    }\n    if (k > max) {\n      max = k;\n      maxi = i;\n    }\n  }\n  __sprintf_chk (s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n  int i, j, k, max, maxi;\n  char *p;\n\n  max = -1000;\n  for (i = 0; i < n; i++) {\n    p = s2[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n        k++;\n      else if (*p >= 'a' && *p <= 'z')\n        k--;\n      p++;\n    }\n    if (k > max) {\n      max = k;\n      maxi = i;\n    }\n  }\n  __sprintf_chk (s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}\n\n\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 153, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n    int i, j, k, max, maxi;\n    char *p;\n\n    max = -1000;\n    for (i = 0; i < n; i++) {\n        p = s2[i];\n        for (j = 0, k = 0; p[j]; j++) {\n            if ((p[j] >= 'A' && p[j] <= 'Z') || (p[j] >= 'a' && p[j] <= 'z'))\n                k++;\n        }\n        if (k > max) {\n            max = k;\n            maxi = i;\n        }\n    }\n    __sprintf_chk(s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n    int i, j, k, max, maxi;\n    char *p;\n\n    max = -1000;\n    for (i = 0; i < n; i++) {\n        p = s2[i];\n        for (j = 0, k = 0; p[j]; j++) {\n            if ((p[j] >= 'A' && p[j] <= 'Z') || (p[j] >= 'a' && p[j] <= 'z'))\n                k++;\n        }\n        if (k > max) {\n            max = k;\n            maxi = i;\n        }\n    }\n    __sprintf_chk(s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}\n\n\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 153, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n    int i, j, k, max, maxi;\n    char *p;\n\n    max = -1000;\n    for (i = 0; i < n; i++) {\n        p = s2[i];\n        for (j = 0, k = 0; p[j]; j++) {\n            if ((p[j] >= 'A' && p[j] <= 'Z') || (p[j] >= 'a' && p[j] <= 'z'))\n                k++;\n        }\n        if (k > max) {\n            max = k;\n            maxi = i;\n        }\n    }\n    __sprintf_chk(s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(char *s1, char **s2, int n, char *s3)\n{\n    int i, j, k, max, maxi;\n    char *p;\n\n    max = -1000;\n    for (i = 0; i < n; i++) {\n        p = s2[i];\n        for (j = 0, k = 0; p[j]; j++) {\n            if ((p[j] >= 'A' && p[j] <= 'Z') || (p[j] >= 'a' && p[j] <= 'z'))\n                k++;\n        }\n        if (k > max) {\n            max = k;\n            maxi = i;\n        }\n    }\n    __sprintf_chk(s3, 1, -1, \"%s.%s\", s1, s2[maxi]);\n}\n\n\n\nint main() {\n    char result[50];\n\n    const char* tmp1[] = {\"tEN\", \"niNE\", \"eIGHt8OKe\"};\n    func0(\"Watashi\", tmp1, 3, result);\n    assert(strcmp(result, \"Watashi.eIGHt8OKe\") == 0);\n\n    const char* tmp2[] = {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"};\n    func0(\"Boku123\", tmp2, 4, result);\n    assert(strcmp(result, \"Boku123.YEs.WeCaNe\") == 0);\n\n    const char* tmp3[] = {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"};\n    func0(\"__YESIMHERE\", tmp3, 6, result);\n    assert(strcmp(result, \"__YESIMHERE.NuLl__\") == 0);\n\n    const char* tmp4[] = {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"};\n    func0(\"K\", tmp4, 4, result);\n    assert(strcmp(result, \"K.TAR\") == 0);\n\n    const char* tmp5[] = {\"Tab\", \"123\", \"781345\", \"-_-\"};\n    func0(\"__HAHA\", tmp5, 4, result);\n    assert(strcmp(result, \"__HAHA.123\") == 0);\n\n    const char* tmp[] = {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"};\n    func0(\"YameRore\", tmp, 5, result);\n    assert(strcmp(result, \"YameRore.okIWILL123\") == 0);\n\n    const char* tmp6[] = {\"Die\", \"NowW\", \"Wow\", \"WoW\"};\n    func0(\"finNNalLLly\", tmp6, 4, result);\n    assert(strcmp(result, \"finNNalLLly.WoW\") == 0);\n\n    const char* tmp7[] = {\"Bb\", \"91245\"};\n    func0(\"_\", tmp7, 2, result);\n    assert(strcmp(result, \"_.Bb\") == 0);\n\n    const char* tmp8[] = {\"671235\", \"Bb\"};\n    func0(\"Sp\", tmp8, 2, result);\n    assert(strcmp(result, \"Sp.671235\") == 0);\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 154, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    char *s = malloc(2 * len2 + 1);\n    for (i = 0; i < len2; i++) {\n        strncpy(s, s2 + i, len2 - i);\n        strncpy(s + len2 - i, s2, i);\n        s[len2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    char *s = malloc(2 * len2 + 1);\n    for (i = 0; i < len2; i++) {\n        strncpy(s, s2 + i, len2 - i);\n        strncpy(s + len2 - i, s2, i);\n        s[len2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}\n\n\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 154, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m;\n    char *s;\n\n    l = strlen(s2);\n    s = malloc(2 * l + 1);\n    for (i = 0; i < l; i++) {\n        for (j = 0, k = l - i; j < i; j++, k++) {\n            strncpy(s, s2 + j, k - j);\n            strncpy(s + k - j, s2, j);\n            s[k] = '\\0';\n            if (strstr(s1, s)) {\n                free(s);\n                return 1;\n            }\n        }\n    }\n    free(s);\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, j, k, l, m;\n    char *s;\n\n    l = strlen(s2);\n    s = malloc(2 * l + 1);\n    for (i = 0; i < l; i++) {\n        for (j = 0, k = l - i; j < i; j++, k++) {\n            strncpy(s, s2 + j, k - j);\n            strncpy(s + k - j, s2, j);\n            s[k] = '\\0';\n            if (strstr(s1, s)) {\n                free(s);\n                return 1;\n            }\n        }\n    }\n    free(s);\n    return 0;\n}\n\n\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 154, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = malloc(2 * len + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = malloc(2 * len + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}\n\n\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 154, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = malloc(2 * len + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdbool.h>\n\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = malloc(2 * len + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}\n\n\n\nint main() {\n    assert(func0(\"xyzw\", \"xyw\") == false);\n    assert(func0(\"yello\", \"ell\") == true);\n    assert(func0(\"whattup\", \"ptut\") == false);\n    assert(func0(\"efef\", \"fee\") == true);\n    assert(func0(\"abab\", \"aabb\") == false);\n    assert(func0(\"winemtt\", \"tinem\") == true);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 155, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *ret)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = abs(n);\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    ret[0] = i;\n    ret[1] = j;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *ret)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = abs(n);\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    ret[0] = i;\n    ret[1] = j;\n}\n\n\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 155, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = n < 0 ? -n : n;\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = n < 0 ? -n : n;\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}\n\n\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 155, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = 0;\n    j = 0;\n    k = n < 0 ? -n : n;\n    while (k > 0) {\n        if (k % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        k /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = 0;\n    j = 0;\n    k = n < 0 ? -n : n;\n    while (k > 0) {\n        if (k % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        k /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}\n\n\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 155, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = n < 0 ? -n : n;\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, int *a)\n{\n    int i, j, k;\n    i = j = k = 0;\n    n = n < 0 ? -n : n;\n    while (n > 0) {\n        if (n % 10 % 2 == 0)\n            i++;\n        else\n            j++;\n        n /= 10;\n    }\n    a[0] = i;\n    a[1] = j;\n}\n\n\n\nint issame(const int *a, const int *b, int size) {\n    return memcmp(a, b, size * sizeof(int)) == 0;\n}\n\nint main() {\n    int result[2];\n\n    func0(7, result);\n    assert(issame(result, (const int[]){0, 1}, 2));\n\n    func0(-78, result);\n    assert(issame(result, (const int[]){1, 1}, 2));\n\n    func0(3452, result);\n    assert(issame(result, (const int[]){2, 2}, 2));\n\n    func0(346211, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-345821, result);\n    assert(issame(result, (const int[]){3, 3}, 2));\n\n    func0(-2, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    func0(-45347, result);\n    assert(issame(result, (const int[]){2, 3}, 2));\n\n    func0(0, result);\n    assert(issame(result, (const int[]){1, 0}, 2));\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 156, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *str)\n{\n    int i;\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    str[0] = '\\0';\n\n    for (i = 0; num > 0; i++) {\n        while (num >= values[i]) {\n            num -= values[i];\n            strcat(str, roman_numerals[i]);\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *str)\n{\n    int i;\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    str[0] = '\\0';\n\n    for (i = 0; num > 0; i++) {\n        while (num >= values[i]) {\n            num -= values[i];\n            strcat(str, roman_numerals[i]);\n        }\n    }\n}\n\n\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 156, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *roman)\n{\n    int i, j;\n    int values[] = {1000, 900, 500, 400, 100, 50, 40, 10, 9, 5, 4, 1};\n    char *romans[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    *roman = '\\0';\n    for (i = 0; i < 13 && num > 0; i++) {\n        for (j = values[i]; j <= num; num -= j) {\n            strcat(roman, romans[i]);\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *roman)\n{\n    int i, j;\n    int values[] = {1000, 900, 500, 400, 100, 50, 40, 10, 9, 5, 4, 1};\n    char *romans[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    *roman = '\\0';\n    for (i = 0; i < 13 && num > 0; i++) {\n        for (j = values[i]; j <= num; num -= j) {\n            strcat(roman, romans[i]);\n        }\n    }\n}\n\n\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 156, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, char *s)\n{\n    int i, j;\n    char *str[13] = {\"m\", \"cm\", \"mm\", \"\u03bcm\", \"nm\", \"pm\", \"fm\", \"am\", \"zm\", \"ym\", \"qm\", \"qm\", \"qm\"};\n    int num[13] = {1000, 100, 1, 10, 1000000, 1000000000, 1000000000000, 1000000000000000, 1000000000000000000, 1000000000000000000000, 1000000000000000000000000, 1000000000000000000000000000, 1000000000000000000000000000000};\n    s[0] = '\\0';\n    for (i = 0; n > 0; i++) {\n        for (j = 0; n >= num[i]; j++) {\n            n -= num[i];\n            s = strcat(s, str[i]);\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int n, char *s)\n{\n    int i, j;\n    char *str[13] = {\"m\", \"cm\", \"mm\", \"\u03bcm\", \"nm\", \"pm\", \"fm\", \"am\", \"zm\", \"ym\", \"qm\", \"qm\", \"qm\"};\n    int num[13] = {1000, 100, 1, 10, 1000000, 1000000000, 1000000000000, 1000000000000000, 1000000000000000000, 1000000000000000000000, 1000000000000000000000000, 1000000000000000000000000000, 1000000000000000000000000000000};\n    s[0] = '\\0';\n    for (i = 0; n > 0; i++) {\n        for (j = 0; n >= num[i]; j++) {\n            n -= num[i];\n            s = strcat(s, str[i]);\n        }\n    }\n}\n\n\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 156, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *str)\n{\n    int i, j;\n    int val[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    *str = '\\0';\n    for (i = 0; num > 0; i++) {\n        while (num >= val[i]) {\n            num -= val[i];\n            str = strcat(str, roman[i]);\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nvoid func0(int num, char *str)\n{\n    int i, j;\n    int val[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    *str = '\\0';\n    for (i = 0; num > 0; i++) {\n        while (num >= val[i]) {\n            num -= val[i];\n            str = strcat(str, roman[i]);\n        }\n    }\n}\n\n\n\nint main() {\n    char result[64]; // Buffer large enough for all Roman numeral representations of numbers 1-1000\n\n    func0(19, result);\n    assert(strcmp(result, \"xix\") == 0);\n\n    func0(152, result);\n    assert(strcmp(result, \"clii\") == 0);\n\n    func0(251, result);\n    assert(strcmp(result, \"ccli\") == 0);\n\n    func0(426, result);\n    assert(strcmp(result, \"cdxxvi\") == 0);\n\n    func0(500, result);\n    assert(strcmp(result, \"d\") == 0);\n\n    func0(1, result);\n    assert(strcmp(result, \"i\") == 0);\n\n    func0(4, result);\n    assert(strcmp(result, \"iv\") == 0);\n\n    func0(43, result);\n    assert(strcmp(result, \"xliii\") == 0);\n\n    func0(90, result);\n    assert(strcmp(result, \"xc\") == 0);\n\n    func0(94, result);\n    assert(strcmp(result, \"xciv\") == 0);\n\n    func0(532, result);\n    assert(strcmp(result, \"dxxxii\") == 0);\n\n    func0(900, result);\n    assert(strcmp(result, \"cm\") == 0);\n\n    func0(994, result);\n    assert(strcmp(result, \"cmxciv\") == 0);\n\n    func0(1000, result);\n    assert(strcmp(result, \"m\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 157, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  if ((((a * a + b * b - c * c) < 0.000001) || ((a * a + c * c - b * b) < 0.000001) || ((b * b + c * c - a * a) < 0.000001)))\n    return 1;\n  else\n    return 0;\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  if ((((a * a + b * b - c * c) < 0.000001) || ((a * a + c * c - b * b) < 0.000001) || ((b * b + c * c - a * a) < 0.000001)))\n    return 1;\n  else\n    return 0;\n}\n\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 157, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  float a2 = a * a;\n  float b2 = b * b;\n  float c2 = c * c;\n  return (((a2 + b2) - c2) >= 0.000001) && (((a2 + c2) - b2) >= 0.000001) && (((b2 + c2) - a2) >= 0.000001);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  float a2 = a * a;\n  float b2 = b * b;\n  float c2 = c * c;\n  return (((a2 + b2) - c2) >= 0.000001) && (((a2 + c2) - b2) >= 0.000001) && (((b2 + c2) - a2) >= 0.000001);\n}\n\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 157, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float x, float y, float z)\n{\n  float a, b, c, d, e, f;\n  a = x * x;\n  b = y * y;\n  c = z * z;\n  d = a + b;\n  e = a + c;\n  f = b + c;\n  return (d > c) && (e > b) && (f > a);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float x, float y, float z)\n{\n  float a, b, c, d, e, f;\n  a = x * x;\n  b = y * y;\n  c = z * z;\n  d = a + b;\n  e = a + c;\n  f = b + c;\n  return (d > c) && (e > b) && (f > a);\n}\n\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 157, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  float a2 = a * a;\n  float b2 = b * b;\n  float c2 = c * c;\n  return (((a2 + b2) - c2) >= 0.000001) && (((a2 + c2) - b2) >= 0.000001) && (((b2 + c2) - a2) >= 0.000001);\n}", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <assert.h>\n\nint func0(float a, float b, float c)\n{\n  float a2 = a * a;\n  float b2 = b * b;\n  float c2 = c * c;\n  return (((a2 + b2) - c2) >= 0.000001) && (((a2 + c2) - b2) >= 0.000001) && (((b2 + c2) - a2) >= 0.000001);\n}\n\n\nint main() {\n    assert(func0(3, 4, 5) == 1);\n    assert(func0(1, 2, 3) == 0);\n    assert(func0(10, 6, 8) == 1);\n    assert(func0(2, 2, 2) == 0);\n    assert(func0(7, 24, 25) == 1);\n    assert(func0(10, 5, 7) == 0);\n    assert(func0(5, 12, 13) == 1);\n    assert(func0(15, 8, 17) == 1);\n    assert(func0(48, 55, 73) == 1);\n    assert(func0(1, 1, 1) == 0);\n    assert(func0(2, 2, 10) == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 158, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char** strs, int strsSize)\n{\n    char* result = \"\";\n    int max = 0;\n    int i, j, k;\n    for (i = 0; i < strsSize; i++)\n    {\n        char temp[256] = {0};\n        k = 0;\n        for (j = 0; strs[i][j] != '\\0'; j++)\n        {\n            if (strchr(temp, strs[i][j]) == NULL)\n            {\n                temp[strlen(temp)] = strs[i][j];\n                temp[strlen(temp) + 1] = '\\0';\n                k++;\n            }\n        }\n        if (k > max || (k == max && strcmp(strs[i], result) < 0))\n        {\n            result = strs[i];\n            max = k;\n        }\n    }\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar* func0(char** strs, int strsSize)\n{\n    char* result = \"\";\n    int max = 0;\n    int i, j, k;\n    for (i = 0; i < strsSize; i++)\n    {\n        char temp[256] = {0};\n        k = 0;\n        for (j = 0; strs[i][j] != '\\0'; j++)\n        {\n            if (strchr(temp, strs[i][j]) == NULL)\n            {\n                temp[strlen(temp)] = strs[i][j];\n                temp[strlen(temp) + 1] = '\\0';\n                k++;\n            }\n        }\n        if (k > max || (k == max && strcmp(strs[i], result) < 0))\n        {\n            result = strs[i];\n            max = k;\n        }\n    }\n    return result;\n}\n\n\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 158, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j, k;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n   ", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j, k;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n    char *p;\n    char *q;\n    char *r;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *a;\n    char *b;\n    char *c;\n    char *d;\n    char *e;\n    char *f;\n    char *g;\n    char *h;\n    char *i;\n    char *j;\n    char *k;\n    char *l;\n    char *m;\n    char *n;\n    char *o;\n   \n\n\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 158, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j, len;\n    char *p, *q;\n    char buf[1024] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        len = 0;\n        for (j = 0; p[j]; j++) {\n            if (strchr(buf, p[j]))\n                continue;\n            buf[len++] = p[j];\n            buf[len] = '\\0';\n        }\n        if (len > max_len) {\n            max_len = len;\n            result = p;\n        } else if (len == max_len) {\n            if (strcmp(p, result) < 0)\n                result = p;\n        }\n    }\n\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j, len;\n    char *p, *q;\n    char buf[1024] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        len = 0;\n        for (j = 0; p[j]; j++) {\n            if (strchr(buf, p[j]))\n                continue;\n            buf[len++] = p[j];\n            buf[len] = '\\0';\n        }\n        if (len > max_len) {\n            max_len = len;\n            result = p;\n        } else if (len == max_len) {\n            if (strcmp(p, result) < 0)\n                result = p;\n        }\n    }\n\n    return result;\n}\n\n\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 158, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j;\n    char *p;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *aa;\n    char *ab;\n    char *ac;\n    char *ad;\n    char *ae;\n    char *af;\n    char *ag;\n    char *ah;\n    char *ai;\n    char *aj;\n    char *ak;\n    char *al;\n    char *am;\n    char *an;\n    char *ao;\n    char *ap;\n    char *aq;\n    char *ar;\n    char *as;\n    char *at;\n    char *au;\n    char *av;\n    char *aw;\n    char *ax;\n    char *ay;\n    char *az;\n    char *ba;\n    char *bb;\n    char *bc;\n    char *bd;\n    char *be;\n    char *bf;\n    char *bg;\n    char *bh;\n    char *bi;\n    char *bj;\n    char *bk;\n    char *bl;\n    char *bm;\n    char *bn;\n    char *bo;\n    char *bp;\n    char *bq;\n    char *br;\n    char *bs;\n    char *bt;\n    char *bu;\n    char *bv;\n    char *bw;\n    char *bx;\n    char *by;\n    char *bz;\n    char *ca;\n    char *cb;\n    char *cc;\n    char *cd;\n    char *ce;\n    char *cf;\n    char *cg;\n    char *ch;\n    char *ci;\n    char *cj;\n    char *ck;\n    char *cl;\n    char *cm;\n    char *cn;\n    char *co;\n    char *cp;", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char **argv, int argc)\n{\n    char *result = \"\";\n    int max_len = 0;\n    int i, j;\n    char *p;\n    char *s;\n    char *t;\n    char *u;\n    char *v;\n    char *w;\n    char *x;\n    char *y;\n    char *z;\n    char *aa;\n    char *ab;\n    char *ac;\n    char *ad;\n    char *ae;\n    char *af;\n    char *ag;\n    char *ah;\n    char *ai;\n    char *aj;\n    char *ak;\n    char *al;\n    char *am;\n    char *an;\n    char *ao;\n    char *ap;\n    char *aq;\n    char *ar;\n    char *as;\n    char *at;\n    char *au;\n    char *av;\n    char *aw;\n    char *ax;\n    char *ay;\n    char *az;\n    char *ba;\n    char *bb;\n    char *bc;\n    char *bd;\n    char *be;\n    char *bf;\n    char *bg;\n    char *bh;\n    char *bi;\n    char *bj;\n    char *bk;\n    char *bl;\n    char *bm;\n    char *bn;\n    char *bo;\n    char *bp;\n    char *bq;\n    char *br;\n    char *bs;\n    char *bt;\n    char *bu;\n    char *bv;\n    char *bw;\n    char *bx;\n    char *by;\n    char *bz;\n    char *ca;\n    char *cb;\n    char *cc;\n    char *cd;\n    char *ce;\n    char *cf;\n    char *cg;\n    char *ch;\n    char *ci;\n    char *cj;\n    char *ck;\n    char *cl;\n    char *cm;\n    char *cn;\n    char *co;\n    char *cp;\n\n\n\nint main() {\n    char *words1[] = {\"name\", \"of\", \"string\"};\n    assert(strcmp(func0(words1, 3), \"string\") == 0);\n\n    char *words2[] = {\"name\", \"enam\", \"game\"};\n    assert(strcmp(func0(words2, 3), \"enam\") == 0);\n\n    char *words3[] = {\"aaaaaaa\", \"bb\", \"cc\"};\n    assert(strcmp(func0(words3, 3), \"aaaaaaa\") == 0);\n\n    char *words4[] = {\"abc\", \"cba\"};\n    assert(strcmp(func0(words4, 2), \"abc\") == 0);\n\n    char *words5[] = {\"play\", \"this\", \"game\", \"of\", \"footbott\"};\n    assert(strcmp(func0(words5, 5), \"footbott\") == 0);\n\n    char *words6[] = {\"we\", \"are\", \"gonna\", \"rock\"};\n    assert(strcmp(func0(words6, 4), \"gonna\") == 0);\n\n    char *words7[] = {\"we\", \"are\", \"a\", \"mad\", \"nation\"};\n    assert(strcmp(func0(words7, 5), \"nation\") == 0);\n\n    char *words8[] = {\"this\", \"is\", \"a\", \"prrk\"};\n    assert(strcmp(func0(words8, 4), \"this\") == 0);\n\n    char *words9[] = {\"b\"};\n    assert(strcmp(func0(words9, 1), \"b\") == 0);\n\n    char *words10[] = {\"play\", \"play\", \"play\"};\n    assert(strcmp(func0(words10, 3), \"play\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 159, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}\n\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 159, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}\n\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 159, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}\n\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 159, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}", "executed_test": "#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int c, int *d)\n{\n  if (c < b) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}\n\n\nint issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    int result[2];\n\n    func0(5, 6, 10, result);\n    assert(issame(result, (const int[]){11, 4}));\n\n    func0(4, 8, 9, result);\n    assert(issame(result, (const int[]){12, 1}));\n\n    func0(1, 10, 10, result);\n    assert(issame(result, (const int[]){11, 0}));\n\n    func0(2, 11, 5, result);\n    assert(issame(result, (const int[]){7, 0}));\n\n    func0(4, 5, 7, result);\n    assert(issame(result, (const int[]){9, 2}));\n\n    func0(4, 5, 1, result);\n    assert(issame(result, (const int[]){5, 0}));\n    \n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 160, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **arr, int *num, int n, int m)\n{\n int *num1 = malloc(m * sizeof(int));\n int *num2 = malloc(m * sizeof(int));\n int i, j, k;\n for (i = 0; i < m; i++)\n {\n  num1[i] = num[i];\n  num2[i] = i;\n }\n for (i = 0; i < n; i++)\n {\n  if (!strcmp(arr[i], \"**\"))\n  {\n   while (num2[i] != num2[num2[i]])\n    num2[i] = num2[num2[i]];\n   while (num2[i + 1] != num2[num2[i + 1]])\n    num2[i + 1] = num2[num2[i + 1]];\n   num1[num2[i]] = pow(num1[num2[i]], num1[num2[i + 1]]);\n   num2[i + 1] = num2[i];\n  }\n }\n for (j = 0; j < n; j++)\n {\n  if (!strcmp(arr[j], \"*\") || !strcmp(arr[j], \"//\"))\n  {\n   while (num2[j] != num2[num2[j]])\n    num2[j] = num2[num2[j]];\n   while (num2[j + 1] != num2[num2[j + 1]])\n    num2[j + 1] = num2[num2[j + 1]];\n   if (!strcmp(arr[j], \"*\"))\n    num1[num2[j]] = num1[num2[j]] * num1[num2[j + 1]];\n   else\n    num1[num2[j]] = num1[num2[j]] / num1[num2[j + 1]];\n   num2[j + 1] = num2[j];\n  }\n }\n for (k = 0; k < n; k++)\n", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **arr, int *num, int n, int m)\n{\n int *num1 = malloc(m * sizeof(int));\n int *num2 = malloc(m * sizeof(int));\n int i, j, k;\n for (i = 0; i < m; i++)\n {\n  num1[i] = num[i];\n  num2[i] = i;\n }\n for (i = 0; i < n; i++)\n {\n  if (!strcmp(arr[i], \"**\"))\n  {\n   while (num2[i] != num2[num2[i]])\n    num2[i] = num2[num2[i]];\n   while (num2[i + 1] != num2[num2[i + 1]])\n    num2[i + 1] = num2[num2[i + 1]];\n   num1[num2[i]] = pow(num1[num2[i]], num1[num2[i + 1]]);\n   num2[i + 1] = num2[i];\n  }\n }\n for (j = 0; j < n; j++)\n {\n  if (!strcmp(arr[j], \"*\") || !strcmp(arr[j], \"//\"))\n  {\n   while (num2[j] != num2[num2[j]])\n    num2[j] = num2[num2[j]];\n   while (num2[j + 1] != num2[num2[j + 1]])\n    num2[j + 1] = num2[num2[j + 1]];\n   if (!strcmp(arr[j], \"*\"))\n    num1[num2[j]] = num1[num2[j]] * num1[num2[j + 1]];\n   else\n    num1[num2[j]] = num1[num2[j]] / num1[num2[j + 1]];\n   num2[j + 1] = num2[j];\n  }\n }\n for (k = 0; k < n; k++)\n\n\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 160, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **tokens, int *values, int n, int m) {\n    int *v = malloc(m * sizeof(int));\n    int *p = malloc(m * sizeof(int));\n    for (int i = 0; i < m; i++) {\n        v[i] = values[i];\n        p[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(tokens[i], \"*\")) {\n            int x = p[i];\n            int y = p[i + 1];\n            while (x != p[x]) x = p[x];\n            p[i + 1] = x;\n            while (y != p[y]) y = p[y];\n            if (x > y) {\n                int tmp = x;\n                x = y;\n                y = tmp;\n            }\n            if (!strcmp(tokens[i], \"*\")) {\n                v[x] *= v[y];\n            } else {\n                v[x] /= v[y];\n            }\n            p[i + 1] = x;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(tokens[i], \"+\") || !strcmp(tokens[i], \"-\")) {\n            int x = p[i];\n            int y = p[i + 1];\n            while (x != p[x]) x = p[x];\n            p[i + 1] = x;\n            while (y != p[y]) y = p[y];\n            if (x > y) {\n                int tmp = x;\n                x = y;\n                y = tmp;\n            }\n            if (!strcmp(tokens[i], \"+\")) {\n                v[x] += v[y];\n            } else {\n                v[x] -= v[y];\n            }\n            p[i + 1] = x;\n        }\n    }\n    int res = v[p[0]];\n    free(v", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **tokens, int *values, int n, int m) {\n    int *v = malloc(m * sizeof(int));\n    int *p = malloc(m * sizeof(int));\n    for (int i = 0; i < m; i++) {\n        v[i] = values[i];\n        p[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(tokens[i], \"*\")) {\n            int x = p[i];\n            int y = p[i + 1];\n            while (x != p[x]) x = p[x];\n            p[i + 1] = x;\n            while (y != p[y]) y = p[y];\n            if (x > y) {\n                int tmp = x;\n                x = y;\n                y = tmp;\n            }\n            if (!strcmp(tokens[i], \"*\")) {\n                v[x] *= v[y];\n            } else {\n                v[x] /= v[y];\n            }\n            p[i + 1] = x;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(tokens[i], \"+\") || !strcmp(tokens[i], \"-\")) {\n            int x = p[i];\n            int y = p[i + 1];\n            while (x != p[x]) x = p[x];\n            p[i + 1] = x;\n            while (y != p[y]) y = p[y];\n            if (x > y) {\n                int tmp = x;\n                x = y;\n                y = tmp;\n            }\n            if (!strcmp(tokens[i], \"+\")) {\n                v[x] += v[y];\n            } else {\n                v[x] -= v[y];\n            }\n            p[i + 1] = x;\n        }\n    }\n    int res = v[p[0]];\n    free(v\n\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 160, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **s, int *v, int n, int m)\n{\n    int *v1 = malloc(m * sizeof(int));\n    int *v2 = malloc(m * sizeof(int));\n    int i, j, k, l, t;\n\n    for (i = 0; i < m; i++) {\n        v2[i] = i;\n        v1[i] = v[i];\n    }\n\n    for (i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"**\")) {\n            j = v2[i];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i] = k;\n                j = k;\n            }\n            j = v2[i + 1];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i + 1] = k;\n                j = k;\n            }\n            v1[v2[i]] = pow(v1[v2[i]], v1[v2[i + 1]]);\n            v2[i + 1] = v2[i];\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"*\") || !strcmp(s[i], \"//\")) {\n            j = v2[i];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i] = k;\n                j = k;\n            }\n            j = v2[i + 1];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i + 1] = k;\n                j = k;\n            }\n            if (!strcmp(s[i], \"*\")) {\n                t = v1[v2[i]] * v1[v2[i + 1]];\n            } else {\n                t = v1[v2[i]] / v1[v2", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **s, int *v, int n, int m)\n{\n    int *v1 = malloc(m * sizeof(int));\n    int *v2 = malloc(m * sizeof(int));\n    int i, j, k, l, t;\n\n    for (i = 0; i < m; i++) {\n        v2[i] = i;\n        v1[i] = v[i];\n    }\n\n    for (i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"**\")) {\n            j = v2[i];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i] = k;\n                j = k;\n            }\n            j = v2[i + 1];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i + 1] = k;\n                j = k;\n            }\n            v1[v2[i]] = pow(v1[v2[i]], v1[v2[i + 1]]);\n            v2[i + 1] = v2[i];\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"*\") || !strcmp(s[i], \"//\")) {\n            j = v2[i];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i] = k;\n                j = k;\n            }\n            j = v2[i + 1];\n            while (j != v2[j]) {\n                k = v2[j];\n                v2[i + 1] = k;\n                j = k;\n            }\n            if (!strcmp(s[i], \"*\")) {\n                t = v1[v2[i]] * v1[v2[i + 1]];\n            } else {\n                t = v1[v2[i]] / v1[v2\n\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 160, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **argv, int *nums, int argc, int nums_len) {\n    int *nums_copy = (int *)malloc(sizeof(int) * nums_len);\n    int *nums_index = (int *)malloc(sizeof(int) * nums_len);\n    for (int i = 0; i < nums_len; i++) {\n        nums_index[i] = i;\n    }\n    for (int i = 0; i < argc; i++) {\n        if (argv[i][0] == '*' && argv[i][1] == '*' && argv[i][2] == '\\0') {\n            int a = nums_index[i];\n            while (a != nums_index[a]) {\n                nums_index[i] = a;\n                a = nums_index[a];\n            }\n            int b = nums_index[i + 1];\n            while (b != nums_index[b]) {\n                nums_index[i + 1] = b;\n                b = nums_index[b];\n            }\n            nums_index[i + 1] = a;\n            nums_copy[a] = pow(nums_copy[a], nums_copy[b]);\n        }\n    }\n    for (int i = 0; i < argc; i++) {\n        if ((argv[i][0] == '*' && argv[i][1] == '\\0') ||\n            (argv[i][0] == '/' && argv[i][1] == '/' && argv[i][2] == '\\0')) {\n            int a = nums_index[i];\n            while (a != nums_index[a]) {\n                nums_index[i] = a;\n                a = nums_index[a];\n            }\n            int b = nums_index[i + 1];\n            while (b != nums_index[b]) {\n                nums_index[i + 1] = b;\n                b = nums", "executed_test": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nint func0(char **argv, int *nums, int argc, int nums_len) {\n    int *nums_copy = (int *)malloc(sizeof(int) * nums_len);\n    int *nums_index = (int *)malloc(sizeof(int) * nums_len);\n    for (int i = 0; i < nums_len; i++) {\n        nums_index[i] = i;\n    }\n    for (int i = 0; i < argc; i++) {\n        if (argv[i][0] == '*' && argv[i][1] == '*' && argv[i][2] == '\\0') {\n            int a = nums_index[i];\n            while (a != nums_index[a]) {\n                nums_index[i] = a;\n                a = nums_index[a];\n            }\n            int b = nums_index[i + 1];\n            while (b != nums_index[b]) {\n                nums_index[i + 1] = b;\n                b = nums_index[b];\n            }\n            nums_index[i + 1] = a;\n            nums_copy[a] = pow(nums_copy[a], nums_copy[b]);\n        }\n    }\n    for (int i = 0; i < argc; i++) {\n        if ((argv[i][0] == '*' && argv[i][1] == '\\0') ||\n            (argv[i][0] == '/' && argv[i][1] == '/' && argv[i][2] == '\\0')) {\n            int a = nums_index[i];\n            while (a != nums_index[a]) {\n                nums_index[i] = a;\n                a = nums_index[a];\n            }\n            int b = nums_index[i + 1];\n            while (b != nums_index[b]) {\n                nums_index[i + 1] = b;\n                b = nums\n\n\nint main() {\n    const char *operators1[] = {\"**\", \"*\", \"+\"};\n    int operands1[] = {2, 3, 4, 5};\n    assert(func0(operators1, operands1, 3, 4) == 37);\n\n    const char *operators2[] = {\"+\", \"*\", \"-\"};\n    int operands2[] = {2, 3, 4, 5};\n    assert(func0(operators2, operands2, 3, 4) == 9);\n\n    const char *operators3[] = {\"//\", \"*\"};\n    int operands3[] = {7, 3, 4};\n    assert(func0(operators3, operands3, 2, 3) == 8);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 161, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n int i, j, k, len, flag = 0;\n char temp;\n\n len = strlen(str);\n\n for (i = 0; i < len; i++)\n {\n  if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0400)\n  {\n   if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0100)\n    str[i] = tolower(str[i]);\n   else if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0200)\n    str[i] = toupper(str[i]);\n  }\n  else\n   flag++;\n }\n\n if (flag == len)\n {\n  for (j = 0, k = len - 1; j < len / 2; j++, k--)\n  {\n   temp = str[j];\n   str[j] = str[k];\n   str[k] = temp;\n  }\n }\n\n return str;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *str)\n{\n int i, j, k, len, flag = 0;\n char temp;\n\n len = strlen(str);\n\n for (i = 0; i < len; i++)\n {\n  if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0400)\n  {\n   if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0100)\n    str[i] = tolower(str[i]);\n   else if (__ctype_b_loc()[(unsigned char)str[i]] & 0x0200)\n    str[i] = toupper(str[i]);\n  }\n  else\n   flag++;\n }\n\n if (flag == len)\n {\n  for (j = 0, k = len - 1; j < len / 2; j++, k--)\n  {\n   temp = str[j];\n   str[j] = str[k];\n   str[k] = temp;\n  }\n }\n\n return str;\n}\n\n\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 161, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  const unsigned char *ctype_b;\n  const unsigned char *ctype_tolower;\n  const unsigned char *ctype_toupper;\n\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  l = i;\n\n  ctype_b = __ctype_b_loc();\n\n  for (j = 0; j < l; j++)\n    {\n      if ((ctype_b[s[j]] & 0x0400) == 0)\n {\n   i++;\n }\n      else if ((ctype_b[s[j]] & 0x0100) == 0)\n {\n   if ((ctype_b[s[j]] & 0x0200) != 0)\n     {\n       ctype_toupper = __ctype_toupper_loc();\n       s[j] = ctype_toupper[s[j]];\n     }\n }\n      else\n {\n   ctype_tolower = __ctype_tolower_loc();\n   s[j] = ctype_tolower[s[j]];\n }\n    }\n\n  if (i == l && l > 1)\n    {\n      for (j = 0, k = l - 1; j < l / 2; j++, k--)\n {\n   s[j] ^= s[k];\n   s[k] ^= s[j];\n   s[j] ^= s[k];\n }\n    }\n\n  return s;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  const unsigned char *ctype_b;\n  const unsigned char *ctype_tolower;\n  const unsigned char *ctype_toupper;\n\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  l = i;\n\n  ctype_b = __ctype_b_loc();\n\n  for (j = 0; j < l; j++)\n    {\n      if ((ctype_b[s[j]] & 0x0400) == 0)\n {\n   i++;\n }\n      else if ((ctype_b[s[j]] & 0x0100) == 0)\n {\n   if ((ctype_b[s[j]] & 0x0200) != 0)\n     {\n       ctype_toupper = __ctype_toupper_loc();\n       s[j] = ctype_toupper[s[j]];\n     }\n }\n      else\n {\n   ctype_tolower = __ctype_tolower_loc();\n   s[j] = ctype_tolower[s[j]];\n }\n    }\n\n  if (i == l && l > 1)\n    {\n      for (j = 0, k = l - 1; j < l / 2; j++, k--)\n {\n   s[j] ^= s[k];\n   s[k] ^= s[j];\n   s[j] ^= s[k];\n }\n    }\n\n  return s;\n}\n\n\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 161, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  char c;\n\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (__ctype_b_loc()[c] & 0x0400) {\n      if (__ctype_b_loc()[c] & 0x0100)\n        s[i] = __ctype_tolower_loc()[c];\n      else if (__ctype_b_loc()[c] & 0x0200)\n        s[i] = __ctype_toupper_loc()[c];\n    } else\n      j++;\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < l / 2; i++, j--) {\n      k = s[i];\n      s[i] = s[j];\n      s[j] = k;\n    }\n  }\n  return s;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  char c;\n\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (__ctype_b_loc()[c] & 0x0400) {\n      if (__ctype_b_loc()[c] & 0x0100)\n        s[i] = __ctype_tolower_loc()[c];\n      else if (__ctype_b_loc()[c] & 0x0200)\n        s[i] = __ctype_toupper_loc()[c];\n    } else\n      j++;\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < l / 2; i++, j--) {\n      k = s[i];\n      s[i] = s[j];\n      s[j] = k;\n    }\n  }\n  return s;\n}\n\n\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 161, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}", "model_prediction": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  char c;\n\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (__ctype_b_loc()[(unsigned char)c] & (1 << 10)) {\n      if (__ctype_b_loc()[(unsigned char)c] & (1 << 8)) {\n s[i] = __ctype_tolower_loc()[(unsigned char)c];\n      } else if (__ctype_b_loc()[(unsigned char)c] & (1 << 9)) {\n s[i] = __ctype_toupper_loc()[(unsigned char)c];\n      }\n    } else {\n      j++;\n    }\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < l / 2; i++, j--) {\n      c = s[i];\n      s[i] = s[j];\n      s[j] = c;\n    }\n  }\n  return s;\n}", "executed_test": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(char *s)\n{\n  int i, j, k, l;\n  char c;\n\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (__ctype_b_loc()[(unsigned char)c] & (1 << 10)) {\n      if (__ctype_b_loc()[(unsigned char)c] & (1 << 8)) {\n s[i] = __ctype_tolower_loc()[(unsigned char)c];\n      } else if (__ctype_b_loc()[(unsigned char)c] & (1 << 9)) {\n s[i] = __ctype_toupper_loc()[(unsigned char)c];\n      }\n    } else {\n      j++;\n    }\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < l / 2; i++, j--) {\n      c = s[i];\n      s[i] = s[j];\n      s[j] = c;\n    }\n  }\n  return s;\n}\n\n\n\nint main(){\n    char test1[] = \"AsDf\";\n    assert(strcmp(func0(test1), \"aSdF\") == 0);\n\n    char test2[] = \"1234\";\n    assert(strcmp(func0(test2), \"4321\") == 0);\n\n    char test3[] = \"ab\";\n    assert(strcmp(func0(test3), \"AB\") == 0);\n\n    char test4[] = \"#a@C\";\n    assert(strcmp(func0(test4), \"#A@c\") == 0);\n\n    char test5[] = \"#AsdfW^45\";\n    assert(strcmp(func0(test5), \"#aSDFw^45\") == 0);\n\n    char test6[] = \"#6@2\";\n    assert(strcmp(func0(test6), \"2@6#\") == 0);\n\n    char test7[] = \"#$a^D\";\n    assert(strcmp(func0(test7), \"#$A^d\") == 0);\n\n    char test8[] = \"#ccc\";\n    assert(strcmp(func0(test8), \"#CCC\") == 0);\n\n    return 0;\n}", "compile_passed": 0, "test_passed": 0}
{"task_id": 162, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *str)\n{\n    if (!*str)\n        return strdup(\"None\");\n\n    unsigned int crc = 0xFFFFFFFF;\n    for (unsigned int i = 0; str[i]; i++) {\n        crc ^= str[i];\n        for (unsigned int j = 0; j < 8; j++)\n            crc = (crc & 1) ? (crc >> 1) ^ 0xEDB88320 : crc >> 1;\n    }\n\n    char *result = malloc(9);\n    if (result)\n        sprintf(result, \"%08X\", ~crc);\n    return result;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *str)\n{\n    if (!*str)\n        return strdup(\"None\");\n\n    unsigned int crc = 0xFFFFFFFF;\n    for (unsigned int i = 0; str[i]; i++) {\n        crc ^= str[i];\n        for (unsigned int j = 0; j < 8; j++)\n            crc = (crc & 1) ? (crc >> 1) ^ 0xEDB88320 : crc >> 1;\n    }\n\n    char *result = malloc(9);\n    if (result)\n        sprintf(result, \"%08X\", ~crc);\n    return result;\n}\n\n\n\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 162, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n  unsigned int c = ~0L;\n  const unsigned char *us = (const unsigned char *)s;\n  char *r;\n  int i, j;\n\n  for (i = 0; us[i]; i++) {\n    c ^= us[i];\n    for (j = 0; j < 8; j++) {\n      c = (c >> 1) ^ (0xEDB88320 & (-(c & 1)));\n    }\n  }\n\n  r = malloc(9);\n  if (r)\n    __sprintf_chk(r, 1, 9, \"%08X\", c);\n  return r;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n  unsigned int c = ~0L;\n  const unsigned char *us = (const unsigned char *)s;\n  char *r;\n  int i, j;\n\n  for (i = 0; us[i]; i++) {\n    c ^= us[i];\n    for (j = 0; j < 8; j++) {\n      c = (c >> 1) ^ (0xEDB88320 & (-(c & 1)));\n    }\n  }\n\n  r = malloc(9);\n  if (r)\n    __sprintf_chk(r, 1, 9, \"%08X\", c);\n  return r;\n}\n\n\n\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 162, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n    unsigned int c = 0xFFFFFFFF;\n    const unsigned char *p = (const unsigned char *)s;\n    while (*p) {\n        c ^= *p++;\n        for (int i = 0; i < 8; i++) {\n            c = (c >> 1) ^ (0xEDB88320 & (-(c & 1)));\n        }\n    }\n    char *ret = malloc(9);\n    if (ret) {\n        __sprintf_chk(ret, 1, 9, \"%08X\", c ^ 0xFFFFFFFF);\n    }\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n    unsigned int c = 0xFFFFFFFF;\n    const unsigned char *p = (const unsigned char *)s;\n    while (*p) {\n        c ^= *p++;\n        for (int i = 0; i < 8; i++) {\n            c = (c >> 1) ^ (0xEDB88320 & (-(c & 1)));\n        }\n    }\n    char *ret = malloc(9);\n    if (ret) {\n        __sprintf_chk(ret, 1, 9, \"%08X\", c ^ 0xFFFFFFFF);\n    }\n    return ret;\n}\n\n\n\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 162, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}", "model_prediction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n    unsigned int c = ~0;\n    unsigned int i = 0;\n    while (s[i]) {\n        c = c ^ s[i];\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        i++;\n    }\n    char *ret = malloc(9);\n    if (ret)\n        __sprintf_chk(ret, 1, 9, \"%08X\", ~c);\n    return ret;\n}", "executed_test": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <string.h>\n\nchar *func0(const char *s)\n{\n    unsigned int c = ~0;\n    unsigned int i = 0;\n    while (s[i]) {\n        c = c ^ s[i];\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320L ^ (c >> 1)) : (c >> 1);\n        i++;\n    }\n    char *ret = malloc(9);\n    if (ret)\n        __sprintf_chk(ret, 1, 9, \"%08X\", ~c);\n    return ret;\n}\n\n\n\n\nint main() {\n  char* result;\n\n  // Test 1\n  result = func0(\"Hello world\");\n  assert(strcmp(result, \"8BD69E52\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 2\n  result = func0(\"\");\n  assert(strcmp(result, \"None\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 3\n  result = func0(\"foobar\");\n  assert(strcmp(result, \"9EF61F95\") == 0); \n  free(result); // Free the allocated memory\n\n  // Test 4\n  result = func0(\"abcd1234\");\n  assert(strcmp(result, \"3D3FB146\") == 0);\n  free(result); // Free the allocated memory\n\n  // Test 5\n  result = func0(\"test string\");\n  assert(strcmp(result, \"13471545\") == 0);\n  free(result); // Free the allocated memory\n  \n  return 0;\n}", "compile_passed": 1, "test_passed": 0}
{"task_id": 163, "type": "O0", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *arr, int *n)\n{\n    int i, min, max;\n    *n = 0;\n    if (a > b) {\n        min = b;\n        max = a;\n    } else {\n        min = a;\n        max = b;\n    }\n    for (i = min; i <= max; i++) {\n        if (i < 10 && i % 2 == 0) {\n            arr[*n] = i;\n            (*n)++;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *arr, int *n)\n{\n    int i, min, max;\n    *n = 0;\n    if (a > b) {\n        min = b;\n        max = a;\n    } else {\n        min = a;\n        max = b;\n    }\n    for (i = min; i <= max; i++) {\n        if (i < 10 && i % 2 == 0) {\n            arr[*n] = i;\n            (*n)++;\n        }\n    }\n}\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 163, "type": "O1", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    int i;\n    for (i = ((a) < (b) ? (a) : (b)); i <= ((a) < (b) ? (b) : (a)); i++)\n    {\n        if (i <= 9 && i % 2 == 0)\n        {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    int i;\n    for (i = ((a) < (b) ? (a) : (b)); i <= ((a) < (b) ? (b) : (a)); i++)\n    {\n        if (i <= 9 && i % 2 == 0)\n        {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 163, "type": "O2", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    int i;\n    for (i = ((a) < (b) ? (a) : (b)); i <= ((a) < (b) ? (b) : (a)); i++)\n    {\n        if (i <= 9 && i % 2 == 0)\n        {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    int i;\n    for (i = ((a) < (b) ? (a) : (b)); i <= ((a) < (b) ? (b) : (a)); i++)\n    {\n        if (i <= 9 && i % 2 == 0)\n        {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
{"task_id": 163, "type": "O3", "ground_truth_c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}", "model_prediction": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b && i < 10; i++) {\n        if (i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}", "executed_test": "#include <stdio.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b && i < 10; i++) {\n        if (i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}\n\n\n\nint issame(const int *a, int a_size, const int *b, int b_size) {\n    if (a_size != b_size) return 0;\n    for (int i = 0; i < a_size; i++) {\n        if (a[i] != b[i]) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int result[10], size;\n\n    int expected1[] = {2, 4, 6, 8};\n    func0(2, 10, result, &size);\n    assert(issame(result, size, expected1, 4));\n\n    int expected2[] = {2, 4, 6, 8};\n    func0(10, 2, result, &size);\n    assert(issame(result, size, expected2, 4));\n\n    int expected3[] = {2, 4, 6, 8};\n    func0(132, 2, result, &size);\n    assert(issame(result, size, expected3, 4));\n\n    int expected4[] = {}; // Empty set\n    func0(17, 89, result, &size);\n    assert(issame(result, size, expected4, 0));\n\n    printf(\"All tests passed.\\n\");\n\n    return 0;\n}", "compile_passed": 1, "test_passed": 1}
