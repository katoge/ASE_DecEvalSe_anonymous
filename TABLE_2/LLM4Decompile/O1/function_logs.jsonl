{"compilable":1,"function":"int *func0(const char *paren_string, int *returnSize) {\n    int *all_levels = ((void *)0);\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\x00'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level)\n                max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int *)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}\n","function_prediction":"int *func0_name_conflict(char *str, int *returnSize) {\n  int *result = NULL;\n  int resultSize = 0;\n  int maxDepth = 0;\n  int depth = 0;\n  for (int i = 0; str[i] != '\\0'; i++) {\n    if (str[i] == '(') {\n      depth++;\n      if (depth > maxDepth) {\n        maxDepth = depth;\n      }\n    } else if (str[i] == ')') {\n      depth--;\n      if (depth == 0) {\n        resultSize++;\n        result = realloc(result, resultSize * sizeof(int));\n        result[resultSize - 1] = maxDepth;\n        maxDepth = 0;\n      }\n    }\n  }\n  *returnSize = resultSize;\n  return result;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_6.c"}
{"compilable":0,"function":"int *func0(int n) {\n    int *out = (int *)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}\n","function_prediction":"void func0_name_conflict(int n) {\n  int i;\n  int *a = malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_100.c"}
{"compilable":1,"function":"bool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0)\n        return 1;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1])\n            num += 1;\n    if (arr[size - 1] > arr[0])\n        num += 1;\n    if (num < 2)\n        return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, c = 0;\n  if (n == 0)\n    return 1;\n  for (i = 0; i < n - 1; i++)\n    if (a[i] > a[i + 1])\n      c++;\n  if (a[0] > a[n - 1])\n    c++;\n  return c <= 1;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_109.c"}
{"compilable":1,"function":"const char *func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0)\n            num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0)\n            num += 1;\n    if (num >= size1)\n        return \"YES\";\n    return \"NO\";\n}\n","function_prediction":"char *func0_name_conflict(int *a, int na, int *b, int nb) {\n  int i, n;\n\n  n = 0;\n  for (i = 0; i < na; i++)\n    if (!(a[i] & 1))\n      n++;\n  for (i = 0; i < nb; i++)\n    if (!(b[i] & 1))\n      n++;\n  return n >= na ? \"OK\" : \"NO\";\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_110.c"}
{"compilable":0,"function":"char *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\x00'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\x00';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}\n","function_prediction":"char *func0_name_conflict(char **words, int wordsSize) {\n  char *result = \"\";\n  int max = 0;\n  int i, j, k;\n  char *word;\n  char *p;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *aa;\n  char *ab;\n  char *ac;\n  char *ad;\n  char *ae;\n  char *af;\n  char *ag;\n  char *ah;\n  char *ai;\n  char *aj;\n  char *ak;\n  char *al;\n  char *am;\n  char *an;\n  char *ao;\n  char *ap;\n  char *aq;\n  char *ar;\n  char *as;\n  char *at;\n  char *au;\n  char *av;\n  char *aw;\n  char *ax;\n  char *ay;\n  char *az;\n  char *ba;\n  char *bb;\n  char *bc;\n  char *bd;\n  char *be;\n  char *bf;\n  char *bg;\n  char *bh;\n  char *bi;\n  char *bj;\n  char *bk;\n  char *bl;\n  char *bm;\n  char *bn;\n  char *bo;\n  char *bp;\n  char *bq;\n  char *br;\n  char *bs;\n  char *bt;\n  char *bu;\n  char *bv;\n  char *bw;\n  char *bx;\n  char *by;\n  char *bz;\n  char *ca;\n  char *cb;\n  char *cc;\n  char *cd;\n  char *ce;\n  char *cf;\n  char *cg;\n  char *ch;\n  char *ci;\n  char *cj;\n  char *ck;\n  char *cl;\n  char *cm;\n  char *cn;\n  char *co;\n","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_158.c"}
{"compilable":0,"function":"int func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n    for (int i = 0; s[i] != '\\x00'; i++) {\n        if (((*__ctype_b_loc())[(int)((s[i]))] & (unsigned short)_ISdigit)) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}\n","function_prediction":"int func0_name_conflict(char *s, int n) {\n  char a[10] = {0};\n  char b[10] = {0};\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int flag = 0;\n  while (s[i] != '\\0') {\n    if (__ctype_b_loc()[s[i] + 1] & 0x08) {\n      if (flag == 0) {\n        a[j++] = s[i];\n      } else {\n        b[k++] = s[i];\n      }\n    } else {\n      if (flag == 0 && j > 0) {\n        flag = 1;\n        j = 0;\n      }\n    }\n    i++;\n  }\n  return n - strtol(a, NULL, 10) - strtol(b, NULL, 10);\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_67.c"}
{"compilable":1,"function":"bool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, len;\n  len = strlen(s);\n  for (i = 0; i < len / 2; i++)\n    if (s[i] != s[len - i - 1])\n      return 0;\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_48.c"}
{"compilable":1,"function":"int *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return ((void *)0);\n    }\n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return ((void *)0);\n    }\n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max)\n            max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int *a, int n) {\n  int i, max;\n  int *b;\n\n  if (n <= 0)\n    return NULL;\n\n  b = malloc(n * sizeof(int));\n  if (b == NULL)\n    return NULL;\n\n  max = a[0];\n  for (i = 0; i < n; i++) {\n    if (a[i] > max)\n      max = a[i];\n    b[i] = max;\n  }\n\n  return b;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_9.c"}
{"compilable":1,"function":"int func0(int *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if (i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i;\n  int sum = 0;\n\n  for (i = 0; i < n; i++)\n    if (i % 3 == 0)\n      sum += a[i] * a[i] * a[i];\n    else if (i % 3 == 0)\n      sum += a[i] * a[i];\n    else\n      sum += a[i];\n\n  return sum;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_142.c"}
{"compilable":1,"function":"int func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2)\n        isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            isp = 0;\n    }\n    if (isp)\n        return x;\n    return y;\n}\n","function_prediction":"int func0_name_conflict(int a, int b, int c) {\n  int i;\n  int d = 1;\n  if (a > 1) {\n    d = 0;\n  }\n  for (i = 2; i * i <= a; i++) {\n    if (a % i == 0) {\n      d = 0;\n    }\n  }\n  if (d) {\n    return b;\n  } else {\n    return c;\n  }\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_150.c"}
{"compilable":1,"function":"int func0(int a, int b) {\n    while (b != 0)\n        {\n            int m = a % b;\n            a = b;\n            b = m;\n        }\n    return a;\n}\n","function_prediction":"int func0_name_conflict(int a, int b) {\n  if (b == 0)\n    return a;\n  return func0_name_conflict(b, a % b);\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_13.c"}
{"compilable":1,"function":"int func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0)\n            return 1;\n    }\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i;\n  int sum;\n\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_3.c"}
{"compilable":1,"function":"int func0(int n) {\n    if (n % 2 == 0 && n >= 8)\n        return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int x) { return (x > 7) ? (x ^ 1) : 0; }","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_138.c"}
{"compilable":1,"function":"int func0(int *lst, int size) {\n    if (size < 2)\n        return -1;\n    int first = 2147483647, second = 2147483647;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n    if (second == 2147483647)\n        return -1;\n    return second;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, min, min2;\n\n  if (n < 2)\n    return -1;\n\n  min = 0x7fffffff;\n  min2 = 0x7fffffff;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] < min) {\n      min2 = min;\n      min = a[i];\n    } else if (a[i] < min2)\n      min2 = a[i];\n  }\n\n  if (min2 == 0x7fffffff)\n    return -1;\n\n  return min2;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_90.c"}
{"compilable":1,"function":"int func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n","function_prediction":"int func0_name_conflict(int a, int b) {\n  return (((a) > 0 ? (a) : -(a)) % 10) * (((b) > 0 ? (b) : -(b)) % 10);\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_97.c"}
{"compilable":1,"function":"int *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n    *out_size = k;\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int *a, int n, int *b, int m, int *k) {\n  int i, j, t, *c, l;\n  c = (int *)malloc(n * sizeof(int));\n  l = 0;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < l; j++)\n      if (c[j] == a[i])\n        break;\n    if (j < l)\n      continue;\n    for (j = 0; j < m; j++)\n      if (a[i] == b[j]) {\n        c[l] = a[i];\n        l++;\n        break;\n      }\n  }\n  for (i = l; i > 1; i--)\n    for (j = 0; j < i - 1; j++)\n      if (c[j] > c[j + 1]) {\n        t = c[j];\n        c[j] = c[j + 1];\n        c[j + 1] = t;\n      }\n  *k = l;\n  return c;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_58.c"}
{"compilable":1,"function":"char **func0(char **arr1, int n1, char **arr2, int n2) {\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n1; i++) {\n        sum1 += strlen(arr1[i]);\n    }\n    for (i = 0; i < n2; i++) {\n        sum2 += strlen(arr2[i]);\n    }\n    if (sum1 < sum2) {\n        return arr1;\n    } else if (sum1 > sum2) {\n        return arr2;\n    } else {\n        return arr1;\n    }\n}\n","function_prediction":"char **func0_name_conflict(char **p, int n, char **q, int m) {\n  int i, lenp = 0, lenq = 0;\n\n  for (i = 0; i < n; i++)\n    lenp += strlen(p[i]);\n  for (i = 0; i < m; i++)\n    lenq += strlen(q[i]);\n\n  return lenp >= lenq ? p : q;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_74.c"}
{"compilable":1,"function":"char *func0(int n, int m) {\n    if (n > m)\n        return \"-1\";\n    int num = (m + n) / 2;\n    char *out = (char *)malloc(33);\n    out[0] = '\\x00';\n    int index = 32;\n    out[index--] = '\\x00';\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n    return &out[index + 1];\n}\n","function_prediction":"char *func0_name_conflict(int a, int b) {\n  if (a > b)\n    return \"-1\";\n\n  int c = a + b;\n  char *str = (char *)malloc(33);\n  str[0] = '\\0';\n  str[32] = '\\0';\n  char *p = str + 31;\n  while (c > 1) {\n    *p-- = (c % 2) + '0';\n    c /= 2;\n  }\n  return p + 1;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_103.c"}
{"compilable":1,"function":"int func0(int *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1)\n            sum += lst[i * 2];\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  return sum;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_121.c"}
{"compilable":1,"function":"bool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\x00';\n        if (strstr(a, temp)) {\n            free(temp);\n            return 1;\n        }\n    }\n    free(temp);\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(char *s1, char *s2) {\n  int i, len;\n  char *s;\n\n  len = strlen(s2);\n  s = malloc(2 * len + 1);\n  for (i = 0; i < len; i++) {\n    strncpy(s, s2 + i, len - i);\n    strncpy(s + (len - i), s2, i);\n    s[len] = '\\0';\n    if (strstr(s1, s)) {\n      free(s);\n      return 1;\n    }\n  }\n  free(s);\n  return 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_154.c"}
{"compilable":1,"function":"bool func0(const char *str) {\n    int l = strlen(str);\n    if (l < 2)\n        return 0;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0)\n            return 0;\n    }\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, len;\n\n  len = strlen(s);\n  if (len <= 1)\n    return 0;\n  if (len <= 3)\n    return 1;\n  for (i = 2; i * i <= len; i++)\n    if (len % i == 0)\n      return 0;\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_82.c"}
{"compilable":0,"function":"int func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && ((*__ctype_b_loc())[(int)(((unsigned char)ch))] & (unsigned short)_ISalpha)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    return count;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, c, n;\n  char *p;\n  char a[128] = {0};\n\n  for (p = s, n = 0; *p; p++) {\n    c = __ctype_tolower_loc()->__table[*p];\n    if (!a[c]) {\n      if (__ctype_b_loc()->__table[c >> 8] & (1 << (c & 7))) {\n        a[c] = 1;\n        n++;\n      }\n    }\n  }\n  return n;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_16.c"}
{"compilable":1,"function":"int func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}\n","function_prediction":"int func0_name_conflict(int n, int m) {\n  int i, r = 1;\n  for (i = 0; i < n; i++)\n    r = (r * 2) % m;\n  return r;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_49.c"}
{"compilable":1,"function":"const char *func0(const char *numbers) {\n    int count[10] = {0};\n    const char *numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000];\n    char current[6];\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\x00'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\x00';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\x00'; ++k , ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' ';\n        }\n    }\n    if (index > 0) {\n        out[index - 1] = '\\x00';\n    } else {\n        out[0] = '\\x00';\n    }\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  static char out[100000];\n  char *nums[10] = {\"zero\", \"one\", \"two\",   \"three\", \"four\",\n                    \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  int count[10] = {0};\n  int i, j, k, l, m;\n  char c;\n  char temp[7];\n\n  while (*s) {\n    for (i = 0; *s && *s != ' '; i++, s++)\n      temp[i] = *s;\n    temp[i] = '\\0';\n    for (i = 0; i < 10; i++)\n      if (!strcmp(temp, nums[i])) {\n        count[i]++;\n        break;\n      }\n    s++;\n  }\n\n  for (i = 0, k = 0; i < 10; i++)\n    for (j = 0; j < count[i]; j++) {\n      for (l = 0; (c = nums[i][l]); l++)\n        out[k++] = c;\n      out[k++] = ' ';\n    }\n  if (k > 0)\n    out[--k] = '\\0';\n  return out;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_19.c"}
{"compilable":1,"function":"char *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\x00';\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  int i;\n  static char out[2];\n\n  for (i = strlen(s) - 2; i > 0; i--)\n    if (strchr(\"AEIOUaeiou\", s[i]) && !strchr(\"AEIOUaeiou\", s[i + 1]) &&\n        !strchr(\"AEIOUaeiou\", s[i - 1]))\n      break;\n  out[0] = s[i];\n  out[1] = '\\0';\n  return out;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_118.c"}
{"compilable":1,"function":"char *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(char **argv, int argc) {\n  int i, max = 0;\n  char *p = \"\";\n\n  for (i = 0; i < argc; i++) {\n    int len = strlen(argv[i]);\n    if (len > max) {\n      max = len;\n      p = argv[i];\n    }\n  }\n  return p;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_12.c"}
{"compilable":1,"function":"int func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j, k, l;\n  int cnt = 0;\n  for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n    if (a[i] != a[j])\n      cnt++;\n  }\n  return cnt;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_73.c"}
{"compilable":1,"function":"int *func0(int n) {\n    int *counts = (int *)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n        int number = i;\n        while (number != 0)\n            {\n                reversed = reversed * 10 + number % 10;\n                number /= 10;\n            }\n        if (original == reversed) {\n            if (original % 2 == 0)\n                counts[0]++;\n            else\n                counts[1]++;\n        }\n    }\n    return counts;\n}\n","function_prediction":"int *func0_name_conflict(int n) {\n  int *result = (int *)malloc(sizeof(int) * 2);\n  result[0] = 0;\n  result[1] = 0;\n  for (int i = 1; i <= n; i++) {\n    int j = i;\n    int k = 0;\n    while (j) {\n      k = k * 10 + j % 10;\n      j /= 10;\n    }\n    if (k == i && i % 2) {\n      result[1]++;\n    } else if (k == i) {\n      result[0]++;\n    }\n  }\n  return result;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_107.c"}
{"compilable":1,"function":"char *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output)\n        return ((void *)0);\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\x00';\n    return output;\n}\n","function_prediction":"char *func0_name_conflict(char *a, char *b) {\n  int i, len = strlen(a);\n  char *c;\n\n  if (len > strlen(b))\n    len = strlen(b);\n\n  if (!(c = malloc(len + 1)))\n    return NULL;\n\n  for (i = 0; i < len; i++)\n    c[i] = a[i] == b[i] ? '0' : '1';\n\n  c[i] = '\\0';\n\n  return c;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_11.c"}
{"compilable":1,"function":"char *func0(char *s) {\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISalpha)) {\n            if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))\n                s[i] = tolower((unsigned char)s[i]);\n            else if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISlower))\n                s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  int i, j, k, l;\n  unsigned short *p;\n  unsigned short c;\n\n  l = strlen(s);\n  for (i = 0; i < l; i++) {\n    c = s[i];\n    p = __ctype_b_loc();\n    if ((p[c] & 0x0400) == 0) {\n      j++;\n    } else if ((p[c] & 0x0100) == 0) {\n      if ((p[c] & 0x0200) != 0) {\n        p = __ctype_toupper_loc();\n        s[i] = p[c];\n      }\n    } else {\n      p = __ctype_tolower_loc();\n      s[i] = p[c];\n    }\n  }\n  if (j == l && l > 1) {\n    for (i = 0, j = l - 1; i < j; i++, j--) {\n      k = s[i];\n      s[i] = s[j];\n      s[j] = k;\n    }\n  }\n  return s;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_161.c"}
{"compilable":1,"function":"int func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i)\n            n = n / i;\n    return n;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i;\n  for (i = 2; i * i <= n; i++) {\n    while (n % i == 0 && n > i) {\n      n /= i;\n    }\n  }\n  return n;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_59.c"}
{"compilable":1,"function":"int *func0(int arr[], int length, int output[2]) {\n    int smallestEven = 2147483647;\n    int index = -1;\n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1) {\n        return ((void *)0);\n    }\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}\n","function_prediction":"int *func0_name_conflict(int *nums, int numsSize, int *returnSize) {\n  int i, min = -1, min_index = -1, tmp;\n  for (i = 0; i < numsSize; i++) {\n    if (nums[i] % 2 == 0) {\n      if (min == -1 || nums[i] < min) {\n        min = nums[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min_index == -1) {\n    return NULL;\n  }\n  returnSize[0] = min;\n  returnSize[1] = min_index;\n  return returnSize;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_68.c"}
{"compilable":1,"function":"int func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\x00'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, sum;\n  for (i = 0, sum = 0; s[i] != '\\0'; i++)\n    if (s[i] >= 'A' && s[i] <= 'Z')\n      sum += s[i];\n  return sum;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_66.c"}
{"compilable":1,"function":"char **func0(const char *planet1, const char *planet2, int *returnSize) {\n    const char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0)\n            pos1 = m;\n        if (strcmp(planets[m], planet2) == 0)\n            pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return ((void *)0);\n    }\n    if (pos1 > pos2) {\n        int temp = pos1;\n        pos1 = pos2;\n        pos2 = temp;\n    }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return ((void *)0);\n    }\n    char **out = malloc(*returnSize * sizeof(char *));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char *)planets[m];\n    }\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char *a, char *b, int *c) {\n  char *planets[] = {\"Mercury\", \"Venus\",  \"Earth\",  \"Mars\",\n                     \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  int i, a_index = -1, b_index = -1;\n  char **result;\n\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(planets[i], a))\n      a_index = i;\n    if (!strcmp(planets[i], b))\n      b_index = i;\n  }\n\n  if (a_index == -1 || b_index == -1 || a_index == b_index) {\n    *c = 0;\n    return NULL;\n  }\n\n  if (a_index > b_index) {\n    int tmp = a_index;\n    a_index = b_index;\n    b_index = tmp;\n  }\n\n  *c = b_index - a_index - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return NULL;\n  }\n\n  result = malloc(*c * sizeof(char *));\n  for (i = 0; i < *c; i++)\n    result[i] = planets[a_index + i + 1];\n\n  return result;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_148.c"}
{"compilable":1,"function":"int *func0(int n) {\n    int *out = (int *)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0)\n        return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0)\n            out[i] = 1 + i / 2;\n        else\n            out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int n) {\n  int *a = malloc(sizeof(int) * (n + 1));\n  a[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      a[i] = a[i - 1] + (i + 1) / 2;\n    } else {\n      a[i] = a[i - 1] + a[i - 2] + 1 + (i + 1) / 2;\n    }\n  }\n  return a;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_130.c"}
{"compilable":0,"function":"int func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int *)malloc(operand_size * sizeof(int));\n    int *posto = (int *)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i])\n                posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1])\n                posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i])\n                posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1])\n                posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i])\n                posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1])\n                posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}\n","function_prediction":"int func0_name_conflict(char **s, int *a, int n, int m) {\n  int *b = malloc(m * sizeof(int));\n  int *p = malloc(m * sizeof(int));\n  for (int i = 0; i < m; i++) {\n    b[i] = a[i];\n    p[i] = i;\n  }\n  for (int i = 0; i < n; i++) {\n    if (!strcmp(s[i], \"**\")) {\n      int x = p[i], y = p[i + 1];\n      while (x != p[x])\n        x = p[x];\n      while (y != p[y])\n        y = p[y];\n      b[x] = pow(b[x], b[y]);\n      p[i + 1] = x;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (!strcmp(s[i], \"*\") || !strcmp(s[i], \"//\")) {\n      int x = p[i], y = p[i + 1];\n      while (x != p[x])\n        x = p[x];\n      while (y != p[y])\n        y = p[y];\n      if (!strcmp(s[i], \"*\"))\n        b[x] *= b[y];\n      else\n        b[x] /= b[y];\n      p[i + 1] = x;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (!strcmp(s[i], \"+\") || !strcmp(s[i], \"-\")) {\n      int x = p[i], y = p[i + 1];\n      while (x != p[x])\n        x = p[x];\n      while (y != p[y])\n        y = p[y];\n      if (!strcmp(s[i], \"+\"))\n        b[x] += b[y];\n      else\n        b[x] -= b[y];\n      p[i + 1] = x;\n    }\n  }\n  int","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_160.c"}
{"compilable":1,"function":"int *func0(int *numbers, int size, int *new_size) {\n    int *out = (int *)malloc(size * sizeof(int));\n    int *has1 = (int *)calloc(size, sizeof(int));\n    int *has2 = (int *)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2)\n            continue;\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int *A, int ASize, int *returnSize) {\n  int *result = (int *)malloc(sizeof(int) * ASize);\n  int *temp = (int *)calloc(ASize, sizeof(int));\n  int *temp2 = (int *)calloc(ASize, sizeof(int));\n  int i, j, k = 0, l = 0;\n  for (i = 0; i < ASize; i++) {\n    for (j = 0; j < l; j++) {\n      if (temp2[j] == A[i]) {\n        break;\n      }\n    }\n    if (j == l) {\n      for (j = 0; j < k; j++) {\n        if (temp[j] == A[i]) {\n          temp2[l++] = A[i];\n          break;\n        }\n      }\n      if (j == k) {\n        temp[k++] = A[i];\n      }\n    }\n  }\n  for (i = 0; i < ASize; i++) {\n    for (j = 0; j < l; j++) {\n      if (temp2[j] == A[i]) {\n        break;\n      }\n    }\n    if (j == l) {\n      result[k++] = A[i];\n    }\n  }\n  *returnSize = k;\n  free(temp);\n  free(temp2);\n  return result;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_26.c"}
{"compilable":1,"function":"int *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n    *out_size = out_count;\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int *a, int n, int *m) {\n  int i, j, k, t;\n  int *b = (int *)malloc(n * sizeof(int));\n  for (i = 0, k = 0; i < n; i++) {\n    for (j = 0; j < k; j++) {\n      if (a[i] == b[j])\n        break;\n    }\n    if (j == k)\n      b[k++] = a[i];\n  }\n  for (i = 0; i < k; i++) {\n    for (j = i + 1; j < k; j++) {\n      if (b[i] > b[j]) {\n        t = b[i];\n        b[i] = b[j];\n        b[j] = t;\n      }\n    }\n  }\n  *m = k;\n  return b;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_34.c"}
{"compilable":1,"function":"int *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int n, int *m) {\n  int i, j, k;\n  int *p;\n\n  p = (int *)malloc(n * sizeof(int));\n  *m = 0;\n  for (i = 2; i < n; i++) {\n    for (j = 0; j < *m; j++) {\n      k = p[j];\n      if (k * k > i)\n        break;\n      if (i % k == 0)\n        goto next;\n    }\n    p[*m] = i;\n    (*m)++;\n  next:;\n  }\n  return p;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_96.c"}
{"compilable":1,"function":"int func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0)\n            out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}\n","function_prediction":"int func0_name_conflict(int **a, int m, int n, int p) {\n  int i, j, sum, res = 0;\n\n  for (i = 0; i < m; i++) {\n    sum = 0;\n    for (j = 0; j < n; j++)\n      sum += a[i][j];\n    if (sum > 0)\n      res += (sum + p - 1) / p;\n  }\n\n  return res;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_115.c"}
{"compilable":1,"function":"bool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(')\n            level += 1;\n        if (brackets[i] == ')')\n            level -= 1;\n        if (level < 0)\n            return 0;\n    }\n    return level == 0;\n}\n","function_prediction":"bool func0_name_conflict(char *s) {\n  int i, cnt = 0;\n  for (i = 0; i < strlen(s); i++) {\n    if (s[i] == '(')\n      cnt++;\n    else if (s[i] == ')')\n      cnt--;\n    if (cnt < 0)\n      return false;\n  }\n  return cnt == 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_61.c"}
{"compilable":1,"function":"bool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t)\n            return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n, int m) {\n  int i;\n  for (i = 0; i < n; i++)\n    if (a[i] >= m)\n      return 0;\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_52.c"}
{"compilable":1,"function":"int func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i;\n  int a[500];\n  for (i = 0; i < 500; i++)\n    a[i] = 0;\n  a[0] = 1;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + a[i];\n  return a[n - 1];\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_55.c"}
{"compilable":0,"function":"int func0(char *dict[][2], int size) {\n    if (size == 0)\n        return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char *key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!((*__ctype_b_loc())[(int)(((unsigned char)key[j]))] & (unsigned short)_ISalpha))\n                return 0;\n            if (((*__ctype_b_loc())[(int)(((unsigned char)key[j]))] & (unsigned short)_ISupper))\n                has_upper = 1;\n            if (((*__ctype_b_loc())[(int)(((unsigned char)key[j]))] & (unsigned short)_ISlower))\n                has_lower = 1;\n            if (has_upper + has_lower == 2)\n                return 0;\n        }\n    }\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char **argv, int argc) {\n  int i, j, k, l;\n  char *p;\n  const unsigned short *cp;\n  const unsigned short *ct;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    while (*p) {\n      j = (unsigned char)*p;\n      ct = __ctype_b_loc();\n      cp = ct[j];\n      k = 0;\n      l = 0;\n      if (cp[0] & 01000)\n        k = 1;\n      if (cp[0] & 02000)\n        l = 1;\n      if (k + l == 2)\n        return 0;\n      p++;\n    }\n  }\n\n  return 1;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_95.c"}
{"compilable":1,"function":"int func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0)\n        {\n            digit = n % 10;\n            if (digit % 2 == 1) {\n                has_odd = 1;\n                prod *= digit;\n            }\n            n /= 10;\n        }\n    return has_odd ? prod : 0;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int m = 1;\n  int flag = 0;\n  while (n > 0) {\n    if (n % 10 % 2 == 1) {\n      m *= n % 10;\n      flag = 1;\n    }\n    n /= 10;\n  }\n  if (flag == 0)\n    return 0;\n  else\n    return m;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_131.c"}
{"compilable":1,"function":"char *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return ((void *)0);\n    }\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\x00';\n            return result;\n        }\n    }\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\x00';\n    return result;\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  int i, j, k, len;\n  char *p;\n\n  len = strlen(s);\n  p = (char *)malloc(2 * len + 1);\n  if (p == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++) {\n    for (j = i, k = len - 1; j < len && s[j] == s[k]; j++, k--) {\n      if (j - i > (len - i) / 2)\n        break;\n    }\n    if (j - i > (len - i) / 2) {\n      strncpy(p, s, i);\n      for (j = i; k > 0; k--, j++)\n        p[j] = s[k];\n      p[j] = '\\0';\n      return p;\n    }\n  }\n  strncpy(p, s, len);\n  for (j = len; k > 0; k--, j++)\n    p[j] = s[k];\n  p[j] = '\\0';\n  return p;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_10.c"}
{"compilable":1,"function":"bool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0)\n                return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0)\n        return 1;\n    }\n  }\n  return 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_43.c"}
{"compilable":0,"function":"int *func0(const char *music_string, int *count) {\n    int *out = ((void *)0);\n    int size = 0;\n    int capacity = 0;\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof (current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\x00';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(char *str, int *size) {\n  int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  char *str1, *str2, *str3, *str4, *str5, *str6, *str7, *str8, *str9, *str10,\n      *str11, *str12, *str13, *str14, *str15, *str16, *str17, *str18, *str19,\n      *str20, *str21, *str22, *str23, *str24, *str25, *str26, *str27, *str28,\n      *str29, *str30, *str31, *str32, *str33, *str34, *str35, *str36, *str37,\n      *str38, *str39, *str40, *str41, *str42, *str43, *str44, *str45, *str46,\n      *str47, *str48, *str49, *str50, *str51, *str52, *str53, *str54, *str55,\n      *str56, *str57, *str58, *str59, *str60, *str61, *str62, *str63, *str64,\n      *str65, *str66, *str67, *str68, *str69, *str70, *str71, *str72, *str73,\n      *str74, *str75, *str76, *str77, *str78, *str79, *str80, *str81, *str82,\n      *str83, *str84, *str85, *str86, *str87, *str88, *str89, *str90, *str91,\n      *str92, *str93","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_17.c"}
{"compilable":1,"function":"char *func0(const char *s) {\n    int len = strlen(s);\n    char *out = malloc(len + 2);\n    char current[51];\n    int out_index = 0, current_index = 0;\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\x00') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0)\n                out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n    out[out_index] = '\\x00';\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  int i, j, k, l;\n  char *p, *q;\n  char t[64];\n\n  l = strlen(s);\n  p = (char *)malloc(l + 2);\n  q = p;\n  for (i = j = k = 0; i <= l; i++) {\n    if (s[i] == ' ' || s[i] == '\\t' || s[i] == '\\0') {\n      if (j > 1) {\n        for (k = 0; k < j - 1; k++)\n          for (l = k + 1; l < j; l++)\n            if (t[k] > t[l]) {\n              t[k] ^= t[l];\n              t[l] ^= t[k];\n              t[k] ^= t[l];\n            }\n        if (i > 0)\n          *p++ = ' ';\n        for (k = 0; k < j; k++)\n          *p++ = t[k];\n        j = 0;\n      } else if (i > 0) {\n        for (k = 0; k < j; k++)\n          *p++ = t[k];\n        j = 0;\n      }\n    } else\n      t[j++] = s[i];\n  }\n  *p = '\\0';\n  return q;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_86.c"}
{"compilable":0,"function":"const char *func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    if (l < 2)\n        return \"NO\";\n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0)\n            return \"NO\";\n    return \"YES\";\n}\n","function_prediction":"char *func0_name_conflict(int a, int b, int c, int d) {\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int A;\n  int B;\n  int C;\n  int D;\n  int E;\n  int F;\n  int G;\n  int H;\n  int I;\n  int J;\n  int K;\n  int L;\n  int M;\n  int N;\n  int O;\n  int P;\n  int Q;\n  int R;\n  int S;\n  int T;\n  int U;\n  int V;\n  int W;\n  int X;\n  int Y;\n  int Z;\n  int aa;\n  int bb;\n  int cc;\n  int dd;\n  int ee;\n  int ff;\n  int gg;\n  int hh;\n  int ii;\n  int jj;\n  int kk;\n  int ll;\n  int mm;\n  int nn;\n  int oo;\n  int pp;\n  int qq;\n  int rr;\n  int ss;\n  int tt;\n  int uu;\n  int vv;\n  int ww;\n  int xx;\n  int yy;\n  int zz;\n  int aaa;\n  int bbb;\n  int ccc;\n  int ddd;\n  int eee;\n  int fff;\n  int ggg;\n  int hhh;\n  int iii;\n  int jjj;\n  int kkk;\n  int lll;\n  int mmm;\n  int nnn;\n  int ooo;\n  int ppp;\n  int qqq;\n  int","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_127.c"}
{"compilable":1,"function":"char **func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char **A, int ASize, int *returnSize) {\n  *returnSize = 0;\n  for (int i = 0; i < ASize; i++) {\n    if (strlen(A[i]) % 2 == 0) {\n      A[*returnSize] = A[i];\n      (*returnSize)++;\n    }\n  }\n\n  for (int i = 0; i < *returnSize - 1; i++) {\n    for (int j = 0; j < *returnSize - i - 1; j++) {\n      if (strlen(A[j]) > strlen(A[j + 1]) ||\n          (strlen(A[j]) == strlen(A[j + 1]) && strcmp(A[j], A[j + 1]) > 0)) {\n        char *temp = A[j];\n        A[j] = A[j + 1];\n        A[j + 1] = temp;\n      }\n    }\n  }\n\n  char **result = (char **)malloc(*returnSize * sizeof(char *));\n  for (int i = 0; i < *returnSize; i++) {\n    result[i] = A[i];\n  }\n  return result;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_149.c"}
{"compilable":1,"function":"int func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\x00'; i++) {\n        if (((*__ctype_b_loc())[(int)((S[i]))] & (unsigned short)_ISspace) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!((*__ctype_b_loc())[(int)((S[i]))] & (unsigned short)_ISspace)) {\n            isi = 0;\n        }\n        if (!((*__ctype_b_loc())[(int)((S[i]))] & (unsigned short)_ISspace)) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int count = 0;\n  int in_word = 0;\n  int in_I = 0;\n  const unsigned short *ct = __ctype_b_loc();\n  for (; *s; s++) {\n    if (ct[(unsigned char)*s] & 0x2000) {\n      if (in_word) {\n        count++;\n        if (*s == 'I' && in_I)\n          in_I = 1;\n        else\n          in_I = 0;\n      }\n      in_word = 1;\n    } else {\n      if (in_I && *s == 'I')\n        in_I = 1;\n      else\n        in_I = 0;\n      in_word = 0;\n    }\n  }\n  return count;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_91.c"}
{"compilable":1,"function":"int func0(int x, int y) {\n    return x + y;\n}\n","function_prediction":"int func0_name_conflict(int a, int b) { return a + b; }","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_53.c"}
{"compilable":0,"function":"int **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}\n","function_prediction":"struct pair **func0_name_conflict(int **a, int n, int *b, int c, int *m) {\n  struct pair **p = malloc(100 * sizeof(struct pair *));\n  int i, j, k = 0;\n  for (i = 0; i < n; i++)\n    for (j = b[i] - 1; j >= 0; j--)\n      if (a[i][j] == c) {\n        p[k] = malloc(sizeof(struct pair));\n        p[k]->i = i;\n        p[k]->j = j;\n        k++;\n      }\n  *m = k;\n  return p;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_87.c"}
{"compilable":1,"function":"char **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\x00'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100);\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char **str, int n) {\n  char **result = (char **)malloc(n * sizeof(char *));\n  for (int i = 0; i < n; i++) {\n    int count = 0;\n    char *p = str[i];\n    while (*p != '\\0') {\n      if (*p >= '0' && *p <= '9') {\n        if ((*p - '0') % 2 == 1)\n          count++;\n      }\n      p++;\n    }\n    result[i] = (char *)malloc(100);\n    sprintf(result[i],\n            \"the number of odd elements %d in the string %d of the %d input.\",\n            count, count, count);\n  }\n  return result;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_113.c"}
{"compilable":1,"function":"char *func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\x00';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n    return xs;\n}\n","function_prediction":"char *func0_name_conflict(int x, int n) {\n  static char xs[64];\n  int i, j, k;\n\n  sprintf(xs, \"%d\", x);\n  k = strlen(xs);\n  if (k >= n) {\n    char ys[64];\n    strcpy(ys, xs + k - n);\n    ys[n] = '\\0';\n    strncat(ys, xs, k - n);\n    strcpy(xs, ys);\n  } else {\n    for (i = 0, j = k - 1; i < k / 2; i++, j--) {\n      char t = xs[i];\n      xs[i] = xs[j];\n      xs[j] = t;\n    }\n  }\n  return xs;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_65.c"}
{"compilable":1,"function":"int func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1])\n            max = i;\n    }\n    return max;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i;\n  int max = -1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i - 1])\n      max = i;\n  return max;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_135.c"}
{"compilable":1,"function":"char *func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\x00'; i++)\n        sum += str[i] - '0';\n    char *bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0)\n            {\n                bi[index++] = (sum % 2) + '0';\n                sum /= 2;\n            }\n    }\n    bi[index] = '\\x00';\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n    return bi;\n}\n","function_prediction":"char *func0_name_conflict(int n) {\n  char str[5];\n  sprintf(str, \"%d\", n);\n  int sum = 0;\n  int i = 0;\n  while (str[i] != '\\0') {\n    sum += str[i] - '0';\n    i++;\n  }\n  char *res = (char *)malloc(sizeof(char) * 33);\n  if (sum == 0) {\n    res[0] = '0';\n    res[1] = '\\0';\n    return res;\n  }\n  int j = 0;\n  while (sum != 0) {\n    res[j++] = sum % 2 + '0';\n    sum /= 2;\n  }\n  res[j] = '\\0';\n  int len = j;\n  for (i = 0; i < len / 2; i++) {\n    char temp = res[i];\n    res[i] = res[len - i - 1];\n    res[len - i - 1] = temp;\n  }\n  return res;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_84.c"}
{"compilable":0,"function":"char **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = ((void *)0);\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n    for (int i = 0; i <= length; i++) {\n        if (((*__ctype_b_loc())[(int)((s[i]))] & (unsigned short)_ISspace) || s[i] == '\\x00') {\n            if (numc == n) {\n                current[i - begin] = '\\x00';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == ((void *)0) && ((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISalpha)) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n    *returnSize = word_count;\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char *str, int n, int *size) {\n  int i, j, k, len, count, vowel;\n  char **result;\n  char *temp;\n  const char *vowels = \"aeiouAEIOU\";\n  const struct _ctype_t *ctype = __ctype_b_loc();\n\n  len = strlen(str);\n  temp = (char *)malloc(len + 1);\n  count = 0;\n  vowel = 0;\n  result = NULL;\n  j = 0;\n  for (i = 0; i < len; i++) {\n    if (ctype->_table[(unsigned char)str[i]] & 0x20 || str[i] == '\\0') {\n      if (vowel == n) {\n        temp[i - j] = '\\0';\n        count++;\n        result = (char **)realloc(result, count * sizeof(char *));\n        result[count - 1] = (char *)malloc(strlen(temp) + 1);\n        strcpy(result[count - 1], temp);\n      }\n      j = i + 1;\n      vowel = 0;\n    } else {\n      temp[i - j] = str[i];\n      if (strchr(vowels, str[i]) == NULL) {\n        if (ctype->_table[(unsigned char)str[i]] & 0x400)\n          vowel++;\n      }\n    }\n  }\n  free(temp);\n  *size = count;\n  return result;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_117.c"}
{"compilable":1,"function":"int func0(int n) {\n    if (n < 1)\n        return 0;\n    if (n == 1)\n        return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i, r = 0;\n\n  if (n <= 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n <= 2)\n    return 18;\n\n  r = 18;\n  for (i = 2; i < n; i++)\n    r *= 10;\n\n  return r;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_83.c"}
{"compilable":1,"function":"int func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n)\n        {\n            f1 = f1 + f2;\n            m = f1;\n            f1 = f2;\n            f2 = m;\n            int isprime = 1;\n            for (int w = 2; w * w <= f1; w++) {\n                if (f1 % w == 0) {\n                    isprime = 0;\n                    break;\n                }\n            }\n            if (isprime)\n                count += 1;\n            if (count == n)\n                return f1;\n        }\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i, j, k, l;\n  int a, b, c;\n\n  a = 1;\n  b = 2;\n  for (i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    if (c > 3) {\n      for (j = 2; j * j <= c; j++) {\n        if (c % j == 0)\n          break;\n      }\n      if (j * j > c)\n        return c;\n    }\n  }\n  return 0;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_39.c"}
{"compilable":1,"function":"int *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start)\n        {\n            while (*start && !((*__ctype_b_loc())[(int)((*start))] & (unsigned short)_ISdigit) && *start != '-')\n                {\n                    start++;\n                }\n            if (!*start) {\n                break;\n            }\n            int val = (int)strtol(start, &end, 10);\n            if (start != end && (*end == ',' || *end == '\\x00')) {\n                out[count++] = val;\n            } else {\n                while (*end && *end != ',')\n                    {\n                        end++;\n                    }\n            }\n            start = end;\n        }\n    *size = count;\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(char *s, int *n) {\n  static int out[100];\n  int i = 0;\n  if (*s)\n    while (*s) {\n      char *p;\n      long l = strtol(s, &p, 10);\n      if (p == s && *p)\n        while (*p && *p != ',')\n          p++;\n      else if (*p != ',' && *p)\n        while (*p && *p != ',')\n          p++;\n      if (*p)\n        s = p + 1;\n      else\n        break;\n      out[i++] = l;\n    }\n  *n = i;\n  return out;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_22.c"}
{"compilable":0,"function":"int func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int *a = malloc(sizeof(int) * (n + 1));\n  int **b = malloc(sizeof(int *) * (n + 1));\n  int **c = malloc(sizeof(int *) * (n + 1));\n  for (int i = 0; i < n + 1; i++) {\n    b[i] = calloc(3, sizeof(int));\n    c[i] = calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (int i = 1; i < n + 1; i++) {\n    a[i - 1] = (i * i - i + 1) % 3;\n    for (int j = 0; j < 3; j++)\n      c[i][j] = b[i - 1][j];\n    c[i][a[i - 1]]++;\n  }\n  for (int k = 2; k > 0; k--) {\n    for (int i = 1; i < n + 1; i++) {\n      for (int j = 0; j < 3; j++)\n        c[i][j] = b[i - 1][j];\n      for (int j = 0; j < i; j++)\n        c[i][(a[j] + a[i - j - 1]) % 3] += b[j][0];\n    }\n    for (int i = 0; i < n + 1; i++) {\n      for (int j = 0; j < 3; j++) {\n        b[i][j] = c[i][j];\n        c[i][j] = 0;\n      }\n    }\n  }\n  int ans = b[n][0];\n  for (int i = 0; i < n + 1; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_147.c"}
{"compilable":1,"function":"int func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] >= 100 && a[i] < 200)\n      sum += a[i];\n  return sum;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_122.c"}
{"compilable":1,"function":"int func0(int n) {\n    return n * (n + 1) / 2;\n}\n","function_prediction":"int func0_name_conflict(int n) { return n * (n + 1) / 2; }","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_60.c"}
{"compilable":1,"function":"int func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i;\n  int a[50];\n  for (i = 0; i < 50; i++)\n    a[i] = 0;\n  a[0] = 1;\n  for (i = 2; i <= n; i++)\n    a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n  return a[n - 1];\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_63.c"}
{"compilable":1,"function":"int func0(int n) {\n    return n * n;\n}\n","function_prediction":"int func0_name_conflict(int x) { return x * x; }","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_41.c"}
{"compilable":1,"function":"char *func0(int n) {\n    int len = 2;\n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(((void *)0), 0, \" %d\", i);\n    }\n    char *out = malloc(len);\n    if (!out) {\n        return ((void *)0);\n    }\n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(int n) {\n  int i, len = 1;\n  char *buf, *p;\n\n  for (i = 1; i <= n; i++)\n    len += snprintf(NULL, 0, \" %d\", i);\n\n  buf = malloc(len);\n  if (!buf)\n    return NULL;\n\n  *buf = '0';\n  p = buf + 1;\n\n  for (i = 1; i <= n; i++)\n    p += sprintf(p, \" %d\", i);\n\n  return buf;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_15.c"}
{"compilable":1,"function":"bool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i])\n        {\n            if (brackets[i] == '<')\n                level++;\n            if (brackets[i] == '>')\n                level--;\n            if (level < 0)\n                return 0;\n            i++;\n        }\n    if (level != 0)\n        return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i = 0;\n  while (*s) {\n    if (*s == '<')\n      i++;\n    else if (*s == '>')\n      i--;\n    if (i < 0)\n      return 0;\n    s++;\n  }\n  return i == 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_56.c"}
{"compilable":1,"function":"const char *func0(const char *file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5)\n        return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z')\n        return \"No\";\n    const char *last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0)\n        return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n            num_digit++;\n        if (file_name[i] == '.')\n            num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1)\n        return \"No\";\n    return \"Yes\";\n}\n","function_prediction":"char *func0_name_conflict(char *s) {\n  int i, len, num, dot;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"\";\n  if (s[0] != 'A' && s[0] != 'B' && s[0] != 'C' && s[0] != 'D')\n    return \"\";\n  if (!strcmp(s + len - 4, \".txt\") || !strcmp(s + len - 4, \".exe\") ||\n      !strcmp(s + len - 4, \".dll\"))\n    return \"\";\n  for (i = 0, num = 0, dot = 0; i < len; i++)\n    if (s[i] >= '0' && s[i] <= '9')\n      num++;\n    else if (s[i] == '.')\n      dot++;\n  if (num < 4 || dot != 1)\n    return \"\";\n  return \"OK\";\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_141.c"}
{"compilable":1,"function":"int func0(int *arr, int arr_size) {\n    if (arr_size == 0)\n        return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0)\n            prods = 0;\n        if (arr[i] < 0)\n            prods = -prods;\n    }\n    return sum * prods;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, s, p;\n\n  if (n == 0)\n    return -32768;\n\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0)\n      s += a[i];\n    else\n      s += -a[i];\n\n    if (a[i] == 0)\n      p = 0;\n    else if (a[i] < 0)\n      p = -p;\n  }\n\n  return s * p;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_128.c"}
{"compilable":1,"function":"int func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n    while (largest > 0)\n        {\n            sum += largest % 10;\n            largest /= 10;\n        }\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j, max = 0, sum = 0;\n\n  for (i = 0; i < n; i++) {\n    if (a[i] > 1) {\n      for (j = 2; j < a[i]; j++) {\n        if (a[i] % j == 0)\n          break;\n      }\n      if (j * j > a[i]) {\n        if (a[i] > max)\n          max = a[i];\n      }\n    }\n  }\n\n  while (max > 0) {\n    sum += max % 10;\n    max /= 10;\n  }\n\n  return sum;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_94.c"}
{"compilable":0,"function":"int func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a))\n            return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int x) {\n  int y;\n  int z;\n  int w;\n  int v;\n  int u;\n  int t;\n  int s;\n  int r;\n  int q;\n  int p;\n  int o;\n  int n;\n  int m;\n  int l;\n  int k;\n  int j;\n  int i;\n  int h;\n  int g;\n  int f;\n  int e;\n  int d;\n  int c;\n  int b;\n  int a;\n  int z1;\n  int z2;\n  int z3;\n  int z4;\n  int z5;\n  int z6;\n  int z7;\n  int z8;\n  int z9;\n  int z10;\n  int z11;\n  int z12;\n  int z13;\n  int z14;\n  int z15;\n  int z16;\n  int z17;\n  int z18;\n  int z19;\n  int z20;\n  int z21;\n  int z22;\n  int z23;\n  int z24;\n  int z25;\n  int z26;\n  int z27;\n  int z28;\n  int z29;\n  int z30;\n  int z31;\n  int z32;\n  int z33;\n  int z34;\n  int z35;\n  int z36;\n  int z37;\n  int z38;\n  int z39;\n  int z40;\n  int z41;\n  int z42;\n  int z43;\n  int z44;\n  int z45;\n  int z46;\n  int z47;\n  int z48;\n  int z49;\n  int z50;\n  int z51;\n  int z52;\n  int z53;\n  int z54;\n  int z55;\n","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_77.c"}
{"compilable":1,"function":"int func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\x00' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != ((void *)0)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, cnt = 0;\n  for (i = 0; s[i]; i++)\n    if (i == strlen(s) / 2)\n      break;\n    else if (strchr(\"AEIOU\", s[i * 2]))\n      cnt++;\n  return cnt;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_98.c"}
{"compilable":1,"function":"bool func0(const int *lst, int lst_size) {\n    if (lst_size == 0)\n        return 1;\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1])\n            return 0;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2])\n            return 0;\n    }\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i;\n  int ret = 1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i - 1]) {\n      ret = 0;\n      break;\n    }\n    if (a[i] == a[i - 1] && i > 1 && a[i] == a[i - 2]) {\n      ret = 0;\n      break;\n    }\n  }\n  return ret;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_126.c"}
{"compilable":1,"function":"int func0(const char *x, const char *n) {\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\x00';\n    a = atoi(num);\n    for (j = 0 , i = i + 1; x[i] != '\\x00'; i++ , j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\x00';\n    b = atoi(den);\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\x00';\n    c = atoi(num);\n    for (j = 0 , i = i + 1; n[i] != '\\x00'; i++ , j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\x00';\n    d = atoi(den);\n    if ((a * c) % (b * d) == 0)\n        return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(char *s1, char *s2) {\n  char buf1[100], buf2[100];\n  int i, j, k, l, m, n, o, p;\n\n  for (i = 0; s1[i] != '/'; i++)\n    buf2[i] = s1[i];\n  buf2[i++] = '\\0';\n  m = strtol(buf2 + 1, NULL, 10);\n  for (j = 0, k = i; s1[k] != '\\0'; j++, k++)\n    buf1[j] = s1[k];\n  buf1[j] = '\\0';\n  n = strtol(buf1, NULL, 10);\n\n  for (i = 0; s2[i] != '/'; i++)\n    buf2[i] = s2[i];\n  buf2[i++] = '\\0';\n  o = strtol(buf2 + 1, NULL, 10);\n  for (j = 0, k = i; s2[k] != '\\0'; j++, k++)\n    buf1[j] = s2[k];\n  buf1[j] = '\\0';\n  p = strtol(buf1, NULL, 10);\n\n  return (m * o) % (n * p) == 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_144.c"}
{"compilable":1,"function":"int func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0)\n                {\n                    if (q % 10 == 7)\n                        count += 1;\n                    q = q / 10;\n                }\n        }\n    return count;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i, j, k, cnt = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      j = i;\n      while (j > 0) {\n        k = j % 10;\n        if (k == 7)\n          cnt++;\n        j /= 10;\n      }\n    }\n  }\n  return cnt;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_36.c"}
{"compilable":1,"function":"bool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = 0;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = 0;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found)\n            return 0;\n    }\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *s1, char *s2) {\n  int i, j, len1, len2;\n  len1 = strlen(s1);\n  len2 = strlen(s2);\n  for (i = 0; i < len1; i++) {\n    for (j = 0; j < len2; j++) {\n      if (s1[i] == s2[j])\n        break;\n    }\n    if (j == len2)\n      return 0;\n  }\n  for (j = 0; j < len2; j++) {\n    for (i = 0; i < len1; i++) {\n      if (s2[j] == s1[i])\n        break;\n    }\n    if (i == len1)\n      return 0;\n  }\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_54.c"}
{"compilable":1,"function":"int func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10)\n                {\n                    sum += w % 10;\n                    w = w / 10;\n                }\n            sum -= w;\n            if (sum > 0)\n                num += 1;\n        }\n    }\n    return num;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count;\n\n  count = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      count++;\n    } else {\n      j = a[i];\n      if (j < 0) {\n        j = -j;\n      }\n      k = 0;\n      while (j > 9) {\n        k += j % 10;\n        j /= 10;\n      }\n      if (j > k) {\n        count++;\n      }\n    }\n  }\n  return count;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_108.c"}
{"compilable":1,"function":"int func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[')\n            count += 1;\n        if (str[i] == ']')\n            count -= 1;\n        if (count < 0)\n            count = 0;\n        if (count > maxcount)\n            maxcount = count;\n        if (count <= maxcount - 2)\n            return 1;\n    }\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int max = 0, cur = 0;\n  char *end = s + strlen(s);\n  while (s != end) {\n    if (*s == '[')\n      cur++;\n    else if (*s == ']')\n      cur--;\n    if (cur < 0)\n      cur = 0;\n    if (cur > max)\n      max = cur;\n    if (max > cur - 1)\n      return 1;\n    s++;\n  }\n  return 0;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_132.c"}
{"compilable":1,"function":"bool func0(long long n) {\n    if (n < 2)\n        return 0;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(unsigned long n) {\n  unsigned long i;\n\n  if (n <= 1)\n    return 0;\n  if (n <= 3)\n    return 1;\n  if (n % 2 == 0)\n    return 0;\n\n  for (i = 2; i * i < n; i++)\n    if (n % i == 0)\n      return 1;\n\n  return 0;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_31.c"}
{"compilable":0,"function":"int *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min)\n        min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min)\n        min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min)\n        min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min)\n        min = grid[x][y + 1];\n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0)\n            out[i] = 1;\n        else\n            out[i] = min;\n    return out;\n}\n","function_prediction":"void func0_name_conflict(int **a, int n, int m, int *b, int x, int y) {\n  int i, j;\n  int min = n * n;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (a[i][j] == 1) {\n        x = j;\n        y = i;\n      }\n    }\n  }\n  if (y > 0 && a[y - 1][x] < min) {\n    min = a[y - 1][x];\n  }\n  if (y < n - 1 && a[y + 1][x] < min) {\n    min = a[y + 1][x];\n  }\n  if (x > 0 && a[y][x - 1] < min) {\n    min = a[y][x - 1];\n  }\n  if (x < n - 1 && a[y][x + 1] < min) {\n    min = a[y][x + 1];\n  }\n  *b = m;\n  int *c = (int *)malloc(m * sizeof(int));\n  for (i = 0; i < m; i++) {\n    c[i] = i % 2 == 0 ? 1 : min;\n  }\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_129.c"}
{"compilable":1,"function":"char **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = ((void *)0);\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != ((void *)0)) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char **argv, int argc, char *substr, int *n) {\n  char **ret = NULL;\n  int i, j = 0;\n\n  for (i = 0; i < argc; i++) {\n    if (strstr(argv[i], substr)) {\n      ret = realloc(ret, ++j * sizeof(char *));\n      ret[j - 1] = argv[i];\n    }\n  }\n\n  *n = j;\n  return ret;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_7.c"}
{"compilable":1,"function":"int func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10)\n                {\n                    n /= 10;\n                }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int count = 0;\n  for (i = 0; i < n; i++) {\n    j = a[i];\n    k = j;\n    while (k > 10) {\n      k = k / 10;\n    }\n    if (k % 2 == 1) {\n      if (j % 10 % 2 == 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_146.c"}
{"compilable":1,"function":"int func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i;\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i <= n; i++)\n    a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n  return a[n];\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_46.c"}
{"compilable":1,"function":"char **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    char *current = malloc(len + 1);\n    current[0] = '\\x00';\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\x00';\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    *count = len;\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char *str, int *size) {\n  int len = strlen(str);\n  char **res = (char **)malloc(len * sizeof(char *));\n  char *tmp = (char *)malloc((len + 1) * sizeof(char));\n  tmp[0] = '\\0';\n  for (int i = 0; i < len; i++) {\n    tmp = (char *)realloc(tmp, strlen(tmp) + 2);\n    tmp[strlen(tmp)] = str[i];\n    tmp[strlen(tmp) + 1] = '\\0';\n    res[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n    strcpy(res[i], tmp);\n  }\n  free(tmp);\n  *size = len;\n  return res;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_14.c"}
{"compilable":1,"function":"int func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  double d = strtod(s, 0);\n  if (d < 0)\n    return (int)floor(d - 0.5);\n  else\n    return (int)floor(d + 0.5);\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_99.c"}
{"compilable":1,"function":"int func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n    free(freq);\n    return max;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int *b = calloc(n + 1, sizeof(int));\n  int i, max = -1, max2 = -1;\n\n  for (i = 0; i < n; i++) {\n    b[a[i]]++;\n    if (a[i] > max)\n      max = a[i];\n    if (b[a[i]] > max2)\n      max2 = b[a[i]];\n  }\n  free(b);\n  return max2;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_69.c"}
{"compilable":1,"function":"char **func0(const char *s, int *count) {\n    int capacity = 10;\n    char **out = malloc(capacity * sizeof(char *));\n    char *current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\x00';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char *));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n    if (current_length > 0) {\n        current[current_length] = '\\x00';\n        out[word_count++] = strdup(current);\n    }\n    free(current);\n    *count = word_count;\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char *str, int *n) {\n  char **ret = malloc(10 * sizeof(char *));\n  char *tmp = malloc(strlen(str) + 1);\n  int i = 0, j = 0, k = 0, len = 10;\n  while (str[i] != '\\0') {\n    if (str[i] == ' ' || str[i] == ',') {\n      if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n        j = 0;\n        if (k >= len) {\n          len *= 2;\n          ret = realloc(ret, len * sizeof(char *));\n        }\n      }\n    } else {\n      tmp[j++] = str[i];\n    }\n    i++;\n  }\n  if (j > 0) {\n    tmp[j] = '\\0';\n    ret[k++] = strdup(tmp);\n  }\n  free(tmp);\n  *n = k;\n  return ret;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_101.c"}
{"compilable":0,"function":"int func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0)\n        return 0;\n    char last_char = txt[len - 1];\n    if (!((*__ctype_b_loc())[(int)(((unsigned char)last_char))] & (unsigned short)_ISalpha))\n        return 0;\n    if (len == 1)\n        return 1;\n    char second_last_char = txt[len - 2];\n    if (((*__ctype_b_loc())[(int)(((unsigned char)second_last_char))] & (unsigned short)_ISalpha))\n        return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(const char *str) {\n  int len = strlen(str);\n  if (len == 0)\n    return 0;\n  if (!(__ctype_b_loc()[((unsigned char)(str[len - 1]))] & (0x04)))\n    return 0;\n  if (len == 1)\n    return 1;\n  return (__ctype_b_loc()[((unsigned char)(str[len - 2]))] & (0x0400)) ? 0 : 1;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_134.c"}
{"compilable":0,"function":"int *func0(int n) {\n    int *out = (int *)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0)\n            out[i - 1] = prod;\n        else\n            out[i - 1] = sum;\n    }\n    return out;\n}\n","function_prediction":"void func0_name_conflict(int n) {\n  int i;\n  int sum = 0;\n  int prod = 1;\n  int *a = malloc(n * sizeof(int));\n\n  for (i = 1; i <= n; i++) {\n    sum += i;\n    prod *= i;\n    a[i - 1] = (i % 2 == 0) ? prod : sum;\n  }\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_106.c"}
{"compilable":1,"function":"int func0(const char *date) {\n    int mm, dd, yy;\n    if (strlen(date) != 10)\n        return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-')\n                return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9')\n                return 0;\n        }\n    }\n    char str_month[3] = {date[0], date[1], '\\x00'};\n    char str_day[3] = {date[3], date[4], '\\x00'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\x00'};\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n    if (mm < 1 || mm > 12)\n        return 0;\n    if (dd < 1 || dd > 31)\n        return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31)\n        return 0;\n    if (mm == 2 && dd > 29)\n        return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *str) {\n  if (strlen(str) != 10)\n    return 0;\n\n  for (int i = 0; i < 10; i++) {\n    if ((i == 2 || i == 5) && str[i] != '-')\n      return 0;\n    else if (str[i] < '0' || str[i] > '9')\n      return 0;\n  }\n\n  char year[3];\n  char month[3];\n  char day[5];\n\n  year[0] = str[0];\n  year[1] = str[1];\n  year[2] = '\\0';\n\n  month[0] = str[3];\n  month[1] = str[4];\n  month[2] = '\\0';\n\n  day[0] = str[6];\n  day[1] = str[7];\n  day[2] = str[8];\n  day[3] = str[9];\n  day[4] = '\\0';\n\n  int y = strtol(year, NULL, 10);\n  int m = strtol(month, NULL, 10);\n  int d = strtol(day, NULL, 10);\n\n  if (y < 1 || y > 12)\n    return 0;\n  if (m < 1 || m > 31)\n    return 0;\n  if (y == 2 && m > 29)\n    return 0;\n  if (((y == 4 || y == 6 || y == 9 || y == 11) && m > 30))\n    return 0;\n\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_124.c"}
{"compilable":1,"function":"int *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0)\n        out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int *a, int n, int b, int *m) {\n  int i;\n  if (n <= 0) {\n    *m = 0;\n    return malloc(0);\n  }\n  *m = 2 * n - 1;\n  int *c = malloc(2 * n - 1 * sizeof(int));\n  c[0] = a[0];\n  for (i = 1; i < n; i++) {\n    c[2 * i - 1] = b;\n    c[2 * i] = a[i];\n  }\n  return c;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_5.c"}
{"compilable":1,"function":"int *func0(int nums[], int size) {\n    int *sumdigit = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12];\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0)\n            sum += w[0] - '0';\n        else\n            sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j];\n                sumdigit[j] = sumdigit[j - 1];\n                sumdigit[j - 1] = m;\n                m = nums[j];\n                nums[j] = nums[j - 1];\n                nums[j - 1] = m;\n            }\n    free(sumdigit);\n    return nums;\n}\n","function_prediction":"int *func0_name_conflict(int *A, int ASize) {\n  int *B = (int *)malloc(sizeof(int) * ASize);\n  int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  char a[19], b[19];\n  for (i = 0; i < ASize; i++) {\n    sprintf(a, \"%d\", A[i] > 0 ? A[i] : -A[i]);\n    l = strlen(a);\n    for (j = 0, k = 0; j < l - 1; j++) {\n      k += a[j] - '0';\n    }\n    if (A[i] > 0) {\n      k -= a[0] - '0';\n    } else {\n      k += a[0] - '0';\n    }\n    B[i] = k;\n  }\n  for (i = 0; i < ASize; i++) {\n    for (j = 0; j < ASize - 1; j++) {\n      if (B[j] > B[j + 1]) {\n        k = B[j];\n        B[j] = B[j + 1];\n        B[j + 1] = k;\n        k = A[j];\n        A[j] = A[j + 1];\n        A[j + 1] = k;\n      }\n    }\n  }\n  free(B);\n  return A;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_145.c"}
{"compilable":1,"function":"const char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            count++;\n        if (s1[i] == ')')\n            count--;\n        if (count < 0)\n            can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            count++;\n        if (s2[i] == ')')\n            count--;\n        if (count < 0)\n            can = 0;\n    }\n    if (count == 0 && can)\n        return \"Yes\";\n    count = 0;\n    can = 1;\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(')\n            count++;\n        if (s2[i] == ')')\n            count--;\n        if (count < 0)\n            can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(')\n            count++;\n        if (s1[i] == ')')\n            count--;\n        if (count < 0)\n            can = 0;\n    }\n    if (count == 0 && can)\n        return \"Yes\";\n    return \"No\";\n}\n","function_prediction":"char *func0_name_conflict(char *s1, char *s2) {\n  int len1 = strlen(s1);\n  int len2 = strlen(s2);\n  int i, count = 0;\n  int flag1 = 1, flag2 = 1;\n  for (i = 0; i < len1; i++) {\n    if (s1[i] == '(') {\n      count++;\n    } else if (s1[i] == ')') {\n      count--;\n    }\n    if (count < 0) {\n      flag1 = 0;\n    }\n  }\n  count = 0;\n  for (i = 0; i < len2; i++) {\n    if (s2[i] == '(') {\n      count++;\n    } else if (s2[i] == ')') {\n      count--;\n    }\n    if (count < 0) {\n      flag2 = 0;\n    }\n  }\n  count = 0;\n  for (i = 0; i < len1; i++) {\n    if (s1[i] == '(') {\n      count++;\n    } else if (s1[i] == ')') {\n      count--;\n    }\n    if (count < 0) {\n      flag1 = 0;\n    }\n  }\n  count = 0;\n  for (i = 0; i < len2; i++) {\n    if (s2[i] == '(') {\n      count++;\n    } else if (s2[i] == ')') {\n      count--;\n    }\n    if (count < 0) {\n      flag2 = 0;\n    }\n  }\n  if (count == 0 && flag1 && flag2) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_119.c"}
{"compilable":1,"function":"int func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0)\n            sum += lst[i * 2 + 1];\n    return sum;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i++)\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  return sum;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_85.c"}
{"compilable":1,"function":"bool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i])\n            return 0;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1)\n        sum += q[size / 2];\n    return sum <= w;\n}\n","function_prediction":"bool func0_name_conflict(int *arr, int n, int k) {\n  int i, sum = 0;\n  for (i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\n      return false;\n    sum += arr[i] + arr[n - i - 1];\n  }\n  if (n % 2 == 1)\n    sum += arr[n / 2];\n  return sum <= k;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_72.c"}
{"compilable":1,"function":"int func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(int n) {\n  int i;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return n / i;\n  return 1;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_24.c"}
{"compilable":1,"function":"char *func0(int decimal) {\n    char *out = malloc(64);\n    if (!out) {\n        return ((void *)0);\n    }\n    int index = 62;\n    out[63] = '\\x00';\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0)\n            {\n                out[index--] = '0' + (decimal % 2);\n                decimal /= 2;\n            }\n    }\n    out[index--] = 'b';\n    out[index--] = 'd';\n    int start = index + 1;\n    int len = 62 - start;\n    char *formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return ((void *)0);\n    }\n    strcpy(formatted_out, &out[start]);\n    strcat(formatted_out, \"db\");\n    free(out);\n    return formatted_out;\n}\n","function_prediction":"char *func0_name_conflict(int n) {\n  char *s = malloc(64);\n  if (!s)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0)\n    s[i--] = '0';\n  while (n > 0) {\n    s[i--] = '0' + n % 2;\n    n /= 2;\n  }\n  s[i--] = 'b';\n  s[i--] = 'd';\n  char *t = malloc(64 - i);\n  if (!t) {\n    free(s);\n    return NULL;\n  }\n  strcpy(t, s + i + 1);\n  t[strlen(t)] = 'bd';\n  t[strlen(t) + 1] = '\\0';\n  free(s);\n  return t;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_79.c"}
{"compilable":1,"function":"long long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}\n","function_prediction":"long func0_name_conflict(int n) {\n  long i, j, k;\n  k = 1;\n  for (i = 1; i <= n; i++) {\n    j = i;\n    k = k * j;\n  }\n  return k;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_139.c"}
{"compilable":1,"function":"int func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100)\n        {\n            if (p == x)\n                return 1;\n            p = p * n;\n            count += 1;\n        }\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int n, int k) {\n  int i;\n  int p;\n\n  if (n <= 0)\n    return 0;\n  if (n == 1)\n    return 1;\n\n  p = 1;\n  for (i = 1; i <= 99; i++) {\n    p *= k;\n    if (p > n)\n      break;\n    if (p == n)\n      return 1;\n  }\n  return 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_76.c"}
{"compilable":1,"function":"char *func0(const char *a, const char *b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n    for (int i = 0; a_modified[i]; ++i)\n        if (a_modified[i] == ',')\n            a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i)\n        if (b_modified[i] == ',')\n            b_modified[i] = '.';\n    double numa = strtod(a_modified, &end);\n    if (*end) {\n        free(a_modified);\n        free(b_modified);\n        return \"Invalid input\";\n    }\n    double numb = strtod(b_modified, &end);\n    if (*end) {\n        free(a_modified);\n        free(b_modified);\n        return \"Invalid input\";\n    }\n    free(a_modified);\n    free(b_modified);\n    if (numa == numb)\n        return \"None\";\n    return numa > numb ? (char *)a : (char *)b;\n}\n","function_prediction":"char *func0_name_conflict(char *a, char *b) {\n  char *a_copy = strdup(a);\n  char *b_copy = strdup(b);\n  char *endptr;\n  double a_val, b_val;\n\n  for (char *p = a_copy; *p; p++)\n    if (*p == ',')\n      *p = '.';\n  for (char *p = b_copy; *p; p++)\n    if (*p == ',')\n      *p = '.';\n\n  a_val = strtod(a_copy, &endptr);\n  if (*endptr) {\n    free(a_copy);\n    free(b_copy);\n    return \"Invalid input\";\n  }\n\n  b_val = strtod(b_copy, &endptr);\n  if (*endptr) {\n    free(a_copy);\n    free(b_copy);\n    return \"Invalid input\";\n  }\n\n  free(a_copy);\n  free(b_copy);\n\n  if (a_val == b_val)\n    return \"None\";\n  else if (a_val > b_val)\n    return a;\n  else\n    return b;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_137.c"}
{"compilable":1,"function":"char *func0(char **strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    char *out = (char *)malloc(length + 1);\n    if (!out) {\n        return ((void *)0);\n    }\n    out[0] = '\\x00';\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    return out;\n}\n","function_prediction":"char *func0_name_conflict(char **argv, int argc) {\n  int i, len = 0;\n  char *ret;\n\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n\n  ret = malloc(len + 1);\n  if (ret == NULL)\n    return NULL;\n\n  ret[0] = '\\0';\n\n  for (i = 0; i < argc; i++)\n    strcat(ret, argv[i]);\n\n  return ret;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_28.c"}
{"compilable":0,"function":"int func0(int a) {\n    if (a < 2)\n        return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0)\n            {\n                a = a / i;\n                num++;\n            }\n    }\n    if (a > 1)\n        num++;\n    return num == 3;\n}\n","function_prediction":"bool func0_name_conflict(int n) {\n  int count = 0;\n  for (int i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n      n /= i;\n      count++;\n    }\n  }\n  if (n > 1) {\n    count++;\n  }\n  return count == 3;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_75.c"}
{"compilable":1,"function":"long long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min)\n            min = current;\n    }\n    return min;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, min, sum;\n\n  min = a[0];\n  sum = a[0];\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      sum += a[i];\n    else\n      sum = a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_114.c"}
{"compilable":1,"function":"int func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0)\n        return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}\n","function_prediction":"int func0_name_conflict(char *s, char *t) {\n  int i, j, k, count = 0;\n  int len_s = strlen(s);\n  int len_t = strlen(t);\n\n  for (i = 0; i < len_s; i++) {\n    for (j = i, k = 0; k < len_t; j++, k++) {\n      if (s[j] != t[k])\n        break;\n    }\n    if (k == len_t)\n      count++;\n  }\n  return count;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_18.c"}
{"compilable":1,"function":"bool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return 1;\n    return 0;\n}\n","function_prediction":"int func0_name_conflict(int *a, int n) {\n  int i, j, k;\n  int sum;\n\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      for (k = j + 1; k < n; k++)\n        if (a[i] + a[j] + a[k] == 0)\n          return 1;\n\n  return 0;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_40.c"}
{"compilable":1,"function":"int func0(const char *num) {\n    const char *key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i]))\n            out += 1;\n    }\n    return out;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, n;\n  char *p;\n\n  n = 0;\n  p = s + strlen(s);\n  for (i = 0; s != p; s++)\n    if (strchr(\"2357BD\", *s))\n      n++;\n  return n;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_78.c"}
{"compilable":1,"function":"int *func0(int n, int *size) {\n    int *out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0)\n            {\n                n = n / i;\n                out[(*size)++] = i;\n            }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}\n","function_prediction":"int *func0_name_conflict(int n, int *len) {\n  int *factors = malloc(256 * sizeof(int));\n  *len = 0;\n  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n      do {\n        factors[(*len)++] = i;\n        n /= i;\n      } while (n % i == 0);\n    }\n  }\n  if (n > 1) {\n    factors[(*len)++] = n;\n  }\n  return factors;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_25.c"}
{"compilable":1,"function":"int func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    return count;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  int i, n, cnt;\n\n  n = strlen(s);\n  cnt = 0;\n  for (i = 0; i < n; i++) {\n    if (strchr(\"aeiouAEIOU\", s[i]))\n      cnt++;\n  }\n  if (s[n - 1] == 'Y' || s[n - 1] == 'y')\n    cnt++;\n  return cnt;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_64.c"}
{"compilable":1,"function":"bool func0(const char *s) {\n    if (strlen(s) < 3)\n        return 0;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i - 1] || s[i] == s[i - 2])\n            return 0;\n    return 1;\n}\n","function_prediction":"int func0_name_conflict(char *s) {\n  size_t i;\n  size_t len = strlen(s);\n\n  for (i = 0; i < len - 2; i++) {\n    if (s[i] == s[i + 2])\n      return 0;\n    if (s[i] == s[i + 1])\n      return 0;\n  }\n  return 1;\n}","pass":0,"source_file":"C_COMPILE/HumanEval/O1/O1_source_80.c"}
{"compilable":1,"function":"char **func0(const char *paren_string, int *group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char **groups = malloc(capacity * sizeof(char *));\n    char *buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\x00';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char *));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n    free(buffer);\n    return groups;\n}\n","function_prediction":"char **func0_name_conflict(char *s, int *returnSize) {\n  int len = strlen(s);\n  char **res = (char **)malloc(sizeof(char *) * 10);\n  char *tmp = (char *)malloc(sizeof(char) * (len + 1));\n  *returnSize = 0;\n  int i, j, k, l;\n  int count = 0;\n  for (i = 0, j = 0; i < len; i++) {\n    if (s[i] == '(') {\n      count++;\n      tmp[j++] = s[i];\n    } else if (s[i] == ')') {\n      count--;\n      tmp[j++] = s[i];\n      if (count == 0) {\n        tmp[j] = '\\0';\n        res[(*returnSize)++] = strdup(tmp);\n        j = 0;\n        if (*returnSize + 1 >= 10) {\n          res = (char **)realloc(res, sizeof(char *) * (*returnSize * 2));\n        }\n      }\n    }\n  }\n  free(tmp);\n  return res;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_1.c"}
{"compilable":1,"function":"int func0(int x, int y) {\n    if (y < x)\n        return -1;\n    if (y == x && y % 2 == 1)\n        return -1;\n    if (y % 2 == 1)\n        return y - 1;\n    return y;\n}\n","function_prediction":"int func0_name_conflict(int a, int b) {\n  if (a > b)\n    return -1;\n  if (a == b)\n    return (b % 2 == 1) ? -1 : b;\n  return b - (b % 2 == 1);\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_102.c"}
{"compilable":1,"function":"int func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\x00')\n        {\n            length++;\n        }\n    return length;\n}\n","function_prediction":"size_t func0_name_conflict(const char *s) {\n  size_t i = 0;\n  while (s[i])\n    i++;\n  return i;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_23.c"}
{"compilable":1,"function":"char *func0(const char *text) {\n    if (strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n    unsigned int crc = 4294967295U;\n    unsigned int i, j;\n    unsigned char byte;\n    for (i = 0; text[i] != '\\x00'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for (j = 0; j < 8; j++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 3988292384U;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n    char *result = malloc(9);\n    if (result != ((void *)0)) {\n        sprintf(result, \"%08X\", crc);\n    }\n    return result;\n}\n","function_prediction":"char *func0_name_conflict(const char *str) {\n  unsigned int crc = 0xFFFFFFFF;\n  unsigned int i;\n  char *result;\n\n  if (!*str)\n    return strdup(\"None\");\n\n  while (*str) {\n    crc ^= (unsigned char)*str++;\n    for (i = 0; i < 8; i++)\n      crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));\n  }\n\n  result = malloc(9);\n  if (result)\n    sprintf(result, \"%08X\", ~crc);\n\n  return result;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_162.c"}
{"compilable":1,"function":"char **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = ((void *)0);\n    char current[101] = {0};\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\x00') {\n                if (j > 0) {\n                    current[j] = '\\x00';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (((*__ctype_b_loc())[(int)((txt[i]))] & (unsigned short)_ISlower) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n    *returnSize = count;\n    return out;\n}\n","function_prediction":"char **func0_name_conflict(char *str, int *n) {\n  int i, j, k, len, count;\n  char **ret, tmp[12];\n\n  len = strlen(str);\n  ret = (char **)malloc(sizeof(char *) * (len + 1));\n  for (i = j = k = 0; i < len; i++) {\n    if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n      if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n        j = 0;\n      }\n    } else {\n      tmp[j++] = str[i];\n    }\n  }\n  *n = k;\n  return ret;\n}","pass":1,"source_file":"C_COMPILE/HumanEval/O1/O1_source_125.c"}
